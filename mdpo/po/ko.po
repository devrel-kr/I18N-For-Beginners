#
msgid ""
msgstr ""

#~ msgid "Azure Cosmos DB client library for Python"
#~ msgstr ""

#~ msgid ""
#~ "Azure Cosmos DB is a globally distributed, multi-model database service that"
#~ " supports document, key-value, wide-column, and graph databases."
#~ msgstr ""

#~ msgid ""
#~ "Use the Cosmos DB client library for Python to manage databases and the JSON"
#~ " documents they contain in this NoSQL database service:"
#~ msgstr ""

#~ msgid "Create Cosmos DB databases and modify their settings"
#~ msgstr ""

#~ msgid "Create and modify containers to store collections of JSON documents"
#~ msgstr ""

#~ msgid ""
#~ "Create, read, update, and delete the items (JSON documents) in your "
#~ "containers"
#~ msgstr ""

#~ msgid "Query the documents in your database using SQL-like syntax"
#~ msgstr ""

#~ msgid "[Package (PyPi)][pypi]"
#~ msgstr ""

#~ msgid "[API reference documentation][ref_cosmos_sdk]"
#~ msgstr ""

#~ msgid "[Product documentation][cosmos_docs]"
#~ msgstr ""

#~ msgid ""
#~ "[Source code](https://github.com/Azure/azure-sdk-for-"
#~ "python/tree/main/sdk/cosmos/azure-cosmos)"
#~ msgstr ""

#~ msgid ""
#~ "[ChangeLog](https://github.com/Azure/azure-sdk-for-"
#~ "python/blob/main/sdk/cosmos/azure-cosmos/CHANGELOG.md)"
#~ msgstr ""

#~ msgid ""
#~ "[Samples](https://github.com/Azure/azure-sdk-for-"
#~ "python/tree/main/sdk/cosmos/azure-cosmos/samples)"
#~ msgstr ""

#~ msgid ""
#~ "[Versioned API References](https://azure.github.io/azure-sdk-for-"
#~ "python/cosmosdb.html)"
#~ msgstr ""

#~ msgid ""
#~ "Note, this library supports Cosmos API versions "
#~ "[2018-12-31](https://docs.microsoft.com/en-us/rest/api/cosmos-db/) and "
#~ "below."
#~ msgstr ""

#~ msgid "Getting started"
#~ msgstr ""

#~ msgid "Install the package"
#~ msgstr ""

#~ msgid "Install the Azure Cosmos DB client library for Python with [pip]:"
#~ msgstr ""

#~ msgid ""
#~ "**Prerequisites**: You must have an [Azure subscription][azure_sub], [Cosmos"
#~ " DB account][cosmos_account] (SQL API), and [Python 3.6+][python] to use "
#~ "this package."
#~ msgstr ""

#~ msgid ""
#~ "If you need a Cosmos DB SQL API account, you can use the Azure [Cloud "
#~ "Shell][cloud_shell_bash] to create one with this Azure CLI command:"
#~ msgstr ""

#~ msgid "Authenticate the client"
#~ msgstr ""

#~ msgid ""
#~ "Interaction with Cosmos DB starts with an instance of the `CosmosClient` "
#~ "class. You need an **account**, its **URI**, and one of its **account keys**"
#~ " to instantiate the client object."
#~ msgstr ""

#~ msgid "Get credentials"
#~ msgstr ""

#~ msgid ""
#~ "Use the [Azure CLI][azure_cli] snippet below to populate two environment "
#~ "variables with the database account URI and its primary master key (you can "
#~ "also find these values in the [Azure portal][azure_portal]). The snippet is "
#~ "formatted for the Bash shell."
#~ msgstr ""

#~ msgid "Create client"
#~ msgstr ""

#~ msgid ""
#~ "Once you've populated the `ACCOUNT_URI` and `ACCOUNT_KEY` environment "
#~ "variables, you can create the `CosmosClient`."
#~ msgstr ""

#~ msgid "Key concepts"
#~ msgstr ""

#~ msgid ""
#~ "Once you've initialized a `CosmosClient`, you can interact with the primary "
#~ "resource types in Cosmos DB:"
#~ msgstr ""

#~ msgid ""
#~ "Database: A Cosmos DB account can contain multiple databases. When you "
#~ "create a database, you specify the API you'd like to use when interacting "
#~ "with its documents: SQL, MongoDB, Gremlin, Cassandra, or Azure Table. Use "
#~ "the Database object to manage its containers."
#~ msgstr ""

#~ msgid ""
#~ "Container: A container is a collection of JSON documents. You create "
#~ "(insert), read, update, and delete items in a container by using methods on "
#~ "the Container object."
#~ msgstr ""

#~ msgid ""
#~ "Item: An Item is the dictionary-like representation of a JSON document "
#~ "stored in a container. Each Item you add to a container must include an `id`"
#~ " key with a value that uniquely identifies the item within the container."
#~ msgstr ""

#~ msgid ""
#~ "For more information about these resources, see [Working with Azure Cosmos "
#~ "databases, containers and items][cosmos_resources]."
#~ msgstr ""

#~ msgid "Examples"
#~ msgstr ""

#~ msgid ""
#~ "The following sections provide several code snippets covering some of the "
#~ "most common Cosmos DB tasks, including:"
#~ msgstr ""

#~ msgid "[Create a database](#create-a-database)"
#~ msgstr ""

#~ msgid "[Create a container](#create-a-container)"
#~ msgstr ""

#~ msgid "[Insert data](#insert-data)"
#~ msgstr ""

#~ msgid "[Query the database](#query-the-database)"
#~ msgstr ""

#~ msgid "[Delete data](#delete-data)"
#~ msgstr ""

#~ msgid "Create a database"
#~ msgstr ""

#~ msgid ""
#~ "After authenticating your `CosmosClient`, you can work with any resource in "
#~ "the account. The code snippet below creates a SQL API database, which is the"
#~ " default when no API is specified when create_database is invoked."
#~ msgstr ""

#~ msgid "Create a container"
#~ msgstr ""

#~ msgid ""
#~ "This example creates a container with default settings. If a container with "
#~ "the same name already exists in the database (generating a `409 Conflict` "
#~ "error), the existing container is obtained instead."
#~ msgstr ""

#~ msgid ""
#~ "The preceding snippet also handles the HTTPFailure exception if the "
#~ "container creation failed. For more information on error handling and "
#~ "troubleshooting, see the [Troubleshooting](#troubleshooting) section."
#~ msgstr ""

#~ msgid "Insert data"
#~ msgstr ""

#~ msgid ""
#~ "To insert items into a container, pass a dictionary containing your data to "
#~ "Container.upsert_item. Each item you add to a container must include an `id`"
#~ " key with a value that uniquely identifies the item within the container."
#~ msgstr ""

#~ msgid ""
#~ "This example inserts several items into the container, each with a unique "
#~ "`id`:"
#~ msgstr ""

#~ msgid "Query the database"
#~ msgstr ""

#~ msgid ""
#~ "A Cosmos DB SQL API database supports querying the items in a container with"
#~ " Container.query_items using SQL-like syntax."
#~ msgstr ""

#~ msgid "This example queries a container for items with a specific `id`:"
#~ msgstr ""

#~ msgid ""
#~ "NOTE: Although you can specify any value for the container name in the "
#~ "`FROM` clause, we recommend you use the container name for consistency."
#~ msgstr ""

#~ msgid ""
#~ "Perform parameterized queries by passing a dictionary containing the "
#~ "parameters and their values to Container.query_items:"
#~ msgstr ""

#~ msgid ""
#~ "For more information on querying Cosmos DB databases using the SQL API, see "
#~ "[Query Azure Cosmos DB data with SQL queries][cosmos_sql_queries]."
#~ msgstr ""

#~ msgid "Delete data"
#~ msgstr ""

#~ msgid ""
#~ "To delete items from a container, use Container.delete_item. The SQL API in "
#~ "Cosmos DB does not support the SQL `DELETE` statement."
#~ msgstr ""

#~ msgid "Troubleshooting"
#~ msgstr ""

#~ msgid "General"
#~ msgstr ""

#~ msgid ""
#~ "When you interact with Cosmos DB using the Python SDK, errors returned by "
#~ "the service correspond to the same HTTP status codes returned for REST API "
#~ "requests:"
#~ msgstr ""

#~ msgid "[HTTP Status Codes for Azure Cosmos DB][cosmos_http_status_codes]"
#~ msgstr ""

#~ msgid ""
#~ "For example, if you try to create a container using an ID (name) that's "
#~ "already in use in your Cosmos DB database, a `409` error is returned, "
#~ "indicating the conflict. In the following snippet, the error is handled "
#~ "gracefully by catching the exception and displaying additional information "
#~ "about the error."
#~ msgstr ""

#~ msgid "Handle transient errors with retries"
#~ msgstr ""

#~ msgid ""
#~ "While working with Cosmos DB, you might encounter transient failures caused "
#~ "by [rate limits][cosmos_request_units] enforced by the service, or other "
#~ "transient problems like network outages. For information about handling "
#~ "these types of failures, see [Retry pattern][azure_pattern_retry] in the "
#~ "Cloud Design Patterns guide, and the related [Circuit Breaker "
#~ "pattern][azure_pattern_circuit_breaker]."
#~ msgstr ""

#~ msgid "Next steps"
#~ msgstr ""

#~ msgid "More sample code"
#~ msgstr ""

#~ msgid ""
#~ "Several Cosmos DB Python SDK samples are available to you in the SDK's "
#~ "GitHub repository. These samples provide example code for additional "
#~ "scenarios commonly encountered while working with Cosmos DB:"
#~ msgstr ""

#~ msgid ""
#~ "[`examples.py`][sample_examples_misc] - Contains the code snippets found in "
#~ "this article."
#~ msgstr ""

#~ msgid ""
#~ "[`databasemanagementsample.py`][sample_database_mgmt] - Python code for "
#~ "working with Azure Cosmos DB databases, including:"
#~ msgstr ""

#~ msgid "Create database"
#~ msgstr ""

#~ msgid "Get database by ID"
#~ msgstr ""

#~ msgid "Get database by query"
#~ msgstr ""

#~ msgid "List databases in account"
#~ msgstr ""

#~ msgid "Delete database"
#~ msgstr ""

#~ msgid ""
#~ "[`documentmanagementsample.py`][sample_document_mgmt] - Example code for "
#~ "working with Cosmos DB documents, including:"
#~ msgstr ""

#~ msgid "Create container"
#~ msgstr ""

#~ msgid "Create documents (including those with differing schemas)"
#~ msgstr ""

#~ msgid "Get document by ID"
#~ msgstr ""

#~ msgid "Get all documents in a container"
#~ msgstr ""

#~ msgid "Additional documentation"
#~ msgstr ""

#~ msgid ""
#~ "For more extensive documentation on the Cosmos DB service, see the [Azure "
#~ "Cosmos DB documentation][cosmos_docs] on docs.microsoft.com."
#~ msgstr ""

#~ msgid "Contributing"
#~ msgstr ""

#~ msgid ""
#~ "This project welcomes contributions and suggestions. Most contributions "
#~ "require you to agree to a Contributor License Agreement (CLA) declaring that"
#~ " you have the right to, and actually do, grant us the rights to use your "
#~ "contribution. For details, visit https://cla.microsoft.com."
#~ msgstr ""

#~ msgid ""
#~ "When you submit a pull request, a CLA-bot will automatically determine "
#~ "whether you need to provide a CLA and decorate the PR appropriately (e.g., "
#~ "label, comment). Simply follow the instructions provided by the bot. You "
#~ "will only need to do this once across all repos using our CLA."
#~ msgstr ""

#~ msgid ""
#~ "This project has adopted the [Microsoft Open Source Code of "
#~ "Conduct](https://opensource.microsoft.com/codeofconduct/). For more "
#~ "information see the [Code of Conduct "
#~ "FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact "
#~ "[opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional "
#~ "questions or comments."
#~ msgstr ""

#, fuzzy
#~ msgid "[azure_cli]: https://docs.microsoft.com/cli/azure"
#~ msgstr "[azure_cli]: https://docs.microsoft.com/cli/azure"

#, fuzzy
#~ msgid ""
#~ "[azure_pattern_circuit_breaker]: "
#~ "https://docs.microsoft.com/azure/architecture/patterns/circuit-breaker"
#~ msgstr ""
#~ "[azure_pattern_circuit_breaker]: "
#~ "https://docs.microsoft.com/azure/architecture/patterns/circuit-breaker"

#, fuzzy
#~ msgid ""
#~ "[azure_pattern_retry]: "
#~ "https://docs.microsoft.com/azure/architecture/patterns/retry"
#~ msgstr ""
#~ "[azure_pattern_retry]: "
#~ "https://docs.microsoft.com/azure/architecture/patterns/retry"

#, fuzzy
#~ msgid "[azure_portal]: https://portal.azure.com"
#~ msgstr "[azure_portal]: https://portal.azure.com"

#, fuzzy
#~ msgid "[azure_sub]: https://azure.microsoft.com/free/"
#~ msgstr "[azure_sub]: https://azure.microsoft.com/free/"

#, fuzzy
#~ msgid "[cloud_shell]: https://docs.microsoft.com/azure/cloud-shell/overview"
#~ msgstr "[cloud_shell]: https://docs.microsoft.com/azure/cloud-shell/overview"

#, fuzzy
#~ msgid "[cloud_shell_bash]: https://shell.azure.com/bash"
#~ msgstr "[cloud_shell_bash]: https://shell.azure.com/bash"

#, fuzzy
#~ msgid ""
#~ "[cosmos_account_create]: https://docs.microsoft.com/azure/cosmos-db/how-to-"
#~ "manage-database-account"
#~ msgstr ""
#~ "[cosmos_account_create]: https://docs.microsoft.com/azure/cosmos-db/how-to-"
#~ "manage-database-account"

#, fuzzy
#~ msgid ""
#~ "[cosmos_account]: https://docs.microsoft.com/azure/cosmos-db/account-"
#~ "overview"
#~ msgstr ""
#~ "[cosmos_account]: https://docs.microsoft.com/azure/cosmos-db/account-"
#~ "overview"

#, fuzzy
#~ msgid ""
#~ "[cosmos_container]: https://docs.microsoft.com/azure/cosmos-db/databases-"
#~ "containers-items#azure-cosmos-containers"
#~ msgstr ""
#~ "[cosmos_container]: https://docs.microsoft.com/azure/cosmos-db/databases-"
#~ "containers-items#azure-cosmos-containers"

#, fuzzy
#~ msgid ""
#~ "[cosmos_database]: https://docs.microsoft.com/azure/cosmos-db/databases-"
#~ "containers-items#azure-cosmos-databases"
#~ msgstr ""
#~ "[cosmos_database]: https://docs.microsoft.com/azure/cosmos-db/databases-"
#~ "containers-items#azure-cosmos-databases"

#, fuzzy
#~ msgid "[cosmos_docs]: https://docs.microsoft.com/azure/cosmos-db/"
#~ msgstr "[cosmos_docs]: https://docs.microsoft.com/azure/cosmos-db/"

#, fuzzy
#~ msgid ""
#~ "[cosmos_http_status_codes]: https://docs.microsoft.com/rest/api/cosmos-"
#~ "db/http-status-codes-for-cosmosdb"
#~ msgstr ""
#~ "[cosmos_http_status_codes]: https://docs.microsoft.com/rest/api/cosmos-"
#~ "db/http-status-codes-for-cosmosdb"

#, fuzzy
#~ msgid ""
#~ "[cosmos_item]: https://docs.microsoft.com/azure/cosmos-db/databases-"
#~ "containers-items#azure-cosmos-items"
#~ msgstr ""
#~ "[cosmos_item]: https://docs.microsoft.com/azure/cosmos-db/databases-"
#~ "containers-items#azure-cosmos-items"

#, fuzzy
#~ msgid ""
#~ "[cosmos_request_units]: https://docs.microsoft.com/azure/cosmos-db/request-"
#~ "units"
#~ msgstr ""
#~ "[cosmos_request_units]: https://docs.microsoft.com/azure/cosmos-db/request-"
#~ "units"

#, fuzzy
#~ msgid ""
#~ "[cosmos_resources]: https://docs.microsoft.com/azure/cosmos-db/databases-"
#~ "containers-items"
#~ msgstr ""
#~ "[cosmos_resources]: https://docs.microsoft.com/azure/cosmos-db/databases-"
#~ "containers-items"

#, fuzzy
#~ msgid ""
#~ "[cosmos_sql_queries]: https://docs.microsoft.com/azure/cosmos-db/how-to-sql-"
#~ "query"
#~ msgstr ""
#~ "[cosmos_sql_queries]: https://docs.microsoft.com/azure/cosmos-db/how-to-sql-"
#~ "query"

#, fuzzy
#~ msgid "[cosmos_ttl]: https://docs.microsoft.com/azure/cosmos-db/time-to-live"
#~ msgstr "[cosmos_ttl]: https://docs.microsoft.com/azure/cosmos-db/time-to-live"

#, fuzzy
#~ msgid "[pip]: https://pypi.org/project/pip/"
#~ msgstr "[pip]: https://pypi.org/project/pip/"

#, fuzzy
#~ msgid "[pypi]: https://pypi.org/project/azure-cosmos/"
#~ msgstr "[pypi]: https://pypi.org/project/azure-cosmos/"

#, fuzzy
#~ msgid "[python]: https://www.python.org/downloads/"
#~ msgstr "[python]: https://www.python.org/downloads/"

#, fuzzy
#~ msgid ""
#~ "[ref_cosmos_sdk]: https://azure.github.io/azure-sdk-for-"
#~ "python/cosmosdb.html#azure-cosmos"
#~ msgstr ""
#~ "[ref_cosmos_sdk]: https://azure.github.io/azure-sdk-for-"
#~ "python/cosmosdb.html#azure-cosmos"

#, fuzzy
#~ msgid ""
#~ "[sample_database_mgmt]: https://github.com/binderjoe/cosmos-python-"
#~ "prototype/blob/master/examples/databasemanagementsample.py"
#~ msgstr ""
#~ "[sample_database_mgmt]: https://github.com/binderjoe/cosmos-python-"
#~ "prototype/blob/master/examples/databasemanagementsample.py"

#, fuzzy
#~ msgid ""
#~ "[sample_document_mgmt]: https://github.com/binderjoe/cosmos-python-"
#~ "prototype/blob/master/examples/documentmanagementsample.py"
#~ msgstr ""
#~ "[sample_document_mgmt]: https://github.com/binderjoe/cosmos-python-"
#~ "prototype/blob/master/examples/documentmanagementsample.py"

#, fuzzy
#~ msgid ""
#~ "[sample_examples_misc]: https://github.com/binderjoe/cosmos-python-"
#~ "prototype/blob/master/examples/examples.py"
#~ msgstr ""
#~ "[sample_examples_misc]: https://github.com/binderjoe/cosmos-python-"
#~ "prototype/blob/master/examples/examples.py"

#, fuzzy
#~ msgid "[venv]: https://docs.python.org/3/library/venv.html"
#~ msgstr "[venv]: https://docs.python.org/3/library/venv.html"

#, fuzzy
#~ msgid "[virtualenv]: https://virtualenv.pypa.io"
#~ msgstr "[virtualenv]: https://virtualenv.pypa.io"

#~ msgid ""
#~ "title: \"Policies: Support\" permalink: policies_support.html folder: "
#~ "policies sidebar: general_sidebar"
#~ msgstr ""

#~ msgid "**Azure SDK lifecycle and support policy**"
#~ msgstr ""

#~ msgid ""
#~ "Azure SDK Lifecycle and support are governed by the latest [Microsoft Modern"
#~ " Lifecycle Policy](https://docs.microsoft.com/en-"
#~ "US/lifecycle/policies/modern), which will prevail in case of any conflicts "
#~ "with the information below."
#~ msgstr ""

#~ msgid "**Package lifecycle**"
#~ msgstr ""

#~ msgid ""
#~ "Here are the stages of a typical package lifecycle (for major versions)"
#~ msgstr ""

#~ msgid ""
#~ "**Beta** – A new SDK that is available for early access and feedback "
#~ "purposes and is not recommended for use in production. The beta version "
#~ "support is limited to GitHub issues and response time is not guaranteed. "
#~ "Beta releases live typically for less than 1 year, after which they are "
#~ "either deprecated or released as stable."
#~ msgstr ""

#~ msgid ""
#~ "**Active** - The SDKs are generally available and fully supported, will "
#~ "receive new feature updates, as well as bug and security fixes. The major "
#~ "version will remain active for at least 12 months from the release date. "
#~ "Compatible updates for the major release are provided through minor "
#~ "versions, or patch versions. Customers are encouraged to use the latest "
#~ "version as that is the version that will get fixes and updates."
#~ msgstr ""

#~ msgid ""
#~ "**Deprecated** - A library no longer conforms to our most up-to-date [Azure "
#~ "SDK Guidelines](https://azure.github.io/azure-"
#~ "sdk/general_introduction.html), or has been superseded by a more recent "
#~ "release. In both cases, the current library is deprecated in favor of a "
#~ "newer library. Typically, deprecation occurs at the same time the "
#~ "replacement library is transitioned to Active, after which the releases will"
#~ " only address the most critical bug fixes and security fixes for at least "
#~ "another 12 months."
#~ msgstr ""

#~ msgid ""
#~ "**Community** - SDK will no longer receive updates from Microsoft unless "
#~ "otherwise specified in the separate customer agreement. The package will "
#~ "remain available via public package managers and the GitHub repo, which can "
#~ "be maintained by the community."
#~ msgstr ""

#~ msgid ""
#~ "You can check the lifecycle stage for your package at [this "
#~ "page](https://azure.github.io/azure-sdk/releases/latest/index.html)"
#~ msgstr ""

#~ msgid "**Azure Clouds**"
#~ msgstr ""

#~ msgid ""
#~ "By default, the Azure libraries are configured to connect to the Global "
#~ "Azure Cloud. Additional cloud target platforms are available, such as Azure "
#~ "Stack, Azure China and Government Cloud. Package lifecycle may vary across "
#~ "different target platforms. Refer to the target platform documentation for "
#~ "more information."
#~ msgstr ""

#~ msgid "**Azure SDK dependencies**"
#~ msgstr ""

#~ msgid ""
#~ "The Azure SDK libraries depend on Azure Service REST API, programming "
#~ "language runtime, OS, and third-party libraries."
#~ msgstr ""

#~ msgid ""
#~ "The Azure SDK libraries will not be guaranteed to work on platforms and with"
#~ " other dependencies that have reached their end of life. Dropping support "
#~ "for such dependencies may be done without increasing the major version of "
#~ "the Azure SDK libraries. We strongly recommend migration to supported "
#~ "platforms and other dependencies to be eligible for technical support."
#~ msgstr ""

#~ msgid ""
#~ "Below is a list of supported Azure SDK platforms and runtimes for your "
#~ "reference:"
#~ msgstr ""

#~ msgid ""
#~ "**Operating Systems:** Windows, MacOS, Linux (tested on Ubuntu) For Mobile "
#~ "development, please check the [IOS supported "
#~ "platforms](https://azure.github.io/azure-sdk/ios_design.html#ios-library-"
#~ "support), and the [Android supported "
#~ "platforms](https://azure.github.io/azure-sdk/android_design.html)"
#~ msgstr ""

#~ msgid "**Runtime:**"
#~ msgstr ""

#~ msgid ""
#~ "Any [supported .NET versions](https://dotnet.microsoft.com/en-"
#~ "us/platform/support/policy/dotnet-core) that implement .NET Standard 2.0."
#~ msgstr ""

#~ msgid "Java: Java 8 , Java 11"
#~ msgstr ""

#~ msgid ""
#~ "Node.js: [LTS versions of Node.js](https://nodejs.org/en/download/) "
#~ "including not just the ones in Active status, but also the ones in "
#~ "Maintainence status."
#~ msgstr ""

#~ msgid ""
#~ "Python 3.7+. Please check the [Azure SDK for Python policy "
#~ "planning](https://github.com/Azure/azure-sdk-for-python/wiki/Azure-SDKs-"
#~ "Python-version-support-policy) for more details on future Python versions."
#~ msgstr ""

#~ msgid ""
#~ "Go: Latest 2 major Go releases, refer to [Go "
#~ "releases](https://golang.org/doc/devel/release.html) for more details."
#~ msgstr ""

#~ msgid ""
#~ "C++: Refer to the list of supported platforms and compilers "
#~ "[here](https://azure.github.io/azure-sdk/cpp_implementation.html#supported-"
#~ "platforms)."
#~ msgstr ""

#~ msgid ""
#~ "Embedded C: Refer to the list of supported platforms and compilers "
#~ "[here](https://azure.github.io/azure-sdk/clang_design.html#supported-"
#~ "platforms)."
#~ msgstr ""

#~ msgid "**Test configurations:**"
#~ msgstr ""

#~ msgid ""
#~ "Below are the test configurations covering different operating systems and "
#~ "runtimes. You may see some outgoing versions for which we are dropping "
#~ "support or incoming versions that we don't officially support yet. Please "
#~ "see the details in the previous section for the officially supported set."
#~ msgstr ""

#~ msgid ""
#~ "[.NET test configuration](https://github.com/Azure/azure-sdk-for-"
#~ "net/blob/main/eng/pipelines/templates/stages/platform-matrix.json)"
#~ msgstr ""

#~ msgid ""
#~ "[Java test configuration](https://github.com/Azure/azure-sdk-for-"
#~ "java/blob/main/eng/pipelines/templates/stages/platform-matrix.json)"
#~ msgstr ""

#~ msgid ""
#~ "[JavaScript test configuration](https://github.com/Azure/azure-sdk-for-"
#~ "js/blob/main/eng/pipelines/templates/stages/platform-matrix.json)"
#~ msgstr ""

#~ msgid ""
#~ "[Python test configuration](https://github.com/Azure/azure-sdk-for-"
#~ "python/blob/main/eng/pipelines/templates/stages/platform-matrix.json)"
#~ msgstr ""

#~ msgid ""
#~ "[Go test configuration](https://github.com/Azure/azure-sdk-for-"
#~ "go/blob/main/eng/pipelines/templates/stages/platform-matrix.json)"
#~ msgstr ""

#~ msgid ""
#~ "[C++ test configuration](https://github.com/Azure/azure-sdk-for-"
#~ "cpp/blob/main/eng/pipelines/templates/stages/platform-matrix.json)"
#~ msgstr ""

#~ msgid "**Support**:"
#~ msgstr ""

#~ msgid ""
#~ "Customers with a support plan can open an Azure Support ticket "
#~ "[here](https://azure.microsoft.com/en-us/support/create-ticket/) You can "
#~ "open GitHub issues [in the Azure SDK GitHub "
#~ "repositories](https://github.com/Azure/azure-sdk/blob/main/README.md) to "
#~ "track bugs and feature requests. GitHub issues are free, but may take a "
#~ "longer time to process."
#~ msgstr ""

#~ msgid ""
#~ "title: \"C++ Guidelines: Implementation\"\n"
#~ "keywords: guidelines cpp\n"
#~ "permalink: cpp_implementation.html\n"
#~ "folder: cpp\n"
#~ "sidebar: general_sidebar"
#~ msgstr ""

#~ msgid ""
#~ "{% include draft.html content=\"The C++ Language guidelines are in DRAFT "
#~ "status\" %}"
#~ msgstr ""

#~ msgid "TODO: This section needs to be driven by code in the Core library."
#~ msgstr ""

#~ msgid "API Implementation"
#~ msgstr ""

#~ msgid ""
#~ "This section describes guidelines for implementing Azure SDK client "
#~ "libraries. Please note that some of these guidelines are automatically "
#~ "enforced by code generation tools."
#~ msgstr ""

#~ msgid "Service Client"
#~ msgstr ""

#~ msgid ""
#~ "When configuring your client library, particular care must be taken to "
#~ "ensure that the consumer of your client library can properly configure the "
#~ "connectivity to your Azure service both globally (along with other client "
#~ "libraries the consumer is using) and specifically with your client library."
#~ msgstr ""

#~ msgid ""
#~ "TODO: add a brief mention of the approach to implementing service clients."
#~ msgstr ""

#~ msgid "Service Methods"
#~ msgstr ""

#~ msgid ""
#~ "TODO: Briefly introduce that service methods are implemented via an "
#~ "`HttpPipeline` instance. Mention that much of this is done for you using "
#~ "code generation."
#~ msgstr ""

#~ msgid "HttpPipeline"
#~ msgstr ""

#~ msgid ""
#~ "The following example shows a typical way of using `HttpPipeline` to "
#~ "implement a service call method. The `HttpPipeline` will handle common HTTP "
#~ "requirements such as the user agent, logging, distributed tracing, retries, "
#~ "and proxy configuration."
#~ msgstr ""

#~ msgid "TODO: Show an example of invoking the pipeline"
#~ msgstr ""

#~ msgid "HttpPipelinePolicy/Custom Policies"
#~ msgstr ""

#~ msgid ""
#~ "The HTTP pipeline includes a number of policies that all requests pass "
#~ "through. Examples of policies include setting required headers, "
#~ "authentication, generating a request ID, and implementing proxy "
#~ "authentication. `HttpPipelinePolicy` is the base type of all policies "
#~ "(plugins) of the `HttpPipeline`. This section describes guidelines for "
#~ "designing custom policies."
#~ msgstr ""

#~ msgid "TODO: Show how to customize a pipeline"
#~ msgstr ""

#~ msgid "Service Method Parameters"
#~ msgstr ""

#~ msgid "Parameter Validation"
#~ msgstr ""

#~ msgid ""
#~ "In addition to [general parameter validation "
#~ "guidelines](introduction.md#cpp-parameters):"
#~ msgstr ""

#~ msgid "TODO: Briefly show common patterns for parameter validation"
#~ msgstr ""

#~ msgid "Supporting Types"
#~ msgstr ""

#~ msgid "Serialization {#cpp-usage-json}"
#~ msgstr ""

#~ msgid "JSON Serialization"
#~ msgstr ""

#~ msgid "Enumeration-like Structs"
#~ msgstr ""

#~ msgid ""
#~ "As described in [general enumeration guidelines](introduction.md#cpp-enums),"
#~ " you should use `enum` types whenever passing or deserializing a well-known "
#~ "set of values to or from the service. There may be times, however, where a "
#~ "`struct` is necessary to capture an extensible value from the service even "
#~ "if well-known values are defined, or to pass back to the service those same "
#~ "or other user-supplied values:"
#~ msgstr ""

#~ msgid ""
#~ "The value is retrieved and deserialized from service, and may contain a "
#~ "value not supported by the client library."
#~ msgstr ""

#~ msgid ""
#~ "The value is roundtripped: the value is retrieved and deserialized from the "
#~ "service, and may later be serialized and sent back to the server."
#~ msgstr ""

#~ msgid "TODO: Content in this section may need a new home."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-naming-enum\" %} name `enum "
#~ "class`es and enumerators using **PascalCase**."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-naming-enum-class\" %} use `enum"
#~ " class` for enumerations. For example:"
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cpp %} enum class PinState { Off, On }; {% endhighlight %}"
#~ msgstr ""

#~ msgid "Using Azure Core Types"
#~ msgstr ""

#~ msgid "Implementing Subtypes of Operation<T> {#cpp-implement-operation}"
#~ msgstr ""

#~ msgid ""
#~ "Subtypes of `Operation<T>` are returned from service client methods invoking"
#~ " long running operations."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-lro-return\" %} check the value of "
#~ "`IsDone` in subclass implementations of `PollInternal` and "
#~ "`PollUntilDoneInternal` and immediately return the result of "
#~ "`GetRawResponse` if it is true."
#~ msgstr ""

#~ msgid "TODO: Show an example implementation for Operation<T>."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-lro-return\" %} throw from methods on "
#~ "`Operation<T>` subclasses in the following scenarios."
#~ msgstr ""

#~ msgid ""
#~ "If an underlying service operation call from `Poll` or `PollUntilDone` "
#~ "throws, re-throw `RequestFailedException` or its subtype."
#~ msgstr ""

#~ msgid ""
#~ "If the operation completes with a non-success result, throw "
#~ "`RequestFailedException` or its subtype from `Poll` or `PollUntilDone`."
#~ msgstr ""

#~ msgid "Include any relevant error state information in the exception message."
#~ msgstr ""

#~ msgid "TODO: Show an example of how to handle errors."
#~ msgstr ""

#~ msgid ""
#~ "If the `Value` property is evaluated after the operation failed (`HasValue` "
#~ "is false and `IsDone` is true) throw the same exception as the one thrown "
#~ "when the operation failed."
#~ msgstr ""

#~ msgid "TODO: Show an example of how to throw in this case."
#~ msgstr ""

#~ msgid ""
#~ "If the `Value` property is evaluated before the operation is complete "
#~ "(`IsDone` is false) throw `TODO: What to throw`."
#~ msgstr ""

#~ msgid "The exception message should be: \"The operation has not yet completed.\""
#~ msgstr ""

#~ msgid ""
#~ "TODO: DO we want this behavior. TODO: Show an example of how to throw in "
#~ "this case."
#~ msgstr ""

#~ msgid "SDK Feature Implementation"
#~ msgstr ""

#~ msgid "Configuration"
#~ msgstr ""

#~ msgid "Logging"
#~ msgstr ""

#~ msgid ""
#~ "Request logging will be done automatically by the `HttpPipeline`. If a "
#~ "client library needs to add custom logging, follow the [same "
#~ "guidelines](implementation.md#general-logging) and mechanisms as the "
#~ "pipeline logging mechanism. If a client library wants to do custom logging, "
#~ "the designer of the library must ensure that the logging mechanism is "
#~ "pluggable in the same way as the `HttpPipeline` logging policy."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"dotnet-logging-follow-guidelines\" %} "
#~ "follow [the logging section of the Azure SDK General "
#~ "Guidelines](implementation.md#general-logging) if logging directly (as "
#~ "opposed to through the `HttpPipeline`)."
#~ msgstr ""

#~ msgid "C++ Logging specific details"
#~ msgstr ""

#~ msgid "TODO: This additional logging info may need a new home."
#~ msgstr ""

#~ msgid ""
#~ "Client libraries must support robust logging mechanisms so that the consumer"
#~ " can adequately diagnose issues with the method calls and quickly determine "
#~ "whether the issue is in the consumer code, client library code, or service."
#~ msgstr ""

#~ msgid ""
#~ "In general, our advice to consumers of these libraries is to establish "
#~ "logging in their preferred manner at the `WARNING` level or above in "
#~ "production to capture problems with the application, and this level should "
#~ "be enough for customer support situations. Informational or verbose logging "
#~ "can be enabled on a case-by-case basis to assist with issue resolution."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-logging-use-azurecore\" %} use the "
#~ "Azure Core library for logging."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-logging-pluggable-logger\" %} support "
#~ "pluggable log handlers."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-logging-console-logger\" %} make it "
#~ "easy for a consumer to enable logging output to the console. The specific "
#~ "steps required to enable logging to the console must be documented."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-logging-levels\" %} use one of the "
#~ "following log levels when emitting logs: `Verbose` (details), "
#~ "`Informational` (things happened), `Warning` (might be a problem or not), "
#~ "and `Error`."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-logging-failure\" %} use the `Error` "
#~ "logging level for failures that the application is unlikely to recover from "
#~ "(out of memory, etc.)."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-logging-warning\" %} use the `Warning` "
#~ "logging level when a function fails to perform its intended task. This "
#~ "generally means that the function will raise an exception. Do not include "
#~ "occurrences of self-healing events (for example, when a request will be "
#~ "automatically retried)."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MAY id=\"cpp-logging-slowlinks\" %} log the request "
#~ "and response (see below) at the `Warning` when a request/response cycle (to "
#~ "the start of the response body) exceeds a service-defined threshold. The "
#~ "threshold should be chosen to minimize false-positives and identify service "
#~ "issues."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-logging-info\" %} use the "
#~ "`Informational` logging level when a function operates normally."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-logging-verbose\" %} use the `Verbose` "
#~ "logging level for detailed troubleshooting scenarios. This is primarily "
#~ "intended for developers or system administrators to diagnose specific "
#~ "failures."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-logging-no-sensitive-info\" %} only log"
#~ " headers and query parameters that are in a service-provided \"allow-list\" "
#~ "of approved headers and query parameters. All other headers and query "
#~ "parameters must have their values redacted."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-logging-requests\" %} log request line "
#~ "and headers as an `Informational` message. The log should include the "
#~ "following information:"
#~ msgstr ""

#~ msgid "The HTTP method."
#~ msgstr ""

#~ msgid "The URL."
#~ msgstr ""

#~ msgid "The query parameters (redacted if not in the allow-list)."
#~ msgstr ""

#~ msgid "The request headers (redacted if not in the allow-list)."
#~ msgstr ""

#~ msgid "An SDK provided request ID for correlation purposes."
#~ msgstr ""

#~ msgid "The number of times this request has been attempted."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-logging-responses\" %} log response "
#~ "line and headers as an `Informational` message. The format of the log should"
#~ " be the following:"
#~ msgstr ""

#~ msgid "The SDK provided request ID (see above)."
#~ msgstr ""

#~ msgid "The status code."
#~ msgstr ""

#~ msgid "Any message provided with the status code."
#~ msgstr ""

#~ msgid "The response headers (redacted if not in the allow-list)."
#~ msgstr ""

#~ msgid ""
#~ "The time period between the first attempt of the request and the first byte "
#~ "of the body."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-logging-cancellations\" %} log an "
#~ "`Informational` message if a service call is cancelled. The log should "
#~ "include:"
#~ msgstr ""

#~ msgid "The reason for the cancellation (if available)."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-logging-exceptions\" %} log exceptions "
#~ "thrown as a `Warning` level message. If the log level set to `Verbose`, "
#~ "append stack trace information to the message."
#~ msgstr ""

#~ msgid "Distributed Tracing {#cpp-distributedtracing}"
#~ msgstr ""

#~ msgid "{% include draft.html content=\"Guidance coming soon ...\" %}"
#~ msgstr ""

#~ msgid "TODO: Add guidance for distributed tracing implementation"
#~ msgstr ""

#~ msgid "Telemetry"
#~ msgstr ""

#~ msgid "TODO: Add guidance regarding user agent strings"
#~ msgstr ""

#~ msgid "Testing"
#~ msgstr ""

#~ msgid ""
#~ "We believe testing is a part of the development process, so we expect unit "
#~ "and integration tests to be a part of the source code. All components must "
#~ "be covered by automated testing, and developers should strive to test corner"
#~ " cases and main flows for every use case."
#~ msgstr ""

#~ msgid ""
#~ "All code should contain, at least, requirements, unit tests, end-to-end "
#~ "tests, and samples."
#~ msgstr ""

#~ msgid "Tests should be written using the [Google Test][] library."
#~ msgstr ""

#~ msgid "Language-specific other"
#~ msgstr ""

#~ msgid ""
#~ "Unlike many other programming languages, which have large runtimes, the C++ "
#~ "standard runtime is limited in functionality and scope. The standard library"
#~ " covers areas such as memory and string manipulation, standard input/output,"
#~ " floating point and others. However, many of the features required for "
#~ "modern applications and services; e.g. those required for networking and "
#~ "advanced memory management are not part of the standard library. Instead, "
#~ "many of those features are included in open source C++ libraries that are "
#~ "also cross-platform with good support for Windows, OSX and most Linux "
#~ "platforms. Because of that support and because Azure SDK implementations "
#~ "will need such functionality, it is expected that client libraries will take"
#~ " dependencies on these libraries. Ensure the version matches to allow for "
#~ "compatibility when an application integrates multiple client libraries."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-approved-dependencies\" %} utilize the "
#~ "following libraries as needed for commonly required operations:"
#~ msgstr ""

#~ msgid "{% include_relative approved_dependencies.md %}"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUSTNOT id=\"cpp-test-implicit-assign\" %} use "
#~ "implicit assignment inside a test. This is generally an accidental omission "
#~ "of the second `=` of the logical compare. The following is confusing and "
#~ "prone to error."
#~ msgstr ""

#~ msgid "{% highlight cpp %} if (a = b) { ... } {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "Does the programmer really mean assignment here? Sometimes yes, but usually "
#~ "no. Instead use explicit tests and avoid assignment with an implicit test. "
#~ "The recommended form is to do the assignment before doing the test:"
#~ msgstr ""

#~ msgid "{% highlight cpp %} a = b; if (a) { ... } {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUSTNOT id=\"cpp-no-register\" %} use the register "
#~ "keyword. Modern compilers will put variables in registers automatically."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-be-const-correct\" %} be `const` "
#~ "correct. C++ provides the `const` keyword to allow passing as parameters "
#~ "objects that cannot change to indicate when a method doesn't modify its "
#~ "object. Using `const` in all the right places is called \"const "
#~ "correctness.\""
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-use-hashif\" %} use `#if` instead of "
#~ "`#ifdef`. For example:"
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cpp %} // Bad example #ifdef DEBUG TemporaryDebuggerBreak(); "
#~ "#endif {% endhighlight %}"
#~ msgstr ""

#~ msgid "Someone else might compile the code with turned-of debug info like:"
#~ msgstr ""

#~ msgid "{% highlight cpp %} cc -c lurker.cc -DDEBUG=0 {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "Alway use `#if` if you have to use the preprocessor. This works fine, and "
#~ "does the right thing, even if `DEBUG` is not defined at all (!)"
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cpp %} // Good example #if DEBUG TemporaryDebuggerBreak(); "
#~ "#endif {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "If you really need to test whether a symbol is defined or not, test it with "
#~ "the `defined()` construct, which allows you to add more things later to the "
#~ "conditional without editing text that's already in the program:"
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cpp %} #if !defined(USER_NAME) #define USER_NAME \"john smith\""
#~ " #endif {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-large-comments\" %} Use `#if` to "
#~ "comment out large code blocks."
#~ msgstr ""

#~ msgid ""
#~ "Sometimes large blocks of code need to be commented out for testing. The "
#~ "easiest way to do this is with an `#if 0` block:"
#~ msgstr ""

#~ msgid "{% highlight cpp %} void Example() { great looking code"
#~ msgstr ""

#~ msgid "} {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "You can't use `/**/` style comments because comments can't contain comments "
#~ "and a large block of your code will probably contain connects."
#~ msgstr ""

#~ msgid "Do not use `#if 0` directly. Instead, use descriptive macro names:"
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cpp %} #if NOT_YET_IMPLEMENTED #if OBSOLETE #if TEMP_DISABLED "
#~ "{% endhighlight %}"
#~ msgstr ""

#~ msgid "Always add a short comment explaining why it is commented out."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUSTNOT id=\"cpp-\" %} put data definitions in header"
#~ " files. For example, this should be avoided:"
#~ msgstr ""

#~ msgid "{% highlight cpp %} /* aheader.hpp */ int x = 0; {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "It's bad magic to have space consuming code silently inserted through the "
#~ "innocent use of header files. It's not common practice to define variables "
#~ "in the header file, so it will not occur to developers to look for this when"
#~ " there are problems. Instead, define the variable once in a source file and "
#~ "then use an `extern` statement to reference it in the header file."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUSTNOT id=\"cpp-no-magic-numbers\" %} use magic "
#~ "numbers. A magic number is a bare naked number used in source code. It's "
#~ "magic because no-one will know what it means after a while. This "
#~ "significantly reduces maintainability. For example:"
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cpp %} // Don't write this. if (19 == foo) { RefundLotsMoney();"
#~ " }} else { HappyDaysIKnowWhyIAmHere(); } {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "Instead of magic numbers, use a real name that means something. You can use "
#~ "`constexpr` for names. For example:"
#~ msgstr ""

#~ msgid "{% highlight cpp %} constexpr int WE_GOOFED = 19;"
#~ msgstr ""

#~ msgid ""
#~ "if (WE_GOOFED == foo) { RefundLotsMoney(); } else { "
#~ "HappyDaysIKnowWhyIAmHere(); } {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-check-syscall-errors\" %} check every "
#~ "system call for an error return, unless you know you wish to ignore errors. "
#~ "For example, `printf` returns an error code but it is rarely relevant. Cast "
#~ "the return to (void) if you do not care about the error code."
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cpp %} (void)printf(\"The return value is ignored\"); {% "
#~ "endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-include-errorstr\" %} include the "
#~ "system error text when reporting system error messages."
#~ msgstr ""

#~ msgid "Complexity Management"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/SHOULD id=\"cpp-init-all-vars\" %} Initialize all "
#~ "variables. Only leave them uninitialized if there is a real performance "
#~ "reason to do so. Use static and dynamic analysis tools to check for "
#~ "uninitialized access. You may leave \"result\" variables uninitialized so "
#~ "long as they clearly do not escape from the innermost lexical scope."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/SHOULD id=\"cpp-function-size\" %} limit function "
#~ "bodies to one page of code (40 lines, approximately)."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-document-null-bodies\" %} document null"
#~ " statements. Always document a null body for a `for` or `while` statement so"
#~ " that it is clear the null body is intentional."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-use-explicit-compares\" %} use explicit"
#~ " comparisons when testing for failure. Use `if (FAIL != f())` rather than "
#~ "`if (f())`, even though FAIL may have the value 0 which C considers to be "
#~ "false. An explicit test will help you out later when somebody decides that a"
#~ " failure return should be -1 instead of 0."
#~ msgstr ""

#~ msgid ""
#~ "Explicit comparison should be used even if the comparison value will never "
#~ "change. e.g. `if (!(bufsize % sizeof(int)))` should be written as `if (0 == "
#~ "(bufsize % sizeof(int))` to reflect the numeric (not boolean) nature of the "
#~ "test."
#~ msgstr ""

#~ msgid ""
#~ "A frequent trouble spot is using `strcmp` to test for string equality. You "
#~ "should **never** use a default action. The preferred approach is to use an "
#~ "inline function:"
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cpp %} inline bool StringEqual(char *a, char *b) { return (0 =="
#~ " strcmp(a, b)); } {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "~ Should {% include requirement/SHOULDNOT id=\"cpp-embedded-assign\" %} use "
#~ "embedded assignments. There is a time and a place for embedded assignment "
#~ "statements. In some constructs, there is no better way to accomplish the "
#~ "results without making the code bulkier and less readable."
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cpp %} while (EOF != (c = getchar())) { /* process the "
#~ "character */ } {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "However, one should consider the tradeoff between increased speed and "
#~ "decreased maintainability that results when embedded assignments are used in"
#~ " artificial places."
#~ msgstr ""

#~ msgid "Templates"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-naming-templates\" %} name "
#~ "function templates and class templates the same as one would name non-"
#~ "templates."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-naming-templates-parameters\" %}"
#~ " name template arguments with **PascalCase**."
#~ msgstr ""

#~ msgid "Macros"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/SHOULD id=\"cpp-design-naming-macros-avoid\" %} avoid"
#~ " use of macros. It is acceptable to use macros in the following situations. "
#~ "Use outside of these situations should contact the Azure Review Board."
#~ msgstr ""

#~ msgid ""
#~ "Platform, compiler, or other environment detection (for example, `_WIN32` or"
#~ " `_MSC_VER`)."
#~ msgstr ""

#~ msgid "Emission or suppression of diagnostics."
#~ msgstr ""

#~ msgid "Emission or supression of debugging asserts."
#~ msgstr ""

#~ msgid ""
#~ "Import declarations. (`__declspec(dllimport)`, `__declspec(dllexport)`)"
#~ msgstr ""

#~ msgid ""
#~ "TODO: Need to involve Charlie in how we want to talk about import "
#~ "declarations"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-naming-macros-caps\" %} name "
#~ "macros with **ALL_CAPITAL_SNAKE_CASE**."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-naming-macros-form\" %} prepend "
#~ "macro names with `AZ_<SERVICENAME>` to make macros unique."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUSTNOT id=\"cpp-design-naming-macros-functions\" %} "
#~ "use macros where an inline function or function template would achieve the "
#~ "same effect. Macros are not required for code efficiency."
#~ msgstr ""

#~ msgid "{% highlight cpp %} // Bad ##define MAX(a,b) ((a > b) ? a : b)"
#~ msgstr ""

#~ msgid ""
#~ "// Good template<class T> [[nodiscard]] inline T Max(T x, T y) { return x > "
#~ "y ? x : y; } {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUSTNOT id=\"cpp-design-naming-macros-donoevil\" %} "
#~ "change syntax via macro substitution. It [makes the program "
#~ "unintelligible](https://gist.github.com/aras-p/6224951) to all but the "
#~ "perpetrator."
#~ msgstr ""

#~ msgid "Type Safety Recommendations"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-logical-rule-of-zero\" %} In "
#~ "class types, implement the \"rule of zero\", the \"rule of 3\", or the "
#~ "\"rule of 5\". That is, of the special member functions, a type should "
#~ "implement exactly one of the following:"
#~ msgstr ""

#~ msgid ""
#~ "No copy constructor, no copy assignment operator, no move constructor, no "
#~ "move assignment operator, or destructor."
#~ msgstr ""

#~ msgid ""
#~ "A copy constructor, a copy assignment operator, no move constructor, no move"
#~ " assignment operator, and a destructor."
#~ msgstr ""

#~ msgid ""
#~ "A copy constructor, a copy assignment operator, a move constructor, a move "
#~ "assignment operator, and a destructor."
#~ msgstr ""

#~ msgid ""
#~ "This encourages use of resource managing types like std::unique_ptr (which "
#~ "implements the rule of 5) as a compositional tool in more complex data "
#~ "models that implement the rule of zero."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-logical-initialize-all-data\" %}"
#~ " provide types which are usable when default-initialized. (That is, every "
#~ "constructor must initialize all type invariants, not assume members have "
#~ "default values of 0 or similar.)"
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cpp %} class TypeWithInvariants { int m_member; public: "
#~ "TypeWithInvariants() noexcept : member(0) {} // Good: initializes all parts "
#~ "of the object [[nodiscard]] int Next() noexcept { return m_member++; } };"
#~ msgstr ""

#~ msgid ""
#~ "class BadTypeWithInvariants { int m_member; public: BadTypeWithInvariants() "
#~ "{} // Bad: Does not initialize all parts of the object int Next() { return "
#~ "m_member++; } };"
#~ msgstr ""

#~ msgid ""
#~ "void TheCustomerCode() { TypeWithInvariants a{}; // value-initializes a "
#~ "TypeWithInvariants, OK TypeWithInvariants b; // default-initializes a "
#~ "TypeWithInvariants, we want this to be OK BadTypeWithInvariants c{}; // "
#~ "value-initializes a BadTypeWithInvariants, OK BadTypeWithInvariants d; // "
#~ "default-initializes a BadTypeWithInvariants, this will trigger // undefined "
#~ "behavior if anyone calls d.Next() } {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-logical-no-getters-or-setters\" "
#~ "%} define getters and setters for data transfer objects. Expose the members "
#~ "directly to users unless you need to enforce some constraints on the data. "
#~ "For example: {% highlight cpp %} // Good - no restrictions on values struct "
#~ "ExampleRequest { int RetryTimeoutMs; const char* Text; };"
#~ msgstr ""

#~ msgid ""
#~ "// Bad - no restrictions on parameters and access is not idiomatic class "
#~ "ExampleRequest { int m_retryTimeoutMs; const char* m_text; public: "
#~ "[[nodiscard]] int GetRetryTimeoutMs() const noexcept { return "
#~ "m_retryTimeoutMs; } void SetRetryTimeoutMs(int i) noexcept { "
#~ "m_retryTimeoutMs = i; } [[nodiscard]] const char* GetText() const noexcept {"
#~ " return m_text; } void SetText(const char* i) noexcept { m_text = i; } };"
#~ msgstr ""

#~ msgid ""
#~ "// Good - type maintains invariants class TypeWhichEnforcesDataRequirements "
#~ "{ size_t m_size; int* m_data; public: [[nodiscard]] size_t GetSize() const "
#~ "noexcept { return m_size; } void AddData(int i) noexcept { m_data[m_size++] "
#~ "= i; } };"
#~ msgstr ""

#~ msgid ""
#~ "// Also Good class TypeWhichClamps { int m_retryTimeout; public: "
#~ "[[nodiscard]] int GetRetryTimeout() const noexcept { return m_retryTimeout; "
#~ "} void SetRetryTimeout(int i) noexcept { if (i < 0) i = 0; // clamp i to the"
#~ " range [0, 1000] if (i > 1000) i = 1000; m_retryTimeout = i; } };"
#~ msgstr ""

#~ msgid "{% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-logical-optimize-position\" %} "
#~ "declare variables in structures organized by use in a manner that minimizes "
#~ "memory wastage because of compiler alignment issues and size. All things "
#~ "being equal, use alphabetical ordering."
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cpp %} // Bad struct Foo { int A; // the compiler will insert 4"
#~ " bytes of padding after A to align B char *B; int C; char *D; };"
#~ msgstr ""

#~ msgid ""
#~ "// Good struct Foo { int A; // C is now stored in that padding int C; char "
#~ "*B; char *D; }; {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUSTNOT id=\"cpp-design-logical-enumsareinternal\" %}"
#~ " use enums to model any data sent to the service. Use enums only for types "
#~ "completely internal to the client library. For example, an enum to disable "
#~ "Nagle's algorithm would be OK, but an enum to ask the service to create a "
#~ "particular entity kind is not."
#~ msgstr ""

#~ msgid "Const and Reference members"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUSTNOT id=\"cpp-design-logical-no-const-or-"
#~ "reference-members\" %} declare types with const or reference members. Const "
#~ "and reference members artificially make your types non-Regular as they "
#~ "aren't assignable, and have surprising interactions with C++ Core language "
#~ "rules. For example, many accesses to const or reference members would need "
#~ "to involve use of `std::launder` to avoid undefined behavior, but "
#~ "`std::launder` was added in C++17, a later version than the SDKs currently "
#~ "target. See C++ Core Working Group [CWG1116 \"Aliasing of union "
#~ "members\"](http://www.open-"
#~ "std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1116), [CWG1776 \"Replacement "
#~ "of class objects containing reference members\"](http://www.open-"
#~ "std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1776), and [P0137R1 "
#~ "\"Replacement of class objects containing reference "
#~ "members\"](http://www.open-"
#~ "std.org/jtc1/sc22/wg21/docs/papers/2016/p0137r1.html) for additional "
#~ "details."
#~ msgstr ""

#~ msgid ""
#~ "If you want a type to provide effectively const data except assignment, "
#~ "declare all your member functions const. Const member functions only get a "
#~ "const view of the class' data."
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cpp %} // Bad class RetrySettings { const int m_maxRetryCount; "
#~ "public: int GetMaxRetryCount() { // intent: disallow m_maxRetryCount = "
#~ "aDifferentValue; return m_maxRetryCount; } };"
#~ msgstr ""

#~ msgid ""
#~ "// Good class RetrySettings { int m_maxRetryCount; public: int "
#~ "GetMaxRetryCount() const { // still prohibits m_maxRetryCount = "
#~ "aDifferentValue; without making RetrySettings un-assignable return "
#~ "m_maxRetryCount; } }; {% endhighlight %}"
#~ msgstr ""

#~ msgid "Integer sizes"
#~ msgstr ""

#~ msgid ""
#~ "The following integer rules are listed in rough priority order. Integer size"
#~ " selections are primarily driven by service future compatibility. For "
#~ "example, just because today a service might have a 2 GiB file size limit "
#~ "does not mean that it will have such a limit forever. We believe 64 bit "
#~ "length limits will be sufficient for sizes an individual program works with "
#~ "for the foreseeable future."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-logical-integer-files\" %} "
#~ "Represent file sizes with `int64_t`, even on 32 bit platforms."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-logical-integer-memory-buffers\""
#~ " %} Represent memory buffer sizes with `size_t` or `ptrdiff_t` as "
#~ "appropriate for the environment. Between the two, choose the type likely to "
#~ "need the fewest conversions in application. For example, we would prefer "
#~ "signed `ptrdiff_t` in most cases because signed integers behave like "
#~ "programmers expect more consistently, but the SDK will need to transact with"
#~ " `malloc`, `std::vector`, and/or `std::string` which all speak unsigned "
#~ "`size_t`."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-logical-integer-service-values\""
#~ " %} Represent any other integral quantity passed over the wire to a service "
#~ "using `int64_t`, even if the service uses a 32 bit constant internally "
#~ "today."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUSTNOT id=\"cpp-design-logical-integer-not-int\" %} "
#~ "Use `int` under any circumstances, including `for` loop indexes. Those "
#~ "should usually use `ptrdiff_t` or `size_t` under the buffer size rule above."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MAY id=\"cpp-design-logical-integer-otherwise\" %} "
#~ "Use any integer type in the `intN_t` or `uintN_t` family as appropriate for "
#~ "quantities not enumerated above, such as calculated values internal to the "
#~ "SDK such as retry counts."
#~ msgstr ""

#~ msgid "Secure functions"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/SHOULDNOT id=\"cpp-design-logical-no-ms-secure-"
#~ "functions\" %} use [Microsoft security enhanced versions of CRT "
#~ "functions](https://docs.microsoft.com/cpp/c-runtime-library/security-"
#~ "enhanced-versions-of-crt-functions) to implement APIs that need to be "
#~ "portable across many platforms. Such code is not portable and is not "
#~ "compatible with either the C or C++ Standards. See [arguments "
#~ "against](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1967.htm)."
#~ msgstr ""

#~ msgid "TODO: Verify with the security team, and what are the alternatives?"
#~ msgstr ""

#~ msgid "Enumerations"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-logical-client-enumerations-no-"
#~ "enums\" %} use `enum` or `enum class` for values shared \"over the wire\" "
#~ "with a service, to support future compatibility with the service where "
#~ "additional values are added. Such values should be persisted as strings in "
#~ "client data structures instead."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MAY id=\"cpp-design-logical-client-enumerations-"
#~ "enumish-pattern\" %} provide an 'extensible enum' pattern for storing "
#~ "service enumerations which provides reasonable constant values. This pattern"
#~ " stores the value as a string but provides public static member fields with "
#~ "the individual values for customer consumption. For example:"
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cpp %} #include <azure/core/strings.hpp> // for "
#~ "Azure::Core::Strings::LocaleInvariantCaseInsensitiveEqual #include <utility>"
#~ " // for std::move namespace Azure { namespace Group { namespace Service {"
#~ msgstr ""

#~ msgid ""
#~ "// an \"Extensible Enum\" type class KeyType { std::string m_value; public: "
#~ "// Provide `explicit` conversion from string or types convertible to string:"
#~ " explicit KeyType(const std::string& value) : m_value(value) { } explicit "
#~ "KeyType(std::string&& value) : m_value(std::move(value)) { } explicit "
#~ "KeyType(const char* value) : m_value(value) { }"
#~ msgstr ""

#~ msgid "}; }}} // namespace Azure::Group::Service"
#~ msgstr ""

#~ msgid ""
#~ "// in a .cpp file: namespace Azure { namespace Group { namespace Service { "
#~ "const KeyType KeyType::Ec{\"EC\"}; const KeyType KeyType::EcHsm{\"EC-HSM\"};"
#~ " const KeyType KeyType::Rsa{\"RSA\"}; const KeyType KeyType::RsaHsm{\"RSA-"
#~ "HSM\"}; const KeyType KeyType::Oct{\"OCT\"}; }}} // namespace "
#~ "Azure::Group::Service {% endhighlight %}"
#~ msgstr ""

#~ msgid "Physical Design"
#~ msgstr ""

#~ msgid ""
#~ "TODO: Move this to implementation or move the headers discussion from "
#~ "implementation here"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/SHOULD id=\"cpp-design-physical-include-quotes\" %} "
#~ "include files using quotes (\") for files within the same git repository, "
#~ "and angle brackets (<>) for external dependencies."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/SHOULD id=\"cpp-design-physical-unnamed-namespace\" "
#~ "%} declare all types that are only used within the same `.cpp` file in an "
#~ "unnamed namespace. For example:"
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cpp %} namespace { struct HashComputation { int "
#~ "InternalBookkeeping; }; } // unnamed namespace {% endhighlight %}"
#~ msgstr ""

#~ msgid "Class Types (including `union`s and `struct`s)"
#~ msgstr ""

#~ msgid ""
#~ "Throughout this section, *class types* includes types with *class-key* "
#~ "`struct` or *class-key* `union`, consistent with the [C++ "
#~ "Standard](http://eel.is/c++draft/class#pre-4)."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-naming-classes\" %} name class "
#~ "types with **PascalCase**."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-naming-classes-public-protected-"
#~ "variables\" %} name `public` and `protected` member variables with "
#~ "**PascalCase**."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-naming-classes-public-"
#~ "variables\" %} name `private` member variables with an `m_` prefix, followed"
#~ " by a **camelCase** name. For example, `m_timeoutMs`."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-design-naming-classes-functions\" %} "
#~ "name member functions with **PascalCase**, except where the C++ Standard "
#~ "forbids this. For example, `UploadBlob`, or `operator[]`."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/SHOULD id=\"cpp-design-naming-classes-no-struct-"
#~ "keyword\" %} declare classes with only public members using *class-key* "
#~ "`struct`. {% highlight cpp %} // Good struct OnlyPublicMembers { int Member;"
#~ " };"
#~ msgstr ""

#~ msgid ""
#~ "// Bad class OnlyPublicMembers { public: int Member; }; {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/SHOULD id=\"cpp-design-naming-classes-typedefs\" %} "
#~ "define class types without using `typedef`s. For example:"
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cpp %} // Good: Uses C++ style class declaration: struct "
#~ "IotClient { char* ApiVersion; IotClientCredentials* Credentials; int "
#~ "RetryTimeout; };"
#~ msgstr ""

#~ msgid ""
#~ "// Bad: Uses C-style typedef: typedef struct IotClient { char* ApiVersion; "
#~ "IotClientCredentials* Credentials; int RetryTimeout; } AzIotClient; {% "
#~ "endhighlight %}"
#~ msgstr ""

#~ msgid "Tooling"
#~ msgstr ""

#~ msgid ""
#~ "We use a common build and test pipeline to provide for automatic "
#~ "distribution of client libraries. To support this, we need common tooling."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-tooling-cmake\" %} use "
#~ "[CMake](https://CMake.org/) v3.7 for your project build system."
#~ msgstr ""

#~ msgid ""
#~ "Version 3.7 is the minimum version installed on the Azure Pipelines "
#~ "Microsoft hosted agents "
#~ "(https://docs.microsoft.com/azure/devops/pipelines/agents/hosted)"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-tooling-cmake-targets\" %} include the "
#~ "following standard targets:"
#~ msgstr ""

#~ msgid "`build` to build the library"
#~ msgstr ""

#~ msgid "`test` to run the unit test suite"
#~ msgstr ""

#~ msgid "`docs` to generate reference documentation"
#~ msgstr ""

#~ msgid "`all` to run all three targets"
#~ msgstr ""

#~ msgid ""
#~ "Include other targets as they appear useful during the development process."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-tooling-cmake-settings1\" %} use hidden"
#~ " visibility when building dynamic libraries. For CMake:"
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cmake %} set(CMAKE_C_VISIBILITY_PRESET hidden) "
#~ "set(CMAKE_VISIBILITY_INLINES_HIDDEN ON) {% endhighlight %}"
#~ msgstr ""

#~ msgid "This allows you to use an export macro to export symbols. For example:"
#~ msgstr ""

#~ msgid "{% highlight cpp %} #ifndef APPCONF_EXPORT_H #define APPCONF_EXPORT_H"
#~ msgstr ""

#~ msgid "#ifdef APPCONF_STATIC_DEFINE"
#~ msgstr ""

#~ msgid "define APPCONF_EXPORT"
#~ msgstr ""

#~ msgid "define APPCONF_NO_EXPORT"
#~ msgstr ""

#~ msgid "#else"
#~ msgstr ""

#~ msgid "ifndef APPCONF_EXPORT"
#~ msgstr ""

#~ msgid "ifdef appconf_EXPORTS"
#~ msgstr ""

#~ msgid "define APPCONF_EXPORT __declspec(dllexport)"
#~ msgstr ""

#~ msgid "else"
#~ msgstr ""

#~ msgid "define APPCONF_EXPORT __declspec(dllimport)"
#~ msgstr ""

#~ msgid "endif"
#~ msgstr ""

#~ msgid "ifndef APPCONF_NO_EXPORT"
#~ msgstr ""

#~ msgid "#endif"
#~ msgstr ""

#~ msgid "#ifndef APPCONF_DEPRECATED"
#~ msgstr ""

#~ msgid "define APPCONF_DEPRECATED __declspec(deprecated)"
#~ msgstr ""

#~ msgid "#ifndef APPCONF_DEPRECATED_EXPORT"
#~ msgstr ""

#~ msgid "define APPCONF_DEPRECATED_EXPORT APPCONF_EXPORT APPCONF_DEPRECATED"
#~ msgstr ""

#~ msgid "#ifndef APPCONF_DEPRECATED_NO_EXPORT"
#~ msgstr ""

#~ msgid ""
#~ "define APPCONF_DEPRECATED_NO_EXPORT APPCONF_NO_EXPORT APPCONF_DEPRECATED"
#~ msgstr ""

#~ msgid "#if 0 /* DEFINE_NO_DEPRECATED */"
#~ msgstr ""

#~ msgid "ifndef APPCONF_NO_DEPRECATED"
#~ msgstr ""

#~ msgid "define APPCONF_NO_DEPRECATED"
#~ msgstr ""

#~ msgid "#endif /* APPCONF_EXPORT_H */ {% endhighlight %}"
#~ msgstr ""

#~ msgid "CMake will automatically generate an appropriate export header:"
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cmake %} include(GenerateExportHeader) "
#~ "generate_export_header(speech EXPORT_FILE_NAME azure/speech_export.hpp) {% "
#~ "endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-tooling-cpp-format\" %} use [clang-"
#~ "format](https://clang.llvm.org/docs/ClangFormat.html) for formatting, with "
#~ "the following command-line options:"
#~ msgstr ""

#~ msgid ""
#~ "{% highlight bash %} cpp-format -style=file -i <file> ... {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "Using `-i` does an in-place edit of the files for style. There is [a Visual "
#~ "Studio "
#~ "extension](https://marketplace.visualstudio.com/items?itemName=LLVMExtensions.llvm-"
#~ "toolchain) that binds Ctrl-R Ctrl-F to this operation. Visual Studio 2019 "
#~ "includes this functionality by default."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-tooling-cmake-docs\" %} generate API "
#~ "documentation with `doxygen`. For example in CMake:"
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cmake %} find_package(Doxygen REQUIRED doxygen) "
#~ "set(DOXYGEN_GENERATE_HTML YES) set(DOXYGEN_GENERATE_XML YES) "
#~ "set(DOXYGEN_OPTIMIZE_OUTPUT_FOR_C YES) set(DOXYGEN_EXTRACT_PACKAGE YES) "
#~ "set(DOXYGEN_SIMPLE_STRUCTS YES) set(DOXYGEN_TYPEDEF_HIDES_STRUCT NO)"
#~ msgstr ""

#~ msgid ""
#~ "doxygen_add_docs(doxygen ${PROJECT_SOURCE_DIR}/inc ${PROJECT_SOURCE_DIR}/src"
#~ " ${PROJECT_SOURCE_DIR}/doc COMMENT \"generate docs\") {% endhighlight %}"
#~ msgstr ""

#~ msgid "Notice that:"
#~ msgstr ""

#~ msgid "We use `find_package()` to find doxygen"
#~ msgstr ""

#~ msgid ""
#~ "We use the `DOXYGEN_<PREF>` CMake variables instead of writing your own "
#~ "`doxyfile`."
#~ msgstr ""

#~ msgid ""
#~ "We set `OPTIMIZE_OUTPUT_FOR_C` in order to get more C appropriate output."
#~ msgstr ""

#~ msgid ""
#~ "We use `doxygen_add_docs` to add the target, this will generate a `doxyfile`"
#~ " for you."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-tooling-cmake-samples\" %} provide a "
#~ "CMake option of the form `<SDK_NAME>_BUILD_SAMPLES` that includes all "
#~ "samples in the build. For example:"
#~ msgstr ""

#~ msgid ""
#~ "{% highlight cmake %} if(AZURE_APPCONF_BUILD_SAMPLES) "
#~ "add_subdirectory(samples) endif() {% endhighlight %}"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUSTNOT id=\"cpp-tooling-cmake-no-samples-by-"
#~ "default\" %} install samples by default."
#~ msgstr ""

#~ msgid "Supported platforms"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-platform-min\" %} support the following"
#~ " platforms and associated compilers when implementing your client library."
#~ msgstr ""

#~ msgid "Windows"
#~ msgstr ""

#~ msgid "Operating System"
#~ msgstr ""

#~ msgid "Version"
#~ msgstr ""

#~ msgid "Architectures"
#~ msgstr ""

#~ msgid "Compiler Version"
#~ msgstr ""

#~ msgid "Notes"
#~ msgstr ""

#~ msgid "Windows Client"
#~ msgstr ""

#~ msgid "7 SP1+, 8.1"
#~ msgstr ""

#~ msgid "x64, x86"
#~ msgstr ""

#~ msgid "MSVC 14.16.x, MSVC 14.20x"
#~ msgstr ""

#~ msgid "Windows 10 Client"
#~ msgstr ""

#~ msgid "Version 1607+"
#~ msgstr ""

#~ msgid "x64, x86, ARM"
#~ msgstr ""

#~ msgid "Version 1909+"
#~ msgstr ""

#~ msgid "ARM64"
#~ msgstr ""

#~ msgid "MSVC 14.20x"
#~ msgstr ""

#~ msgid "Nano Server"
#~ msgstr ""

#~ msgid "Version 1803+"
#~ msgstr ""

#~ msgid "x64, ARM32"
#~ msgstr ""

#~ msgid "Windows Server"
#~ msgstr ""

#~ msgid "2012 R2+"
#~ msgstr ""

#~ msgid "Mac"
#~ msgstr ""

#~ msgid "macOS"
#~ msgstr ""

#~ msgid "10.13+"
#~ msgstr ""

#~ msgid "x64"
#~ msgstr ""

#~ msgid "XCode 9.4.1"
#~ msgstr ""

#~ msgid "Linux"
#~ msgstr ""

#~ msgid "Red Hat Enterprise Linux <br> CentOS <br> Oracle Linux"
#~ msgstr ""

#~ msgid "7+"
#~ msgstr ""

#~ msgid "gcc-4.8"
#~ msgstr ""

#~ msgid ""
#~ "[Red Hat "
#~ "lifecycle](https://access.redhat.com/support/policy/updates/errata/) <br> "
#~ "[CentOS lifecycle](https://wiki.centos.org/FAQ/General#head-"
#~ "fe8a0be91ee3e7dea812e8694491e1dde5b75e6d) <br> [Oracle Linux "
#~ "lifecycle](http://www.oracle.com/us/support/library/elsp-"
#~ "lifetime-069338.pdf)"
#~ msgstr ""

#~ msgid "Debian"
#~ msgstr ""

#~ msgid "9+"
#~ msgstr ""

#~ msgid "gcc-6.3"
#~ msgstr ""

#~ msgid "[Debian lifecycle](https://wiki.debian.org/DebianReleases)"
#~ msgstr ""

#~ msgid "Ubuntu"
#~ msgstr ""

#~ msgid "18.04, 16.04"
#~ msgstr ""

#~ msgid "gcc-7.3"
#~ msgstr ""

#~ msgid "[Ubuntu lifecycle](https://wiki.ubuntu.com/Releases)"
#~ msgstr ""

#~ msgid "Linux Mint"
#~ msgstr ""

#~ msgid "18+"
#~ msgstr ""

#~ msgid "[Linux Mint lifecycle](https://www.linuxmint.com/download_all.php)"
#~ msgstr ""

#~ msgid "openSUSE"
#~ msgstr ""

#~ msgid "15+"
#~ msgstr ""

#~ msgid "gcc-7.5"
#~ msgstr ""

#~ msgid "[OpenSUSE lifecycle](https://en.opensuse.org/Lifetime)"
#~ msgstr ""

#~ msgid "SUSE Enterprise Linux (SLES)"
#~ msgstr ""

#~ msgid "12 SP2+"
#~ msgstr ""

#~ msgid "[SUSE lifecycle](https://www.suse.com/lifecycle/)"
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/SHOULD id=\"cpp-platform\" %} support the following "
#~ "additional platforms and associated compilers when implementing your client "
#~ "library."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/SHOULDNOT id=\"cpp-cpp-extensions\" %} use compiler "
#~ "extensions. Examples of extensions to avoid include:"
#~ msgstr ""

#~ msgid ""
#~ "[MSVC compiler "
#~ "extensions](https://docs.microsoft.com/cpp/build/reference/microsoft-"
#~ "extensions-to-c-and-cpp)"
#~ msgstr ""

#~ msgid ""
#~ "[clang language "
#~ "extensions](https://clang.llvm.org/docs/LanguageExtensions.html)"
#~ msgstr ""

#~ msgid "[GNU C compiler extensions](https://gcc.gnu.org/extensions.html)"
#~ msgstr ""

#~ msgid ""
#~ "Use the appropriate options for each compiler to prevent the use of such "
#~ "extensions."
#~ msgstr ""

#~ msgid ""
#~ "{% include requirement/MUST id=\"cpp-cpp-options\" %} use compiler flags to "
#~ "identify warnings:"
#~ msgstr ""

#~ msgid "Compiler"
#~ msgstr ""

#~ msgid "Compiler Flags"
#~ msgstr ""

#~ msgid "gcc"
#~ msgstr ""

#~ msgid "`-Wall -Wextra`"
#~ msgstr ""

#~ msgid "cpp and XCode"
#~ msgstr ""

#~ msgid "MSVC"
#~ msgstr ""

#~ msgid "`/W4`"
#~ msgstr ""
