#
msgid ""
msgstr ""

#: docs/cpp/implementation.md:block 1 (header)
msgid ""
"title: \"C++ Guidelines: Implementation\"\n"
"keywords: guidelines cpp\n"
"permalink: cpp_implementation.html\n"
"folder: cpp\n"
"sidebar: general_sidebar"
msgstr ""

#: docs/cpp/implementation.md:block 2 (paragraph)
msgid ""
"{% include draft.html content=\"The C++ Language guidelines are in DRAFT "
"status\" %}"
msgstr ""

#: docs/cpp/implementation.md:block 3 (quote)
msgid "TODO: This section needs to be driven by code in the Core library."
msgstr ""

#: docs/cpp/implementation.md:block 4 (header)
msgid "API Implementation"
msgstr ""

#: docs/cpp/implementation.md:block 5 (paragraph)
msgid ""
"This section describes guidelines for implementing Azure SDK client "
"libraries. Please note that some of these guidelines are automatically "
"enforced by code generation tools."
msgstr ""

#: docs/cpp/implementation.md:block 6 (header)
msgid "Service Client"
msgstr ""

#: docs/cpp/implementation.md:block 7 (paragraph)
msgid ""
"When configuring your client library, particular care must be taken to "
"ensure that the consumer of your client library can properly configure the "
"connectivity to your Azure service both globally (along with other client "
"libraries the consumer is using) and specifically with your client library."
msgstr ""

#: docs/cpp/implementation.md:block 8 (quote)
msgid ""
"TODO: add a brief mention of the approach to implementing service clients."
msgstr ""

#: docs/cpp/implementation.md:block 9 (header)
msgid "Service Methods"
msgstr ""

#: docs/cpp/implementation.md:block 10 (quote)
msgid ""
"TODO: Briefly introduce that service methods are implemented via an "
"`HttpPipeline` instance. Mention that much of this is done for you using "
"code generation."
msgstr ""

#: docs/cpp/implementation.md:block 11 (header)
msgid "HttpPipeline"
msgstr ""

#: docs/cpp/implementation.md:block 12 (paragraph)
msgid ""
"The following example shows a typical way of using `HttpPipeline` to "
"implement a service call method. The `HttpPipeline` will handle common HTTP "
"requirements such as the user agent, logging, distributed tracing, retries, "
"and proxy configuration."
msgstr ""

#: docs/cpp/implementation.md:block 13 (quote)
msgid "TODO: Show an example of invoking the pipeline"
msgstr ""

#: docs/cpp/implementation.md:block 14 (header)
msgid "HttpPipelinePolicy/Custom Policies"
msgstr ""

#: docs/cpp/implementation.md:block 15 (paragraph)
msgid ""
"The HTTP pipeline includes a number of policies that all requests pass "
"through. Examples of policies include setting required headers, "
"authentication, generating a request ID, and implementing proxy "
"authentication. `HttpPipelinePolicy` is the base type of all policies "
"(plugins) of the `HttpPipeline`. This section describes guidelines for "
"designing custom policies."
msgstr ""

#: docs/cpp/implementation.md:block 16 (quote)
msgid "TODO: Show how to customize a pipeline"
msgstr ""

#: docs/cpp/implementation.md:block 17 (header)
msgid "Service Method Parameters"
msgstr ""

#: docs/cpp/implementation.md:block 19 (header)
msgid "Parameter Validation"
msgstr ""

#: docs/cpp/implementation.md:block 20 (paragraph)
msgid ""
"In addition to [general parameter validation "
"guidelines](introduction.md#cpp-parameters):"
msgstr ""

#: docs/cpp/implementation.md:block 21 (quote)
msgid "TODO: Briefly show common patterns for parameter validation"
msgstr ""

#: docs/cpp/implementation.md:block 22 (header)
msgid "Supporting Types"
msgstr ""

#: docs/cpp/implementation.md:block 24 (header)
msgid "Serialization {#cpp-usage-json}"
msgstr ""

#: docs/cpp/implementation.md:block 26 (header)
msgid "JSON Serialization"
msgstr ""

#: docs/cpp/implementation.md:block 28 (header)
msgid "Enumeration-like Structs"
msgstr ""

#: docs/cpp/implementation.md:block 29 (paragraph)
msgid ""
"As described in [general enumeration guidelines](introduction.md#cpp-enums),"
" you should use `enum` types whenever passing or deserializing a well-known "
"set of values to or from the service. There may be times, however, where a "
"`struct` is necessary to capture an extensible value from the service even "
"if well-known values are defined, or to pass back to the service those same "
"or other user-supplied values:"
msgstr ""

#: docs/cpp/implementation.md:block 30 (unordered list)
msgid ""
"The value is retrieved and deserialized from service, and may contain a "
"value not supported by the client library."
msgstr ""

#: docs/cpp/implementation.md:block 30 (unordered list)
msgid ""
"The value is roundtripped: the value is retrieved and deserialized from the "
"service, and may later be serialized and sent back to the server."
msgstr ""

#: docs/cpp/implementation.md:block 31 (quote)
msgid "TODO: Content in this section may need a new home."
msgstr ""

#: docs/cpp/implementation.md:block 32 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-naming-enum\" %} name `enum "
"class`es and enumerators using **PascalCase**."
msgstr ""

#: docs/cpp/implementation.md:block 33 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-naming-enum-class\" %} use `enum"
" class` for enumerations. For example:"
msgstr ""

#: docs/cpp/implementation.md:block 34 (paragraph)
msgid ""
"{% highlight cpp %} enum class PinState { Off, On }; {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 35 (header)
msgid "Using Azure Core Types"
msgstr ""

#: docs/cpp/implementation.md:block 36 (header)
msgid "Implementing Subtypes of Operation<T> {#cpp-implement-operation}"
msgstr ""

#: docs/cpp/implementation.md:block 37 (paragraph)
msgid ""
"Subtypes of `Operation<T>` are returned from service client methods invoking"
" long running operations."
msgstr ""

#: docs/cpp/implementation.md:block 38 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-lro-return\" %} check the value of "
"`IsDone` in subclass implementations of `PollInternal` and "
"`PollUntilDoneInternal` and immediately return the result of "
"`GetRawResponse` if it is true."
msgstr ""

#: docs/cpp/implementation.md:block 39 (quote)
msgid "TODO: Show an example implementation for Operation<T>."
msgstr ""

#: docs/cpp/implementation.md:block 40 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-lro-return\" %} throw from methods on "
"`Operation<T>` subclasses in the following scenarios."
msgstr ""

#: docs/cpp/implementation.md:block 41 (unordered list)
msgid ""
"If an underlying service operation call from `Poll` or `PollUntilDone` "
"throws, re-throw `RequestFailedException` or its subtype."
msgstr ""

#: docs/cpp/implementation.md:block 41 (unordered list)
msgid ""
"If the operation completes with a non-success result, throw "
"`RequestFailedException` or its subtype from `Poll` or `PollUntilDone`."
msgstr ""

#: docs/cpp/implementation.md:block 41 (unordered list)
msgid "Include any relevant error state information in the exception message."
msgstr ""

#: docs/cpp/implementation.md:block 42 (quote)
msgid "TODO: Show an example of how to handle errors."
msgstr ""

#: docs/cpp/implementation.md:block 43 (unordered list)
msgid ""
"If the `Value` property is evaluated after the operation failed (`HasValue` "
"is false and `IsDone` is true) throw the same exception as the one thrown "
"when the operation failed."
msgstr ""

#: docs/cpp/implementation.md:block 44 (quote)
msgid "TODO: Show an example of how to throw in this case."
msgstr ""

#: docs/cpp/implementation.md:block 45 (unordered list)
msgid ""
"If the `Value` property is evaluated before the operation is complete "
"(`IsDone` is false) throw `TODO: What to throw`."
msgstr ""

#: docs/cpp/implementation.md:block 45 (unordered list)
msgid "The exception message should be: \"The operation has not yet completed.\""
msgstr ""

#: docs/cpp/implementation.md:block 46 (quote)
msgid ""
"TODO: DO we want this behavior. TODO: Show an example of how to throw in "
"this case."
msgstr ""

#: docs/cpp/implementation.md:block 47 (header)
msgid "SDK Feature Implementation"
msgstr ""

#: docs/cpp/implementation.md:block 48 (header)
msgid "Configuration"
msgstr ""

#: docs/cpp/implementation.md:block 50 (header)
msgid "Logging"
msgstr ""

#: docs/cpp/implementation.md:block 51 (paragraph)
msgid ""
"Request logging will be done automatically by the `HttpPipeline`. If a "
"client library needs to add custom logging, follow the [same "
"guidelines](implementation.md#general-logging) and mechanisms as the "
"pipeline logging mechanism. If a client library wants to do custom logging, "
"the designer of the library must ensure that the logging mechanism is "
"pluggable in the same way as the `HttpPipeline` logging policy."
msgstr ""

#: docs/cpp/implementation.md:block 52 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-logging-follow-guidelines\" %} "
"follow [the logging section of the Azure SDK General "
"Guidelines](implementation.md#general-logging) if logging directly (as "
"opposed to through the `HttpPipeline`)."
msgstr ""

#: docs/cpp/implementation.md:block 53 (header)
msgid "C++ Logging specific details"
msgstr ""

#: docs/cpp/implementation.md:block 54 (quote)
msgid "TODO: This additional logging info may need a new home."
msgstr ""

#: docs/cpp/implementation.md:block 55 (paragraph)
msgid ""
"Client libraries must support robust logging mechanisms so that the consumer"
" can adequately diagnose issues with the method calls and quickly determine "
"whether the issue is in the consumer code, client library code, or service."
msgstr ""

#: docs/cpp/implementation.md:block 56 (paragraph)
msgid ""
"In general, our advice to consumers of these libraries is to establish "
"logging in their preferred manner at the `WARNING` level or above in "
"production to capture problems with the application, and this level should "
"be enough for customer support situations. Informational or verbose logging "
"can be enabled on a case-by-case basis to assist with issue resolution."
msgstr ""

#: docs/cpp/implementation.md:block 57 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-logging-use-azurecore\" %} use the "
"Azure Core library for logging."
msgstr ""

#: docs/cpp/implementation.md:block 58 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-logging-pluggable-logger\" %} support "
"pluggable log handlers."
msgstr ""

#: docs/cpp/implementation.md:block 59 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-logging-console-logger\" %} make it "
"easy for a consumer to enable logging output to the console. The specific "
"steps required to enable logging to the console must be documented."
msgstr ""

#: docs/cpp/implementation.md:block 60 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-logging-levels\" %} use one of the "
"following log levels when emitting logs: `Verbose` (details), "
"`Informational` (things happened), `Warning` (might be a problem or not), "
"and `Error`."
msgstr ""

#: docs/cpp/implementation.md:block 61 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-logging-failure\" %} use the `Error` "
"logging level for failures that the application is unlikely to recover from "
"(out of memory, etc.)."
msgstr ""

#: docs/cpp/implementation.md:block 62 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-logging-warning\" %} use the `Warning` "
"logging level when a function fails to perform its intended task. This "
"generally means that the function will raise an exception. Do not include "
"occurrences of self-healing events (for example, when a request will be "
"automatically retried)."
msgstr ""

#: docs/cpp/implementation.md:block 63 (paragraph)
msgid ""
"{% include requirement/MAY id=\"cpp-logging-slowlinks\" %} log the request "
"and response (see below) at the `Warning` when a request/response cycle (to "
"the start of the response body) exceeds a service-defined threshold. The "
"threshold should be chosen to minimize false-positives and identify service "
"issues."
msgstr ""

#: docs/cpp/implementation.md:block 64 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-logging-info\" %} use the "
"`Informational` logging level when a function operates normally."
msgstr ""

#: docs/cpp/implementation.md:block 65 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-logging-verbose\" %} use the `Verbose` "
"logging level for detailed troubleshooting scenarios. This is primarily "
"intended for developers or system administrators to diagnose specific "
"failures."
msgstr ""

#: docs/cpp/implementation.md:block 66 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-logging-no-sensitive-info\" %} only log"
" headers and query parameters that are in a service-provided \"allow-list\" "
"of approved headers and query parameters. All other headers and query "
"parameters must have their values redacted."
msgstr ""

#: docs/cpp/implementation.md:block 67 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-logging-requests\" %} log request line "
"and headers as an `Informational` message. The log should include the "
"following information:"
msgstr ""

#: docs/cpp/implementation.md:block 68 (unordered list)
msgid "The HTTP method."
msgstr ""

#: docs/cpp/implementation.md:block 68 (unordered list)
msgid "The URL."
msgstr ""

#: docs/cpp/implementation.md:block 68 (unordered list)
msgid "The query parameters (redacted if not in the allow-list)."
msgstr ""

#: docs/cpp/implementation.md:block 68 (unordered list)
msgid "The request headers (redacted if not in the allow-list)."
msgstr ""

#: docs/cpp/implementation.md:block 68 (unordered list)
msgid "An SDK provided request ID for correlation purposes."
msgstr ""

#: docs/cpp/implementation.md:block 68 (unordered list)
msgid "The number of times this request has been attempted."
msgstr ""

#: docs/cpp/implementation.md:block 69 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-logging-responses\" %} log response "
"line and headers as an `Informational` message. The format of the log should"
" be the following:"
msgstr ""

#: docs/cpp/implementation.md:block 70 (unordered list)
msgid "The SDK provided request ID (see above)."
msgstr ""

#: docs/cpp/implementation.md:block 70 (unordered list)
msgid "The status code."
msgstr ""

#: docs/cpp/implementation.md:block 70 (unordered list)
msgid "Any message provided with the status code."
msgstr ""

#: docs/cpp/implementation.md:block 70 (unordered list)
msgid "The response headers (redacted if not in the allow-list)."
msgstr ""

#: docs/cpp/implementation.md:block 70 (unordered list)
msgid ""
"The time period between the first attempt of the request and the first byte "
"of the body."
msgstr ""

#: docs/cpp/implementation.md:block 71 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-logging-cancellations\" %} log an "
"`Informational` message if a service call is cancelled. The log should "
"include:"
msgstr ""

#: docs/cpp/implementation.md:block 72 (unordered list)
msgid "The reason for the cancellation (if available)."
msgstr ""

#: docs/cpp/implementation.md:block 73 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-logging-exceptions\" %} log exceptions "
"thrown as a `Warning` level message. If the log level set to `Verbose`, "
"append stack trace information to the message."
msgstr ""

#: docs/cpp/implementation.md:block 74 (header)
msgid "Distributed Tracing {#cpp-distributedtracing}"
msgstr ""

#: docs/cpp/implementation.md:block 75 (paragraph)
msgid "{% include draft.html content=\"Guidance coming soon ...\" %}"
msgstr ""

#: docs/cpp/implementation.md:block 76 (quote)
msgid "TODO: Add guidance for distributed tracing implementation"
msgstr ""

#: docs/cpp/implementation.md:block 77 (header)
msgid "Telemetry"
msgstr ""

#: docs/cpp/implementation.md:block 78 (quote)
msgid "TODO: Add guidance regarding user agent strings"
msgstr ""

#: docs/cpp/implementation.md:block 79 (header)
msgid "Testing"
msgstr ""

#: docs/cpp/implementation.md:block 80 (paragraph)
msgid ""
"We believe testing is a part of the development process, so we expect unit "
"and integration tests to be a part of the source code. All components must "
"be covered by automated testing, and developers should strive to test corner"
" cases and main flows for every use case."
msgstr ""

#: docs/cpp/implementation.md:block 81 (paragraph)
msgid ""
"All code should contain, at least, requirements, unit tests, end-to-end "
"tests, and samples."
msgstr ""

#: docs/cpp/implementation.md:block 82 (paragraph)
msgid "Tests should be written using the [Google Test][] library."
msgstr ""

#: docs/cpp/implementation.md:block 83 (header)
msgid "Language-specific other"
msgstr ""

#: docs/cpp/implementation.md:block 84 (paragraph)
msgid ""
"Unlike many other programming languages, which have large runtimes, the C++ "
"standard runtime is limited in functionality and scope. The standard library"
" covers areas such as memory and string manipulation, standard input/output,"
" floating point and others. However, many of the features required for "
"modern applications and services; e.g. those required for networking and "
"advanced memory management are not part of the standard library. Instead, "
"many of those features are included in open source C++ libraries that are "
"also cross-platform with good support for Windows, OSX and most Linux "
"platforms. Because of that support and because Azure SDK implementations "
"will need such functionality, it is expected that client libraries will take"
" dependencies on these libraries. Ensure the version matches to allow for "
"compatibility when an application integrates multiple client libraries."
msgstr ""

#: docs/cpp/implementation.md:block 85 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-approved-dependencies\" %} utilize the "
"following libraries as needed for commonly required operations:"
msgstr ""

#: docs/cpp/implementation.md:block 86 (paragraph)
msgid "{% include_relative approved_dependencies.md %}"
msgstr ""

#: docs/cpp/implementation.md:block 87 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"cpp-test-implicit-assign\" %} use "
"implicit assignment inside a test. This is generally an accidental omission "
"of the second `=` of the logical compare. The following is confusing and "
"prone to error."
msgstr ""

#: docs/cpp/implementation.md:block 88 (paragraph)
msgid "{% highlight cpp %} if (a = b) { ... } {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 89 (paragraph)
msgid ""
"Does the programmer really mean assignment here? Sometimes yes, but usually "
"no. Instead use explicit tests and avoid assignment with an implicit test. "
"The recommended form is to do the assignment before doing the test:"
msgstr ""

#: docs/cpp/implementation.md:block 90 (paragraph)
msgid "{% highlight cpp %} a = b; if (a) { ... } {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 91 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"cpp-no-register\" %} use the register "
"keyword. Modern compilers will put variables in registers automatically."
msgstr ""

#: docs/cpp/implementation.md:block 92 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-be-const-correct\" %} be `const` "
"correct. C++ provides the `const` keyword to allow passing as parameters "
"objects that cannot change to indicate when a method doesn't modify its "
"object. Using `const` in all the right places is called \"const "
"correctness.\""
msgstr ""

#: docs/cpp/implementation.md:block 93 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-use-hashif\" %} use `#if` instead of "
"`#ifdef`. For example:"
msgstr ""

#: docs/cpp/implementation.md:block 94 (paragraph)
msgid ""
"{% highlight cpp %} // Bad example #ifdef DEBUG TemporaryDebuggerBreak(); "
"#endif {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 95 (paragraph)
msgid "Someone else might compile the code with turned-of debug info like:"
msgstr ""

#: docs/cpp/implementation.md:block 96 (paragraph)
msgid "{% highlight cpp %} cc -c lurker.cc -DDEBUG=0 {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 97 (paragraph)
msgid ""
"Alway use `#if` if you have to use the preprocessor. This works fine, and "
"does the right thing, even if `DEBUG` is not defined at all (!)"
msgstr ""

#: docs/cpp/implementation.md:block 98 (paragraph)
msgid ""
"{% highlight cpp %} // Good example #if DEBUG TemporaryDebuggerBreak(); "
"#endif {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 99 (paragraph)
msgid ""
"If you really need to test whether a symbol is defined or not, test it with "
"the `defined()` construct, which allows you to add more things later to the "
"conditional without editing text that's already in the program:"
msgstr ""

#: docs/cpp/implementation.md:block 100 (paragraph)
msgid ""
"{% highlight cpp %} #if !defined(USER_NAME) #define USER_NAME \"john smith\""
" #endif {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 101 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-large-comments\" %} Use `#if` to "
"comment out large code blocks."
msgstr ""

#: docs/cpp/implementation.md:block 102 (paragraph)
msgid ""
"Sometimes large blocks of code need to be commented out for testing. The "
"easiest way to do this is with an `#if 0` block:"
msgstr ""

#: docs/cpp/implementation.md:block 103 (paragraph)
msgid "{% highlight cpp %} void Example() { great looking code"
msgstr ""

#: docs/cpp/implementation.md:block 105 (paragraph)
msgid "} {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 106 (paragraph)
msgid ""
"You can't use `/**/` style comments because comments can't contain comments "
"and a large block of your code will probably contain connects."
msgstr ""

#: docs/cpp/implementation.md:block 107 (paragraph)
msgid "Do not use `#if 0` directly. Instead, use descriptive macro names:"
msgstr ""

#: docs/cpp/implementation.md:block 108 (paragraph)
msgid ""
"{% highlight cpp %} #if NOT_YET_IMPLEMENTED #if OBSOLETE #if TEMP_DISABLED "
"{% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 109 (paragraph)
msgid "Always add a short comment explaining why it is commented out."
msgstr ""

#: docs/cpp/implementation.md:block 110 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"cpp-\" %} put data definitions in header"
" files. For example, this should be avoided:"
msgstr ""

#: docs/cpp/implementation.md:block 111 (paragraph)
msgid "{% highlight cpp %} /* aheader.hpp */ int x = 0; {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 112 (paragraph)
msgid ""
"It's bad magic to have space consuming code silently inserted through the "
"innocent use of header files. It's not common practice to define variables "
"in the header file, so it will not occur to developers to look for this when"
" there are problems. Instead, define the variable once in a source file and "
"then use an `extern` statement to reference it in the header file."
msgstr ""

#: docs/cpp/implementation.md:block 113 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"cpp-no-magic-numbers\" %} use magic "
"numbers. A magic number is a bare naked number used in source code. It's "
"magic because no-one will know what it means after a while. This "
"significantly reduces maintainability. For example:"
msgstr ""

#: docs/cpp/implementation.md:block 114 (paragraph)
msgid ""
"{% highlight cpp %} // Don't write this. if (19 == foo) { RefundLotsMoney();"
" }} else { HappyDaysIKnowWhyIAmHere(); } {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 115 (paragraph)
msgid ""
"Instead of magic numbers, use a real name that means something. You can use "
"`constexpr` for names. For example:"
msgstr ""

#: docs/cpp/implementation.md:block 116 (paragraph)
msgid "{% highlight cpp %} constexpr int WE_GOOFED = 19;"
msgstr ""

#: docs/cpp/implementation.md:block 117 (paragraph)
msgid ""
"if (WE_GOOFED == foo) { RefundLotsMoney(); } else { "
"HappyDaysIKnowWhyIAmHere(); } {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 118 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-check-syscall-errors\" %} check every "
"system call for an error return, unless you know you wish to ignore errors. "
"For example, `printf` returns an error code but it is rarely relevant. Cast "
"the return to (void) if you do not care about the error code."
msgstr ""

#: docs/cpp/implementation.md:block 119 (paragraph)
msgid ""
"{% highlight cpp %} (void)printf(\"The return value is ignored\"); {% "
"endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 120 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-include-errorstr\" %} include the "
"system error text when reporting system error messages."
msgstr ""

#: docs/cpp/implementation.md:block 121 (header)
msgid "Complexity Management"
msgstr ""

#: docs/cpp/implementation.md:block 122 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"cpp-init-all-vars\" %} Initialize all "
"variables. Only leave them uninitialized if there is a real performance "
"reason to do so. Use static and dynamic analysis tools to check for "
"uninitialized access. You may leave \"result\" variables uninitialized so "
"long as they clearly do not escape from the innermost lexical scope."
msgstr ""

#: docs/cpp/implementation.md:block 123 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"cpp-function-size\" %} limit function "
"bodies to one page of code (40 lines, approximately)."
msgstr ""

#: docs/cpp/implementation.md:block 124 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-document-null-bodies\" %} document null"
" statements. Always document a null body for a `for` or `while` statement so"
" that it is clear the null body is intentional."
msgstr ""

#: docs/cpp/implementation.md:block 125 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-use-explicit-compares\" %} use explicit"
" comparisons when testing for failure. Use `if (FAIL != f())` rather than "
"`if (f())`, even though FAIL may have the value 0 which C considers to be "
"false. An explicit test will help you out later when somebody decides that a"
" failure return should be -1 instead of 0."
msgstr ""

#: docs/cpp/implementation.md:block 126 (paragraph)
msgid ""
"Explicit comparison should be used even if the comparison value will never "
"change. e.g. `if (!(bufsize % sizeof(int)))` should be written as `if (0 == "
"(bufsize % sizeof(int))` to reflect the numeric (not boolean) nature of the "
"test."
msgstr ""

#: docs/cpp/implementation.md:block 127 (paragraph)
msgid ""
"A frequent trouble spot is using `strcmp` to test for string equality. You "
"should **never** use a default action. The preferred approach is to use an "
"inline function:"
msgstr ""

#: docs/cpp/implementation.md:block 128 (paragraph)
msgid ""
"{% highlight cpp %} inline bool StringEqual(char *a, char *b) { return (0 =="
" strcmp(a, b)); } {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 129 (paragraph)
msgid ""
"~ Should {% include requirement/SHOULDNOT id=\"cpp-embedded-assign\" %} use "
"embedded assignments. There is a time and a place for embedded assignment "
"statements. In some constructs, there is no better way to accomplish the "
"results without making the code bulkier and less readable."
msgstr ""

#: docs/cpp/implementation.md:block 130 (paragraph)
msgid ""
"{% highlight cpp %} while (EOF != (c = getchar())) { /* process the "
"character */ } {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 131 (paragraph)
msgid ""
"However, one should consider the tradeoff between increased speed and "
"decreased maintainability that results when embedded assignments are used in"
" artificial places."
msgstr ""

#: docs/cpp/implementation.md:block 132 (header)
msgid "Templates"
msgstr ""

#: docs/cpp/implementation.md:block 133 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-naming-templates\" %} name "
"function templates and class templates the same as one would name non-"
"templates."
msgstr ""

#: docs/cpp/implementation.md:block 134 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-naming-templates-parameters\" %}"
" name template arguments with **PascalCase**."
msgstr ""

#: docs/cpp/implementation.md:block 135 (header)
msgid "Macros"
msgstr ""

#: docs/cpp/implementation.md:block 136 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"cpp-design-naming-macros-avoid\" %} avoid"
" use of macros. It is acceptable to use macros in the following situations. "
"Use outside of these situations should contact the Azure Review Board."
msgstr ""

#: docs/cpp/implementation.md:block 137 (unordered list)
msgid ""
"Platform, compiler, or other environment detection (for example, `_WIN32` or"
" `_MSC_VER`)."
msgstr ""

#: docs/cpp/implementation.md:block 137 (unordered list)
msgid "Emission or suppression of diagnostics."
msgstr ""

#: docs/cpp/implementation.md:block 137 (unordered list)
msgid "Emission or supression of debugging asserts."
msgstr ""

#: docs/cpp/implementation.md:block 137 (unordered list)
msgid ""
"Import declarations. (`__declspec(dllimport)`, `__declspec(dllexport)`)"
msgstr ""

#: docs/cpp/implementation.md:block 138 (quote)
msgid ""
"TODO: Need to involve Charlie in how we want to talk about import "
"declarations"
msgstr ""

#: docs/cpp/implementation.md:block 139 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-naming-macros-caps\" %} name "
"macros with **ALL_CAPITAL_SNAKE_CASE**."
msgstr ""

#: docs/cpp/implementation.md:block 140 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-naming-macros-form\" %} prepend "
"macro names with `AZ_<SERVICENAME>` to make macros unique."
msgstr ""

#: docs/cpp/implementation.md:block 141 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"cpp-design-naming-macros-functions\" %} "
"use macros where an inline function or function template would achieve the "
"same effect. Macros are not required for code efficiency."
msgstr ""

#: docs/cpp/implementation.md:block 142 (paragraph)
msgid "{% highlight cpp %} // Bad ##define MAX(a,b) ((a > b) ? a : b)"
msgstr ""

#: docs/cpp/implementation.md:block 143 (paragraph)
msgid ""
"// Good template<class T> [[nodiscard]] inline T Max(T x, T y) { return x > "
"y ? x : y; } {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 144 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"cpp-design-naming-macros-donoevil\" %} "
"change syntax via macro substitution. It [makes the program "
"unintelligible](https://gist.github.com/aras-p/6224951) to all but the "
"perpetrator."
msgstr ""

#: docs/cpp/implementation.md:block 145 (header)
msgid "Type Safety Recommendations"
msgstr ""

#: docs/cpp/implementation.md:block 146 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-logical-rule-of-zero\" %} In "
"class types, implement the \"rule of zero\", the \"rule of 3\", or the "
"\"rule of 5\". That is, of the special member functions, a type should "
"implement exactly one of the following:"
msgstr ""

#: docs/cpp/implementation.md:block 147 (unordered list)
msgid ""
"No copy constructor, no copy assignment operator, no move constructor, no "
"move assignment operator, or destructor."
msgstr ""

#: docs/cpp/implementation.md:block 147 (unordered list)
msgid ""
"A copy constructor, a copy assignment operator, no move constructor, no move"
" assignment operator, and a destructor."
msgstr ""

#: docs/cpp/implementation.md:block 147 (unordered list)
msgid ""
"A copy constructor, a copy assignment operator, a move constructor, a move "
"assignment operator, and a destructor."
msgstr ""

#: docs/cpp/implementation.md:block 148 (paragraph)
msgid ""
"This encourages use of resource managing types like std::unique_ptr (which "
"implements the rule of 5) as a compositional tool in more complex data "
"models that implement the rule of zero."
msgstr ""

#: docs/cpp/implementation.md:block 149 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-logical-initialize-all-data\" %}"
" provide types which are usable when default-initialized. (That is, every "
"constructor must initialize all type invariants, not assume members have "
"default values of 0 or similar.)"
msgstr ""

#: docs/cpp/implementation.md:block 150 (paragraph)
msgid ""
"{% highlight cpp %} class TypeWithInvariants { int m_member; public: "
"TypeWithInvariants() noexcept : member(0) {} // Good: initializes all parts "
"of the object [[nodiscard]] int Next() noexcept { return m_member++; } };"
msgstr ""

#: docs/cpp/implementation.md:block 151 (paragraph)
msgid ""
"class BadTypeWithInvariants { int m_member; public: BadTypeWithInvariants() "
"{} // Bad: Does not initialize all parts of the object int Next() { return "
"m_member++; } };"
msgstr ""

#: docs/cpp/implementation.md:block 152 (paragraph)
msgid ""
"void TheCustomerCode() { TypeWithInvariants a{}; // value-initializes a "
"TypeWithInvariants, OK TypeWithInvariants b; // default-initializes a "
"TypeWithInvariants, we want this to be OK BadTypeWithInvariants c{}; // "
"value-initializes a BadTypeWithInvariants, OK BadTypeWithInvariants d; // "
"default-initializes a BadTypeWithInvariants, this will trigger // undefined "
"behavior if anyone calls d.Next() } {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 153 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-logical-no-getters-or-setters\" "
"%} define getters and setters for data transfer objects. Expose the members "
"directly to users unless you need to enforce some constraints on the data. "
"For example: {% highlight cpp %} // Good - no restrictions on values struct "
"ExampleRequest { int RetryTimeoutMs; const char* Text; };"
msgstr ""

#: docs/cpp/implementation.md:block 154 (paragraph)
msgid ""
"// Bad - no restrictions on parameters and access is not idiomatic class "
"ExampleRequest { int m_retryTimeoutMs; const char* m_text; public: "
"[[nodiscard]] int GetRetryTimeoutMs() const noexcept { return "
"m_retryTimeoutMs; } void SetRetryTimeoutMs(int i) noexcept { "
"m_retryTimeoutMs = i; } [[nodiscard]] const char* GetText() const noexcept {"
" return m_text; } void SetText(const char* i) noexcept { m_text = i; } };"
msgstr ""

#: docs/cpp/implementation.md:block 155 (paragraph)
msgid ""
"// Good - type maintains invariants class TypeWhichEnforcesDataRequirements "
"{ size_t m_size; int* m_data; public: [[nodiscard]] size_t GetSize() const "
"noexcept { return m_size; } void AddData(int i) noexcept { m_data[m_size++] "
"= i; } };"
msgstr ""

#: docs/cpp/implementation.md:block 156 (paragraph)
msgid ""
"// Also Good class TypeWhichClamps { int m_retryTimeout; public: "
"[[nodiscard]] int GetRetryTimeout() const noexcept { return m_retryTimeout; "
"} void SetRetryTimeout(int i) noexcept { if (i < 0) i = 0; // clamp i to the"
" range [0, 1000] if (i > 1000) i = 1000; m_retryTimeout = i; } };"
msgstr ""

#: docs/cpp/implementation.md:block 157 (paragraph)
msgid "{% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 158 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-logical-optimize-position\" %} "
"declare variables in structures organized by use in a manner that minimizes "
"memory wastage because of compiler alignment issues and size. All things "
"being equal, use alphabetical ordering."
msgstr ""

#: docs/cpp/implementation.md:block 159 (paragraph)
msgid ""
"{% highlight cpp %} // Bad struct Foo { int A; // the compiler will insert 4"
" bytes of padding after A to align B char *B; int C; char *D; };"
msgstr ""

#: docs/cpp/implementation.md:block 160 (paragraph)
msgid ""
"// Good struct Foo { int A; // C is now stored in that padding int C; char "
"*B; char *D; }; {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 161 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"cpp-design-logical-enumsareinternal\" %}"
" use enums to model any data sent to the service. Use enums only for types "
"completely internal to the client library. For example, an enum to disable "
"Nagle's algorithm would be OK, but an enum to ask the service to create a "
"particular entity kind is not."
msgstr ""

#: docs/cpp/implementation.md:block 162 (header)
msgid "Const and Reference members"
msgstr ""

#: docs/cpp/implementation.md:block 163 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"cpp-design-logical-no-const-or-"
"reference-members\" %} declare types with const or reference members. Const "
"and reference members artificially make your types non-Regular as they "
"aren't assignable, and have surprising interactions with C++ Core language "
"rules. For example, many accesses to const or reference members would need "
"to involve use of `std::launder` to avoid undefined behavior, but "
"`std::launder` was added in C++17, a later version than the SDKs currently "
"target. See C++ Core Working Group [CWG1116 \"Aliasing of union "
"members\"](http://www.open-"
"std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1116), [CWG1776 \"Replacement "
"of class objects containing reference members\"](http://www.open-"
"std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1776), and [P0137R1 "
"\"Replacement of class objects containing reference "
"members\"](http://www.open-"
"std.org/jtc1/sc22/wg21/docs/papers/2016/p0137r1.html) for additional "
"details."
msgstr ""

#: docs/cpp/implementation.md:block 164 (paragraph)
msgid ""
"If you want a type to provide effectively const data except assignment, "
"declare all your member functions const. Const member functions only get a "
"const view of the class' data."
msgstr ""

#: docs/cpp/implementation.md:block 165 (paragraph)
msgid ""
"{% highlight cpp %} // Bad class RetrySettings { const int m_maxRetryCount; "
"public: int GetMaxRetryCount() { // intent: disallow m_maxRetryCount = "
"aDifferentValue; return m_maxRetryCount; } };"
msgstr ""

#: docs/cpp/implementation.md:block 166 (paragraph)
msgid ""
"// Good class RetrySettings { int m_maxRetryCount; public: int "
"GetMaxRetryCount() const { // still prohibits m_maxRetryCount = "
"aDifferentValue; without making RetrySettings un-assignable return "
"m_maxRetryCount; } }; {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 167 (header)
msgid "Integer sizes"
msgstr ""

#: docs/cpp/implementation.md:block 168 (paragraph)
msgid ""
"The following integer rules are listed in rough priority order. Integer size"
" selections are primarily driven by service future compatibility. For "
"example, just because today a service might have a 2 GiB file size limit "
"does not mean that it will have such a limit forever. We believe 64 bit "
"length limits will be sufficient for sizes an individual program works with "
"for the foreseeable future."
msgstr ""

#: docs/cpp/implementation.md:block 169 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-logical-integer-files\" %} "
"Represent file sizes with `int64_t`, even on 32 bit platforms."
msgstr ""

#: docs/cpp/implementation.md:block 170 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-logical-integer-memory-buffers\""
" %} Represent memory buffer sizes with `size_t` or `ptrdiff_t` as "
"appropriate for the environment. Between the two, choose the type likely to "
"need the fewest conversions in application. For example, we would prefer "
"signed `ptrdiff_t` in most cases because signed integers behave like "
"programmers expect more consistently, but the SDK will need to transact with"
" `malloc`, `std::vector`, and/or `std::string` which all speak unsigned "
"`size_t`."
msgstr ""

#: docs/cpp/implementation.md:block 171 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-logical-integer-service-values\""
" %} Represent any other integral quantity passed over the wire to a service "
"using `int64_t`, even if the service uses a 32 bit constant internally "
"today."
msgstr ""

#: docs/cpp/implementation.md:block 172 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"cpp-design-logical-integer-not-int\" %} "
"Use `int` under any circumstances, including `for` loop indexes. Those "
"should usually use `ptrdiff_t` or `size_t` under the buffer size rule above."
msgstr ""

#: docs/cpp/implementation.md:block 173 (paragraph)
msgid ""
"{% include requirement/MAY id=\"cpp-design-logical-integer-otherwise\" %} "
"Use any integer type in the `intN_t` or `uintN_t` family as appropriate for "
"quantities not enumerated above, such as calculated values internal to the "
"SDK such as retry counts."
msgstr ""

#: docs/cpp/implementation.md:block 174 (header)
msgid "Secure functions"
msgstr ""

#: docs/cpp/implementation.md:block 175 (paragraph)
msgid ""
"{% include requirement/SHOULDNOT id=\"cpp-design-logical-no-ms-secure-"
"functions\" %} use [Microsoft security enhanced versions of CRT "
"functions](https://docs.microsoft.com/cpp/c-runtime-library/security-"
"enhanced-versions-of-crt-functions) to implement APIs that need to be "
"portable across many platforms. Such code is not portable and is not "
"compatible with either the C or C++ Standards. See [arguments "
"against](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1967.htm)."
msgstr ""

#: docs/cpp/implementation.md:block 176 (quote)
msgid "TODO: Verify with the security team, and what are the alternatives?"
msgstr ""

#: docs/cpp/implementation.md:block 177 (header)
msgid "Enumerations"
msgstr ""

#: docs/cpp/implementation.md:block 178 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-logical-client-enumerations-no-"
"enums\" %} use `enum` or `enum class` for values shared \"over the wire\" "
"with a service, to support future compatibility with the service where "
"additional values are added. Such values should be persisted as strings in "
"client data structures instead."
msgstr ""

#: docs/cpp/implementation.md:block 179 (paragraph)
msgid ""
"{% include requirement/MAY id=\"cpp-design-logical-client-enumerations-"
"enumish-pattern\" %} provide an 'extensible enum' pattern for storing "
"service enumerations which provides reasonable constant values. This pattern"
" stores the value as a string but provides public static member fields with "
"the individual values for customer consumption. For example:"
msgstr ""

#: docs/cpp/implementation.md:block 180 (paragraph)
msgid ""
"{% highlight cpp %} #include <azure/core/strings.hpp> // for "
"Azure::Core::Strings::LocaleInvariantCaseInsensitiveEqual #include <utility>"
" // for std::move namespace Azure { namespace Group { namespace Service {"
msgstr ""

#: docs/cpp/implementation.md:block 181 (paragraph)
msgid ""
"// an \"Extensible Enum\" type class KeyType { std::string m_value; public: "
"// Provide `explicit` conversion from string or types convertible to string:"
" explicit KeyType(const std::string& value) : m_value(value) { } explicit "
"KeyType(std::string&& value) : m_value(std::move(value)) { } explicit "
"KeyType(const char* value) : m_value(value) { }"
msgstr ""

#: docs/cpp/implementation.md:block 183 (paragraph)
msgid "}; }}} // namespace Azure::Group::Service"
msgstr ""

#: docs/cpp/implementation.md:block 184 (paragraph)
msgid ""
"// in a .cpp file: namespace Azure { namespace Group { namespace Service { "
"const KeyType KeyType::Ec{\"EC\"}; const KeyType KeyType::EcHsm{\"EC-HSM\"};"
" const KeyType KeyType::Rsa{\"RSA\"}; const KeyType KeyType::RsaHsm{\"RSA-"
"HSM\"}; const KeyType KeyType::Oct{\"OCT\"}; }}} // namespace "
"Azure::Group::Service {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 185 (header)
msgid "Physical Design"
msgstr ""

#: docs/cpp/implementation.md:block 186 (quote)
msgid ""
"TODO: Move this to implementation or move the headers discussion from "
"implementation here"
msgstr ""

#: docs/cpp/implementation.md:block 187 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"cpp-design-physical-include-quotes\" %} "
"include files using quotes (\") for files within the same git repository, "
"and angle brackets (<>) for external dependencies."
msgstr ""

#: docs/cpp/implementation.md:block 188 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"cpp-design-physical-unnamed-namespace\" "
"%} declare all types that are only used within the same `.cpp` file in an "
"unnamed namespace. For example:"
msgstr ""

#: docs/cpp/implementation.md:block 189 (paragraph)
msgid ""
"{% highlight cpp %} namespace { struct HashComputation { int "
"InternalBookkeeping; }; } // unnamed namespace {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 190 (header)
msgid "Class Types (including `union`s and `struct`s)"
msgstr ""

#: docs/cpp/implementation.md:block 191 (paragraph)
msgid ""
"Throughout this section, *class types* includes types with *class-key* "
"`struct` or *class-key* `union`, consistent with the [C++ "
"Standard](http://eel.is/c++draft/class#pre-4)."
msgstr ""

#: docs/cpp/implementation.md:block 192 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-naming-classes\" %} name class "
"types with **PascalCase**."
msgstr ""

#: docs/cpp/implementation.md:block 193 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-naming-classes-public-protected-"
"variables\" %} name `public` and `protected` member variables with "
"**PascalCase**."
msgstr ""

#: docs/cpp/implementation.md:block 194 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-naming-classes-public-"
"variables\" %} name `private` member variables with an `m_` prefix, followed"
" by a **camelCase** name. For example, `m_timeoutMs`."
msgstr ""

#: docs/cpp/implementation.md:block 195 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-design-naming-classes-functions\" %} "
"name member functions with **PascalCase**, except where the C++ Standard "
"forbids this. For example, `UploadBlob`, or `operator[]`."
msgstr ""

#: docs/cpp/implementation.md:block 196 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"cpp-design-naming-classes-no-struct-"
"keyword\" %} declare classes with only public members using *class-key* "
"`struct`. {% highlight cpp %} // Good struct OnlyPublicMembers { int Member;"
" };"
msgstr ""

#: docs/cpp/implementation.md:block 197 (paragraph)
msgid ""
"// Bad class OnlyPublicMembers { public: int Member; }; {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 198 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"cpp-design-naming-classes-typedefs\" %} "
"define class types without using `typedef`s. For example:"
msgstr ""

#: docs/cpp/implementation.md:block 199 (paragraph)
msgid ""
"{% highlight cpp %} // Good: Uses C++ style class declaration: struct "
"IotClient { char* ApiVersion; IotClientCredentials* Credentials; int "
"RetryTimeout; };"
msgstr ""

#: docs/cpp/implementation.md:block 200 (paragraph)
msgid ""
"// Bad: Uses C-style typedef: typedef struct IotClient { char* ApiVersion; "
"IotClientCredentials* Credentials; int RetryTimeout; } AzIotClient; {% "
"endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 201 (header)
msgid "Tooling"
msgstr ""

#: docs/cpp/implementation.md:block 202 (paragraph)
msgid ""
"We use a common build and test pipeline to provide for automatic "
"distribution of client libraries. To support this, we need common tooling."
msgstr ""

#: docs/cpp/implementation.md:block 203 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-tooling-cmake\" %} use "
"[CMake](https://CMake.org/) v3.7 for your project build system."
msgstr ""

#: docs/cpp/implementation.md:block 204 (paragraph)
msgid ""
"Version 3.7 is the minimum version installed on the Azure Pipelines "
"Microsoft hosted agents "
"(https://docs.microsoft.com/azure/devops/pipelines/agents/hosted)"
msgstr ""

#: docs/cpp/implementation.md:block 205 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-tooling-cmake-targets\" %} include the "
"following standard targets:"
msgstr ""

#: docs/cpp/implementation.md:block 206 (unordered list)
msgid "`build` to build the library"
msgstr ""

#: docs/cpp/implementation.md:block 206 (unordered list)
msgid "`test` to run the unit test suite"
msgstr ""

#: docs/cpp/implementation.md:block 206 (unordered list)
msgid "`docs` to generate reference documentation"
msgstr ""

#: docs/cpp/implementation.md:block 206 (unordered list)
msgid "`all` to run all three targets"
msgstr ""

#: docs/cpp/implementation.md:block 207 (paragraph)
msgid ""
"Include other targets as they appear useful during the development process."
msgstr ""

#: docs/cpp/implementation.md:block 208 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-tooling-cmake-settings1\" %} use hidden"
" visibility when building dynamic libraries. For CMake:"
msgstr ""

#: docs/cpp/implementation.md:block 209 (paragraph)
msgid ""
"{% highlight cmake %} set(CMAKE_C_VISIBILITY_PRESET hidden) "
"set(CMAKE_VISIBILITY_INLINES_HIDDEN ON) {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 210 (paragraph)
msgid "This allows you to use an export macro to export symbols. For example:"
msgstr ""

#: docs/cpp/implementation.md:block 211 (paragraph)
msgid "{% highlight cpp %} #ifndef APPCONF_EXPORT_H #define APPCONF_EXPORT_H"
msgstr ""

#: docs/cpp/implementation.md:block 212 (paragraph)
msgid "#ifdef APPCONF_STATIC_DEFINE"
msgstr ""

#: docs/cpp/implementation.md:block 213 (header)
msgid "define APPCONF_EXPORT"
msgstr ""

#: docs/cpp/implementation.md:block 214 (header)
msgid "define APPCONF_NO_EXPORT"
msgstr ""

#: docs/cpp/implementation.md:block 215 (paragraph)
msgid "#else"
msgstr ""

#: docs/cpp/implementation.md:block 216 (header)
msgid "ifndef APPCONF_EXPORT"
msgstr ""

#: docs/cpp/implementation.md:block 217 (header)
msgid "ifdef appconf_EXPORTS"
msgstr ""

#: docs/cpp/implementation.md:block 219 (header)
msgid "define APPCONF_EXPORT __declspec(dllexport)"
msgstr ""

#: docs/cpp/implementation.md:block 220 (header)
msgid "else"
msgstr ""

#: docs/cpp/implementation.md:block 222 (header)
msgid "define APPCONF_EXPORT __declspec(dllimport)"
msgstr ""

#: docs/cpp/implementation.md:block 223 (header)
msgid "endif"
msgstr ""

#: docs/cpp/implementation.md:block 225 (header)
msgid "ifndef APPCONF_NO_EXPORT"
msgstr ""

#: docs/cpp/implementation.md:block 228 (paragraph)
msgid "#endif"
msgstr ""

#: docs/cpp/implementation.md:block 229 (paragraph)
msgid "#ifndef APPCONF_DEPRECATED"
msgstr ""

#: docs/cpp/implementation.md:block 230 (header)
msgid "define APPCONF_DEPRECATED __declspec(deprecated)"
msgstr ""

#: docs/cpp/implementation.md:block 232 (paragraph)
msgid "#ifndef APPCONF_DEPRECATED_EXPORT"
msgstr ""

#: docs/cpp/implementation.md:block 233 (header)
msgid "define APPCONF_DEPRECATED_EXPORT APPCONF_EXPORT APPCONF_DEPRECATED"
msgstr ""

#: docs/cpp/implementation.md:block 235 (paragraph)
msgid "#ifndef APPCONF_DEPRECATED_NO_EXPORT"
msgstr ""

#: docs/cpp/implementation.md:block 236 (header)
msgid ""
"define APPCONF_DEPRECATED_NO_EXPORT APPCONF_NO_EXPORT APPCONF_DEPRECATED"
msgstr ""

#: docs/cpp/implementation.md:block 238 (paragraph)
msgid "#if 0 /* DEFINE_NO_DEPRECATED */"
msgstr ""

#: docs/cpp/implementation.md:block 239 (header)
msgid "ifndef APPCONF_NO_DEPRECATED"
msgstr ""

#: docs/cpp/implementation.md:block 240 (header)
msgid "define APPCONF_NO_DEPRECATED"
msgstr ""

#: docs/cpp/implementation.md:block 243 (paragraph)
msgid "#endif /* APPCONF_EXPORT_H */ {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 244 (paragraph)
msgid "CMake will automatically generate an appropriate export header:"
msgstr ""

#: docs/cpp/implementation.md:block 245 (paragraph)
msgid ""
"{% highlight cmake %} include(GenerateExportHeader) "
"generate_export_header(speech EXPORT_FILE_NAME azure/speech_export.hpp) {% "
"endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 246 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-tooling-cpp-format\" %} use [clang-"
"format](https://clang.llvm.org/docs/ClangFormat.html) for formatting, with "
"the following command-line options:"
msgstr ""

#: docs/cpp/implementation.md:block 247 (paragraph)
msgid ""
"{% highlight bash %} cpp-format -style=file -i <file> ... {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 248 (paragraph)
msgid ""
"Using `-i` does an in-place edit of the files for style. There is [a Visual "
"Studio "
"extension](https://marketplace.visualstudio.com/items?itemName=LLVMExtensions.llvm-"
"toolchain) that binds Ctrl-R Ctrl-F to this operation. Visual Studio 2019 "
"includes this functionality by default."
msgstr ""

#: docs/cpp/implementation.md:block 249 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-tooling-cmake-docs\" %} generate API "
"documentation with `doxygen`. For example in CMake:"
msgstr ""

#: docs/cpp/implementation.md:block 250 (paragraph)
msgid ""
"{% highlight cmake %} find_package(Doxygen REQUIRED doxygen) "
"set(DOXYGEN_GENERATE_HTML YES) set(DOXYGEN_GENERATE_XML YES) "
"set(DOXYGEN_OPTIMIZE_OUTPUT_FOR_C YES) set(DOXYGEN_EXTRACT_PACKAGE YES) "
"set(DOXYGEN_SIMPLE_STRUCTS YES) set(DOXYGEN_TYPEDEF_HIDES_STRUCT NO)"
msgstr ""

#: docs/cpp/implementation.md:block 251 (paragraph)
msgid ""
"doxygen_add_docs(doxygen ${PROJECT_SOURCE_DIR}/inc ${PROJECT_SOURCE_DIR}/src"
" ${PROJECT_SOURCE_DIR}/doc COMMENT \"generate docs\") {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 252 (paragraph)
msgid "Notice that:"
msgstr ""

#: docs/cpp/implementation.md:block 253 (unordered list)
msgid "We use `find_package()` to find doxygen"
msgstr ""

#: docs/cpp/implementation.md:block 253 (unordered list)
msgid ""
"We use the `DOXYGEN_<PREF>` CMake variables instead of writing your own "
"`doxyfile`."
msgstr ""

#: docs/cpp/implementation.md:block 253 (unordered list)
msgid ""
"We set `OPTIMIZE_OUTPUT_FOR_C` in order to get more C appropriate output."
msgstr ""

#: docs/cpp/implementation.md:block 253 (unordered list)
msgid ""
"We use `doxygen_add_docs` to add the target, this will generate a `doxyfile`"
" for you."
msgstr ""

#: docs/cpp/implementation.md:block 254 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-tooling-cmake-samples\" %} provide a "
"CMake option of the form `<SDK_NAME>_BUILD_SAMPLES` that includes all "
"samples in the build. For example:"
msgstr ""

#: docs/cpp/implementation.md:block 255 (paragraph)
msgid ""
"{% highlight cmake %} if(AZURE_APPCONF_BUILD_SAMPLES) "
"add_subdirectory(samples) endif() {% endhighlight %}"
msgstr ""

#: docs/cpp/implementation.md:block 256 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"cpp-tooling-cmake-no-samples-by-"
"default\" %} install samples by default."
msgstr ""

#: docs/cpp/implementation.md:block 257 (header)
msgid "Supported platforms"
msgstr ""

#: docs/cpp/implementation.md:block 258 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-platform-min\" %} support the following"
" platforms and associated compilers when implementing your client library."
msgstr ""

#: docs/cpp/implementation.md:block 259 (header)
msgid "Windows"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "Operating System"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "Version"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "Architectures"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "Compiler Version"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "Notes"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "Windows Client"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "7 SP1+, 8.1"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "x64, x86"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "MSVC 14.16.x, MSVC 14.20x"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "Windows 10 Client"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "Version 1607+"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "x64, x86, ARM"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "Version 1909+"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "ARM64"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "MSVC 14.20x"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "Nano Server"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "Version 1803+"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "x64, ARM32"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "Windows Server"
msgstr ""

#: docs/cpp/implementation.md:block 260 (table)
msgid "2012 R2+"
msgstr ""

#: docs/cpp/implementation.md:block 261 (header)
msgid "Mac"
msgstr ""

#: docs/cpp/implementation.md:block 262 (table)
msgid "macOS"
msgstr ""

#: docs/cpp/implementation.md:block 262 (table)
msgid "10.13+"
msgstr ""

#: docs/cpp/implementation.md:block 262 (table)
msgid "x64"
msgstr ""

#: docs/cpp/implementation.md:block 262 (table)
msgid "XCode 9.4.1"
msgstr ""

#: docs/cpp/implementation.md:block 263 (header)
msgid "Linux"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "Red Hat Enterprise Linux <br> CentOS <br> Oracle Linux"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "7+"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "gcc-4.8"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid ""
"[Red Hat "
"lifecycle](https://access.redhat.com/support/policy/updates/errata/) <br> "
"[CentOS lifecycle](https://wiki.centos.org/FAQ/General#head-"
"fe8a0be91ee3e7dea812e8694491e1dde5b75e6d) <br> [Oracle Linux "
"lifecycle](http://www.oracle.com/us/support/library/elsp-"
"lifetime-069338.pdf)"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "Debian"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "9+"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "gcc-6.3"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "[Debian lifecycle](https://wiki.debian.org/DebianReleases)"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "Ubuntu"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "18.04, 16.04"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "gcc-7.3"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "[Ubuntu lifecycle](https://wiki.ubuntu.com/Releases)"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "Linux Mint"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "18+"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "[Linux Mint lifecycle](https://www.linuxmint.com/download_all.php)"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "openSUSE"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "15+"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "gcc-7.5"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "[OpenSUSE lifecycle](https://en.opensuse.org/Lifetime)"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "SUSE Enterprise Linux (SLES)"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "12 SP2+"
msgstr ""

#: docs/cpp/implementation.md:block 264 (table)
msgid "[SUSE lifecycle](https://www.suse.com/lifecycle/)"
msgstr ""

#: docs/cpp/implementation.md:block 265 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"cpp-platform\" %} support the following "
"additional platforms and associated compilers when implementing your client "
"library."
msgstr ""

#: docs/cpp/implementation.md:block 266 (paragraph)
msgid ""
"{% include requirement/SHOULDNOT id=\"cpp-cpp-extensions\" %} use compiler "
"extensions. Examples of extensions to avoid include:"
msgstr ""

#: docs/cpp/implementation.md:block 267 (unordered list)
msgid ""
"[MSVC compiler "
"extensions](https://docs.microsoft.com/cpp/build/reference/microsoft-"
"extensions-to-c-and-cpp)"
msgstr ""

#: docs/cpp/implementation.md:block 267 (unordered list)
msgid ""
"[clang language "
"extensions](https://clang.llvm.org/docs/LanguageExtensions.html)"
msgstr ""

#: docs/cpp/implementation.md:block 267 (unordered list)
msgid "[GNU C compiler extensions](https://gcc.gnu.org/extensions.html)"
msgstr ""

#: docs/cpp/implementation.md:block 268 (paragraph)
msgid ""
"Use the appropriate options for each compiler to prevent the use of such "
"extensions."
msgstr ""

#: docs/cpp/implementation.md:block 269 (paragraph)
msgid ""
"{% include requirement/MUST id=\"cpp-cpp-options\" %} use compiler flags to "
"identify warnings:"
msgstr ""

#: docs/cpp/implementation.md:block 270 (table)
msgid "Compiler"
msgstr ""

#: docs/cpp/implementation.md:block 270 (table)
msgid "Compiler Flags"
msgstr ""

#: docs/cpp/implementation.md:block 270 (table)
msgid "gcc"
msgstr ""

#: docs/cpp/implementation.md:block 270 (table)
msgid "`-Wall -Wextra`"
msgstr ""

#: docs/cpp/implementation.md:block 270 (table)
msgid "cpp and XCode"
msgstr ""

#: docs/cpp/implementation.md:block 270 (table)
msgid "MSVC"
msgstr ""

#: docs/cpp/implementation.md:block 270 (table)
msgid "`/W4`"
msgstr ""
