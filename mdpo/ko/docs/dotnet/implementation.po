#
msgid ""
msgstr ""

#: docs/dotnet/implementation.md:block 1 (header)
msgid ""
"title: \"C#.NET Guidelines: Implementation\"\n"
"keywords: guidelines dotnet\n"
"permalink: dotnet_implementation.html\n"
"folder: dotnet\n"
"sidebar: general_sidebar"
msgstr ""

#: docs/dotnet/implementation.md:block 2 (header)
msgid "API Implementation"
msgstr ""

#: docs/dotnet/implementation.md:block 3 (paragraph)
msgid ""
"This section describes guidelines for implementing Azure SDK client "
"libraries. Please note that some of these guidelines are automatically "
"enforced by code generation tools."
msgstr ""

#: docs/dotnet/implementation.md:block 4 (header)
msgid "The Service Client"
msgstr ""

#: docs/dotnet/implementation.md:block 5 (paragraph)
msgid ""
"TODO: add a brief mention of the approach to implementing service clients."
msgstr ""

#: docs/dotnet/implementation.md:block 6 (header)
msgid "Service Methods"
msgstr ""

#: docs/dotnet/implementation.md:block 7 (paragraph)
msgid ""
"TODO: Briefly introduce that service methods are implemented via an "
"`HttpPipeline` instance. Mention that much of this is done for you using "
"code generation."
msgstr ""

#: docs/dotnet/implementation.md:block 8 (header)
msgid "Using HttpPipeline {#dotnet-usage-httppipeline}"
msgstr ""

#: docs/dotnet/implementation.md:block 9 (paragraph)
msgid ""
"The following example shows a typical way of using `HttpPipeline` to "
"implement a service call method. The `HttpPipeline` will handle common HTTP "
"requirements such as the user agent, logging, distributed tracing, retries, "
"and proxy configuration."
msgstr ""

#: docs/dotnet/implementation.md:block 11 (paragraph)
msgid ""
"TODO: do we still want this code sample now that we're encouraging moving to"
" Code Gen?"
msgstr ""

#: docs/dotnet/implementation.md:block 12 (paragraph)
msgid ""
"For a more complete example, see the [configuration "
"client](https://github.com/Azure/azure-sdk-for-"
"net/blob/main/sdk/appconfiguration/Azure.Data.AppConfiguration/src/ConfigurationClient.cs)"
" implementation."
msgstr ""

#: docs/dotnet/implementation.md:block 13 (header)
msgid "Using HttpPipelinePolicy"
msgstr ""

#: docs/dotnet/implementation.md:block 14 (paragraph)
msgid ""
"The HTTP pipeline includes a number of policies that all requests pass "
"through. Examples of policies include setting required headers, "
"authentication, generating a request ID, and implementing proxy "
"authentication. `HttpPipelinePolicy` is the base type of all policies "
"(plugins) of the `HttpPipeline`. This section describes guidelines for "
"designing custom policies."
msgstr ""

#: docs/dotnet/implementation.md:block 15 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-http-pipeline-policy-inherit\" %} "
"inherit from `HttpPipelinePolicy` if the policy implementation calls "
"asynchronous APIs."
msgstr ""

#: docs/dotnet/implementation.md:block 16 (paragraph)
msgid ""
"See an example [here](https://github.com/Azure/azure-sdk-for-"
"net/blob/main/sdk/core/Azure.Core/src/Pipeline/BearerTokenAuthenticationPolicy.cs)."
msgstr ""

#: docs/dotnet/implementation.md:block 17 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-sync-http-pipeline-policy-inherit\" "
"%} inherit from `HttpPipelineSynchronousPolicy` if the policy implementation"
" calls only synchronous APIs."
msgstr ""

#: docs/dotnet/implementation.md:block 18 (paragraph)
msgid ""
"See an example [here](https://github.com/Azure/azure-sdk-for-"
"net/blob/main/sdk/core/Azure.Core/src/Pipeline/Internal/ClientRequestIdPolicy.cs)."
msgstr ""

#: docs/dotnet/implementation.md:block 19 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-http-pipeline-thread-safety\" %} "
"ensure `ProcessAsync` and `Process` methods are thread safe."
msgstr ""

#: docs/dotnet/implementation.md:block 20 (paragraph)
msgid "`HttpMessage`, `Request`, and `Response` don't have to be thread-safe."
msgstr ""

#: docs/dotnet/implementation.md:block 21 (header)
msgid "Service Method Parameters"
msgstr ""

#: docs/dotnet/implementation.md:block 22 (header)
msgid "Parameter presence and ordering"
msgstr ""

#: docs/dotnet/implementation.md:block 23 (paragraph)
msgid ""
"Public service methods should follow the below parameter presence and "
"ordering guidelines."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"LRO Qualifier: This indicates if the user wants to wait for the LRO to "
"simply start or wait for completion."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"If present this {% include requirement/MUST id=\"dotnet-parameter-lro-"
"qualifier-type\" %} be the type defined in `Azure.Core` "
"[here](https://github.com/Azure/azure-sdk-for-"
"net/blob/main/sdk/core/Azure.Core/src/WaitUntil.cs)."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"If present this {% include requirement/MUST id=\"dotnet-parameter-lro-"
"qualifier-required\" %} be a required parameter."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"If present this {% include requirement/MUST id=\"dotnet-parameter-lro-"
"qualifier-required\" %} be the first parameter."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"For LRO this {% include requirement/SHOULD id=\"dotnet-parameter-lro-"
"qualifier-presence\" %} be the present."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"Required Path: These are parameters that will go in the path of the URI."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"These {% include requirement/MUST id=\"dotnet-parameter-path-ordering\" %} "
"be sorted based on their order in the URI so they match."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"Sometimes these {% include requirement/MAY id=\"dotnet-parameter-path-omit\""
" %} be omitted as public method parameters when the context is known by the "
"enclosing class such as [ResourceGroup.Get](https://github.com/Azure/azure-"
"sdk-for-"
"net/blob/main/sdk/resourcemanager/Azure.ResourceManager/src/Resources/Generated/ResourceGroupResource.cs#L127)"
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"Required Query / Header: These are simple options that can be set as headers"
" or query params in the request. Typically primitive types or collections "
"that can be transformed into delimited strings."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"Any required query or header parameters {% include requirement/MUST "
"id=\"dotnet-parameter-query-header-order\" %} come before the body parameter"
" since the body parameter can be optional."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"Body: This is typically found in PUT or POST methods and is object passed as"
" the content of the HTTP request."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"For PUT this {% include requirement/MUST id=\"dotnet-parameter-body-"
"required-for-put\" %} be a required parameter."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid "ContentType: Defines the content type."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"If present this {% include requirement/MUST id=\"dotnet-parameter-content-"
"type-type\" %} be the type defined in `Azure.Core` "
"[here](https://github.com/Azure/azure-sdk-for-"
"net/blob/main/sdk/core/Azure.Core/src/ContentType.cs)."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"If present this {% include requirement/MUST id=\"dotnet-parameter-content-"
"type-optional\" %} be an optional parameter."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"Optional Query / Header: These are simple options that can be set as headers"
" or query params in the request. Typically primitive types or lists that can"
" be transformed into delimited strings."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"{% include requirement/SHOULD id=\"dotnet-parameter-query-header-property-"
"bag\" %} combine these into a property bag when there are more than 2 total "
"including the required ones in item 3 of this list."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"The property bag {% include requirement/MUST id=\"dotnet-parameter-query-"
"header-property-bag-required\" %} be required if it includes required query "
"or header parameters from item 3 of this list. In this case the property bag"
" will replace the parameter at position 3 and position 5 will no longer be "
"present."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"If a method grew exceeded the threshold over time then an overload with the "
"property bag {% include requirement/SHOULD id=\"dotnet-parameter-property-"
"bag-overload\" %} be provided leaving the old methods in place."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"Request Context: This is normally a `CancellationToken` and is defined as "
"the last parameter."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"When more context is needed than just a `CancellationToken` such as DPG you "
"{% include requirement/MAY id=\"dotnet-parameter-request-context\" %} use "
"the [RequestContext](https://github.com/Azure/azure-sdk-for-"
"net/blob/main/sdk/core/Azure.Core/src/RequestContext.cs) defined in "
"`Azure.Core`."
msgstr ""

#: docs/dotnet/implementation.md:block 24 (ordered list)
msgid ""
"This {% include requirement/MUST id=\"dotnet-parameter-request-context-"
"presence\" %} always exist in one of the two forms and be defined as an "
"optional parameter."
msgstr ""

#: docs/dotnet/implementation.md:block 25 (header)
msgid "Parameter validation {#dotnet-parameters}"
msgstr ""

#: docs/dotnet/implementation.md:block 26 (paragraph)
msgid ""
"In addition to [general parameter validation "
"guidelines](introduction.md#dotnet-parameters):"
msgstr ""

#: docs/dotnet/implementation.md:block 27 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"dotnet-parameter-validation-class\" %} "
"define your own parameter validation class."
msgstr ""

#: docs/dotnet/implementation.md:block 28 (paragraph)
msgid ""
"Use the `Argument` class in Azure.Core or even \"extend\" it (it's a partial"
" class included as source) with project-specific argument assertions. Just "
"add the following to your project to include it:"
msgstr ""

#: docs/dotnet/implementation.md:block 30 (paragraph)
msgid "See remarks on the `Argument` class for more detail."
msgstr ""

#: docs/dotnet/implementation.md:block 31 (header)
msgid "Supporting Types"
msgstr ""

#: docs/dotnet/implementation.md:block 32 (header)
msgid "Serialization {#dotnet-usage-json}"
msgstr ""

#: docs/dotnet/implementation.md:block 33 (header)
msgid "JSON Serialization"
msgstr ""

#: docs/dotnet/implementation.md:block 34 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-json-use-system-text-json\" %} use "
"[`System.Text.Json`](https://www.nuget.org/packages/System.Text.Json) "
"package to write and read JSON content."
msgstr ""

#: docs/dotnet/implementation.md:block 35 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"dotnet-json-use-utf8jsonwriter\" %} use "
"`Utf8JsonWriter` to write JSON payloads:"
msgstr ""

#: docs/dotnet/implementation.md:block 37 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"dotnet-json-use-jsondocument\" %} use "
"`JsonDocument` to read JSON payloads:"
msgstr ""

#: docs/dotnet/implementation.md:block 39 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"dotnet-json-use-utf8jsonreader\" %} "
"consider using `Utf8JsonReader` to read JSON payloads."
msgstr ""

#: docs/dotnet/implementation.md:block 40 (paragraph)
msgid ""
"`Utf8JsonReader` is faster than `JsonDocument` but much less convenient to "
"use."
msgstr ""

#: docs/dotnet/implementation.md:block 41 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-json-serialization-resilience\" %} "
"make your serialization and deserialization code version resilient."
msgstr ""

#: docs/dotnet/implementation.md:block 42 (paragraph)
msgid ""
"Optional JSON properties should be deserialized into nullable model "
"properties."
msgstr ""

#: docs/dotnet/implementation.md:block 43 (header)
msgid "Enumeration-like structures {#dotnet-enums}"
msgstr ""

#: docs/dotnet/implementation.md:block 44 (paragraph)
msgid ""
"As described in [general enumeration guidelines](introduction.md#dotnet-"
"enums), you should use `enum` types whenever passing or deserializing a "
"well-known set of values to or from the service. There may be times, "
"however, where a `readonly struct` is necessary to capture an extensible "
"value from the service even if well-known values are defined, or to pass "
"back to the service those same or other user-supplied values:"
msgstr ""

#: docs/dotnet/implementation.md:block 45 (unordered list)
msgid ""
"The value is retrieved and deserialized from service, and may contain a "
"value not supported by the client library."
msgstr ""

#: docs/dotnet/implementation.md:block 45 (unordered list)
msgid ""
"The value is roundtripped: the value is retrieved and deserialized from the "
"service, and may later be serialized and sent back to the server."
msgstr ""

#: docs/dotnet/implementation.md:block 46 (paragraph)
msgid "In those cases, you should define a structure that:"
msgstr ""

#: docs/dotnet/implementation.md:block 47 (unordered list)
msgid "Is `readonly`."
msgstr ""

#: docs/dotnet/implementation.md:block 47 (unordered list)
msgid "Implements `IEquatable<T>` that compares only the string value."
msgstr ""

#: docs/dotnet/implementation.md:block 47 (unordered list)
msgid "Stores only the string value."
msgstr ""

#: docs/dotnet/implementation.md:block 47 (unordered list)
msgid "Defines `static` properties with well-known values."
msgstr ""

#: docs/dotnet/implementation.md:block 47 (unordered list)
msgid ""
"Defines equality, inequality, and an implicit cast-from-string operators."
msgstr ""

#: docs/dotnet/implementation.md:block 47 (unordered list)
msgid "Overrides `Equals`, `GetHashCode`, and `ToString` methods."
msgstr ""

#: docs/dotnet/implementation.md:block 47 (unordered list)
msgid ""
"`Equals(object)` and `GetHashCode` should be attributed with "
"`EditorBrowsable(EditorBrowsableState.Never)`."
msgstr ""

#: docs/dotnet/implementation.md:block 48 (paragraph)
msgid ""
"Type of value comparison should be selected on per-service basis, if the "
"service is inconsistent with how string values are returned the case-"
"insensitive comparison is allowed."
msgstr ""

#: docs/dotnet/implementation.md:block 49 (paragraph)
msgid ""
"The following example implements these requirements and should be used as a "
"template:"
msgstr ""

#: docs/dotnet/implementation.md:block 51 (header)
msgid "Constant values for enumeration-like structures {#dotnet-enums-values}"
msgstr ""

#: docs/dotnet/implementation.md:block 52 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"dotnet-enums-values-define\" %} define a "
"nested static class named `Values` with public constants if and only if "
"extensible enum values *must* be used as constant expressions, for example:"
msgstr ""

#: docs/dotnet/implementation.md:block 53 (unordered list)
msgid "Attribute values"
msgstr ""

#: docs/dotnet/implementation.md:block 53 (unordered list)
msgid "Default parameter values"
msgstr ""

#: docs/dotnet/implementation.md:block 53 (unordered list)
msgid "Switch statements and expressions"
msgstr ""

#: docs/dotnet/implementation.md:block 55 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-enums-values-test\" %} define tests "
"to ensure extensible enum properties and defined `Values` constants declare "
"the same names and define the same values. See "
"[here](https://github.com/Azure/azure-sdk-for-"
"net/blob/322f6952e4946229949bd3375f5eb6120895fd2f/sdk/search/Azure.Search.Documents/tests/Models/LexicalAnalyzerNameTests.cs#L14-L29)"
" for an example."
msgstr ""

#: docs/dotnet/implementation.md:block 56 (header)
msgid "Using Azure Core Types"
msgstr ""

#: docs/dotnet/implementation.md:block 57 (header)
msgid "Implementing Subtypes of Operation<T> {#dotnet-implement-operation}"
msgstr ""

#: docs/dotnet/implementation.md:block 58 (paragraph)
msgid ""
"Subtypes of `Operation<T>` are returned from service client methods invoking"
" long running operations (LROs), as described in [Methods Invoking Long "
"Running Operations](introduction.md#dotnet-longrunning)."
msgstr ""

#: docs/dotnet/implementation.md:block 59 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-lro-return\" %} check the value of "
"`HasCompleted` in subclass implementations of `UpdateStatus` and "
"`UpdateStatusAsync` and immediately return the result of `GetRawResponse` if"
" it is true."
msgstr ""

#: docs/dotnet/implementation.md:block 61 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-lro-return\" %} throw from methods "
"on `Operation<T>` subclasses in the following scenarios."
msgstr ""

#: docs/dotnet/implementation.md:block 62 (unordered list)
msgid ""
"If an underlying service operation call from `UpdateStatus`, "
"`WaitForCompletion`, or `WaitForCompletionAsync` throws, re-throw "
"`RequestFailedException` or its subtype."
msgstr ""

#: docs/dotnet/implementation.md:block 62 (unordered list)
msgid ""
"If the operation completes with a non-success result, throw "
"`RequestFailedException` or its subtype from `UpdateStatus`, "
"`WaitForCompletion`, or `WaitForCompletionAsync`."
msgstr ""

#: docs/dotnet/implementation.md:block 62 (unordered list)
msgid "Include any relevant error state information in the exception details."
msgstr ""

#: docs/dotnet/implementation.md:block 64 (unordered list)
msgid ""
"If the `Value` property is evaluated after the operation failed (`HasValue` "
"is false and `HasCompleted` is true) throw the same exception as the one "
"thrown when the operation failed."
msgstr ""

#: docs/dotnet/implementation.md:block 66 (unordered list)
msgid ""
"If the `Value` property is evaluated before the operation is complete "
"(`HasCompleted` is false) throw `InvalidOperationException`."
msgstr ""

#: docs/dotnet/implementation.md:block 66 (unordered list)
msgid "The exception message should be: \"The operation has not yet completed.\""
msgstr ""

#: docs/dotnet/implementation.md:block 68 (header)
msgid "SDK Feature Implementation"
msgstr ""

#: docs/dotnet/implementation.md:block 69 (header)
msgid "Configuration"
msgstr ""

#: docs/dotnet/implementation.md:block 70 (paragraph)
msgid ""
"TODO: Add discussion on configuration environment variables to parallel that"
" of other languages"
msgstr ""

#: docs/dotnet/implementation.md:block 71 (header)
msgid "Logging"
msgstr ""

#: docs/dotnet/implementation.md:block 72 (paragraph)
msgid ""
"Request logging will be done automatically by the `HttpPipeline`. If a "
"client library needs to add custom logging, follow the [same "
"guidelines](implementation.md#general-logging) and mechanisms as the "
"pipeline logging mechanism. If a client library wants to do custom logging, "
"the designer of the library must ensure that the logging mechanism is "
"pluggable in the same way as the `HttpPipeline` logging policy."
msgstr ""

#: docs/dotnet/implementation.md:block 73 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-logging-follow-guidelines\" %} "
"follow [the logging section of the Azure SDK General "
"Guidelines](implementation.md#general-logging) if logging directly (as "
"opposed to through the `HttpPipeline`)."
msgstr ""

#: docs/dotnet/implementation.md:block 74 (header)
msgid "EventSource"
msgstr ""

#: docs/dotnet/implementation.md:block 75 (paragraph)
msgid ""
"Azure SDKs use EventSource library as a logging mechanism. Most Azure SDKs "
"with client methods that make a service request and deserialize the response"
" won't need to define EventSource of their own as `Azure.Core` would provide"
" HTTP request logging, retry logging etc. and the failures would be surfaced"
" to customers as `Exceptions`. You should only log information that is not "
"possible to infer from the result returned by the client."
msgstr ""

#: docs/dotnet/implementation.md:block 76 (paragraph)
msgid "For example:"
msgstr ""

#: docs/dotnet/implementation.md:block 77 (unordered list)
msgid ""
"✔ **GOOD** `Azure.Identity` logging which credential type was selected when "
"using `DefaultAzureCredential` - it's impossible to determine from the "
"returned `AccessToken` with credential was used to retrieve it."
msgstr ""

#: docs/dotnet/implementation.md:block 77 (unordered list)
msgid ""
"✔ **GOOD** `Azure.Security.KeyVault` logging whether an encryption operation"
" was performed locally or remotely - the client can decide to run encryption"
" locally or remotely depending on key properties, the decision is invisible "
"to consumer."
msgstr ""

#: docs/dotnet/implementation.md:block 77 (unordered list)
msgid ""
"❌**BAD** Logging properties of the request or response - `Azure-Core` "
"already does this as part of the pipeline."
msgstr ""

#: docs/dotnet/implementation.md:block 77 (unordered list)
msgid ""
"❌**BAD** Logging exception details before throwing - customers would be able"
" to decide if they want the exception to be logged or not."
msgstr ""

#: docs/dotnet/implementation.md:block 78 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-tracing-eventsource\" %} use "
"[EventSource library](https://github.com/microsoft/dotnet-"
"samples/blob/master/Microsoft.Diagnostics.Tracing/EventSource/docs/EventSource.md)"
" to produce diagnostic events."
msgstr ""

#: docs/dotnet/implementation.md:block 79 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-tracing-eventsource-type-name\" %} "
"use the package name with `EventSource` suffix for the class name (i.e. . "
"`AzureCoreEventSource` for `Azure.Core` package)."
msgstr ""

#: docs/dotnet/implementation.md:block 80 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-tracing-eventsource-base-class\" %} "
"use the `AzureEventSource` as the base class."
msgstr ""

#: docs/dotnet/implementation.md:block 81 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-tracing-eventsource-logging-"
"guidelines\" %} follow the logging guidelines when implementing an "
"`[Package]EventSource`."
msgstr ""

#: docs/dotnet/implementation.md:block 82 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-tracing-eventsource-single\" %} have"
" a single `[Package]EventSource` type per library."
msgstr ""

#: docs/dotnet/implementation.md:block 83 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-tracing-eventsource-internal\" %} "
"define `[Package]EventSource` class as `internal sealed`."
msgstr ""

#: docs/dotnet/implementation.md:block 84 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-tracing-eventsource-singleton\" %} "
"define and use a singleton instance of `[Package]EventSource`:"
msgstr ""

#: docs/dotnet/implementation.md:block 85 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-tracing-eventsource-name\" %} set "
"`[Package]EventSource` name to package name replacing `.` with `-` (i.e. . "
"`Azure-Core` for `Azure.Core` package)"
msgstr ""

#: docs/dotnet/implementation.md:block 86 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-tracing-eventsource-event-message\" "
"%} have `Message` property of EventAttribute set for all events."
msgstr ""

#: docs/dotnet/implementation.md:block 87 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-tracing-eventsource-public-api\" %} "
"treat `[Package]EventSource` name, guid, event id and parameters as public "
"API and follow the appropriate versioning rules."
msgstr ""

#: docs/dotnet/implementation.md:block 88 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"dotnet-tracing-eventsource-is-enabled\" "
"%} check IsEnabled property before doing expensive work (formatting "
"parameters, calling ToString, allocations etc.)"
msgstr ""

#: docs/dotnet/implementation.md:block 89 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"dotnet-tracing-eventsource-event-param-"
"exception\" %} define events with `Exception` parameters as they are not "
"supported by `EventSource`."
msgstr ""

#: docs/dotnet/implementation.md:block 90 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-tracing-eventsource-test\" %} have a"
" test that asserts `[Package]EventSource` name, guid and generates the "
"manifest to verify that event source is correctly defined."
msgstr ""

#: docs/dotnet/implementation.md:block 91 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-tracing-eventsource-test-events\" %}"
" test that expected events are produced when appropriate. "
"`TestEventListener` class can be used to collect events. Make sure you mark "
"the test as `[NonParallelizable]`."
msgstr ""

#: docs/dotnet/implementation.md:block 92 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"dotnet-tracing-eventsource-thrown-"
"exceptions\" %} avoid logging exceptions that are going to get thrown to "
"user code anyway."
msgstr ""

#: docs/dotnet/implementation.md:block 93 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"dotnet-tracing-eventsource-event-size-"
"limit\" %} be aware of event size limit of 64K."
msgstr ""

#: docs/dotnet/implementation.md:block 95 (paragraph)
msgid "Sample `EventSource` declaration:"
msgstr ""

#: docs/dotnet/implementation.md:block 97 (header)
msgid "Distributed Tracing {#dotnet-distributedtracing}"
msgstr ""

#: docs/dotnet/implementation.md:block 98 (paragraph)
msgid ""
"Distributed tracing allows customers to observe public API methods that are "
"called and network calls that are made from Azure SDK libraries. With these "
"traces, customers can view the timing of these calls and any errors that "
"occurred."
msgstr ""

#: docs/dotnet/implementation.md:block 99 (paragraph)
msgid ""
"Distributed traces for network calls are sent automatically by the "
"`HttpPipeline` in Azure.Core. Library authors must trace public service "
"methods using `ClientDiagnostics.CreateScope`. The .NET `Activity` types are"
" used for this internally by the `ClientDiagnostics` via .NET "
"[`DiagnosticSource`](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md)"
" or "
"[`ActivitySource`](https://docs.microsoft.com/dotnet/core/diagnostics/distributed-"
"tracing-instrumentation-walkthroughs)."
msgstr ""

#: docs/dotnet/implementation.md:block 100 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-tracing\" %} follow [General "
"Distributed Tracing Guidance]({{ site.baseurl "
"}}/general_implementation.html#distributed-tracing)."
msgstr ""

#: docs/dotnet/implementation.md:block 101 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-tracing-opentelemetry\" %} support "
"distributed tracing by using `ClientDiagnostics` and `DiagnosticScope`"
msgstr ""

#: docs/dotnet/implementation.md:block 102 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-tracing-new-span-per-method-"
"failure\" %} If method throws exception, record exception on scope using "
"`scope.Failed(ex)`. Do not record exception if exception is handled within "
"service method."
msgstr ""

#: docs/dotnet/implementation.md:block 103 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-tracing-suppress-client-spans-for-"
"inner-methods\" %} enable inner client scope suppression when creating "
"`ClientDiagnostics` by setting corresponding suppression flag to `true`. "
"Client libraries that currently don't suppress inner client scopes must keep"
" the flag value default (`null`) for backward compatibility reasons."
msgstr ""

#: docs/dotnet/implementation.md:block 104 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"dotnet-tracing-sources\" %} use "
"`DiagnosticSource`, or `ActivitySource` API directly from client libraries. "
"`Activity` can be used directly when `DiagnosticScope` does not expose "
"corresponding APIs."
msgstr ""

#: docs/dotnet/implementation.md:block 105 (header)
msgid "Telemetry"
msgstr ""

#: docs/dotnet/implementation.md:block 106 (paragraph)
msgid "TODO: Add guidance regarding user agent strings"
msgstr ""

#: docs/dotnet/implementation.md:block 107 (header)
msgid "Ecosystem Integration"
msgstr ""

#: docs/dotnet/implementation.md:block 108 (header)
msgid "Integration with ASP.NET Core"
msgstr ""

#: docs/dotnet/implementation.md:block 109 (paragraph)
msgid ""
"All Azure client libraries ship with a set of extension methods that provide"
" integration with ASP.NET Core applications by registering clients with "
"DependencyInjection container, flowing Azure SDK logs to ASP.NET Core "
"logging subsystem and providing ability to use configuration subsystem for "
"client configuration (for more examples see https://github.com/Azure/azure-"
"sdk-for-net/tree/main/sdk/core/Microsoft.Extensions.Azure)"
msgstr ""

#: docs/dotnet/implementation.md:block 110 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-builder-class-name\" %} provide a "
"single `*ClientBuilderExtensions` class for every Azure SDK client library "
"that contains client types. Name of the type should use the same prefix as "
"the `*ClientOptions` class used across the library. For example: "
"`SecretClientBuilderExtensions`, `BlobClientBuilderExtensions`"
msgstr ""

#: docs/dotnet/implementation.md:block 111 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-client-builder-class-namespace\" %} "
"use `Microsoft.Extensions.Azure` as a namespace."
msgstr ""

#: docs/dotnet/implementation.md:block 112 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-client-builder-class-service-"
"client\" %} provide integration extension methods for every top level client"
" type users are expected to start with in the main namespace. Do not include"
" integration extension methods for secondary clients, child clients, or "
"clients in advanced namespaces."
msgstr ""

#: docs/dotnet/implementation.md:block 113 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-client-builder-extension-name\" %} "
"name extension methods as `Add[ClientName]` for example. Add "
"`AddSecretsClient`, `AddBlobServiceClient`."
msgstr ""

#: docs/dotnet/implementation.md:block 114 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-client-builder-overloads\" %} "
"provide an overload for every set of constructor parameters."
msgstr ""

#: docs/dotnet/implementation.md:block 115 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-client-builder-overload-normal\" %} "
"provide extension method for `IAzureClientFactoryBuilder` interface for "
"constructors that don't take `TokenCredentials`. Extension method should "
"take same set of parameters as constructor and call into "
"`builder.RegisterClientFactory`"
msgstr ""

#: docs/dotnet/implementation.md:block 116 (paragraph)
msgid "Sample implementation:"
msgstr ""

#: docs/dotnet/implementation.md:block 118 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-client-builder-overload-"
"tokencredential\" %} provide extension method for "
"`IAzureClientFactoryBuilderWithCredential` interface for constructors that "
"take `TokenCredentials`. Extension method should take same set of parameters"
" as constructor except the `TokenCredential` and call into "
"`builder.RegisterClientFactory` overload that provides the token credential "
"as part of factory lambda."
msgstr ""

#: docs/dotnet/implementation.md:block 121 (paragraph)
msgid ""
"{% include requirement/MUST id=\"dotnet-client-builder-overload-"
"configuration\" %} provide extension method for "
"`IAzureClientFactoryBuilderWithConfiguration<TConfiguration>` that takes "
"`TConfiguration configuration`. This overload would allow customers to pass "
"in a `IConfiguration` object and create client dynamically based on "
"configuration values."
msgstr ""

#: docs/dotnet/implementation.md:block 125 (paragraph)
msgid "{% include refs.md %} {% include_relative refs.md %}"
msgstr ""
