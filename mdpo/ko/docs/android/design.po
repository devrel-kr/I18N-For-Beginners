#
msgid ""
msgstr ""

#: docs/android/design.md:block 1 (header)
msgid ""
"title: \"Android Azure SDK Design Guidelines\"\n"
"keywords: guidelines android\n"
"permalink: android_design.html\n"
"folder: android\n"
"sidebar: general_sidebar"
msgstr ""

#: docs/android/design.md:block 2 (paragraph)
msgid ""
"{% include draft.html content=\"The Android guidelines are in DRAFT status\""
" %}"
msgstr ""

#: docs/android/design.md:block 3 (header)
msgid "Introduction"
msgstr ""

#: docs/android/design.md:block 4 (paragraph)
msgid ""
"The following document describes Android specific guidelines for designing "
"Azure SDK client libraries. These guidelines also expand on and simplify "
"language-independent [General Azure SDK Guidelines][general-guidelines]. "
"More specific guidelines take precedence over more general guidelines."
msgstr ""

#: docs/android/design.md:block 5 (paragraph)
msgid ""
"The Android guidelines are for the benefit of client library designers "
"targeting service applications written for the native Android ecosystem. You"
" do not have to write a client library for Android if your service is not "
"normally accessed from mobile apps."
msgstr ""

#: docs/android/design.md:block 6 (header)
msgid "Design principles"
msgstr ""

#: docs/android/design.md:block 7 (paragraph)
msgid ""
"The main value of the Azure SDK is productivity. Other qualities, such as "
"completeness, extensibility, and performance are important but secondary. We"
" ensure our customers can be highly productive when using our libraries by "
"ensuring these libraries are:"
msgstr ""

#: docs/android/design.md:block 8 (paragraph)
msgid "**Idiomatic**"
msgstr ""

#: docs/android/design.md:block 9 (unordered list)
msgid ""
"The SDK should follow the general design guidelines and conventions for "
"Android libraries written in Java. It should feel natural to an Android "
"developer."
msgstr ""

#: docs/android/design.md:block 9 (unordered list)
msgid "We embrace the ecosystem with its strengths and its flaws."
msgstr ""

#: docs/android/design.md:block 9 (unordered list)
msgid "We work with the ecosystem to improve it for all developers."
msgstr ""

#: docs/android/design.md:block 10 (quote)
msgid ""
"We are not trying to fix bad parts of the language ecosystem; we embrace the"
" ecosystem with its strengths and its flaws."
msgstr ""

#: docs/android/design.md:block 11 (paragraph)
msgid "**Consistent**"
msgstr ""

#: docs/android/design.md:block 12 (unordered list)
msgid ""
"The Azure SDK feels like a single product of a single team, not simply a "
"collection of libraries for Azure services."
msgstr ""

#: docs/android/design.md:block 12 (unordered list)
msgid ""
"Users learn common concepts once; apply the knowledge across all SDK "
"components."
msgstr ""

#: docs/android/design.md:block 12 (unordered list)
msgid "All differences from the guidelines must have good reasons."
msgstr ""

#: docs/android/design.md:block 13 (paragraph)
msgid "**Approachable**"
msgstr ""

#: docs/android/design.md:block 14 (unordered list)
msgid "Small number of steps to get started; power knobs for advanced users."
msgstr ""

#: docs/android/design.md:block 14 (unordered list)
msgid ""
"Small number of concepts; small number of types; small number of members."
msgstr ""

#: docs/android/design.md:block 14 (unordered list)
msgid ""
"Approachable by our users, not by engineers designing the SDK components."
msgstr ""

#: docs/android/design.md:block 14 (unordered list)
msgid "Easy to find great *getting started* guides and samples."
msgstr ""

#: docs/android/design.md:block 14 (unordered list)
msgid "Easy to acquire."
msgstr ""

#: docs/android/design.md:block 15 (paragraph)
msgid "**Dependable**"
msgstr ""

#: docs/android/design.md:block 16 (unordered list)
msgid "100% backward compatible."
msgstr ""

#: docs/android/design.md:block 16 (unordered list)
msgid "Great logging and error messages."
msgstr ""

#: docs/android/design.md:block 16 (unordered list)
msgid "Predictable support lifecycle, feature coverage, and quality."
msgstr ""

#: docs/android/design.md:block 17 (header)
msgid "General Guidelines"
msgstr ""

#: docs/android/design.md:block 18 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-general-follow-general-guidelines\""
" %} follow the [General Azure SDK Guidelines]."
msgstr ""

#: docs/android/design.md:block 19 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-general-repository\" %} locate all "
"source code in the [azure/azure-sdk-for-android] GitHub repository."
msgstr ""

#: docs/android/design.md:block 20 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-java-version\" %} write the client "
"libraries using Java 8."
msgstr ""

#: docs/android/design.md:block 21 (paragraph)
msgid ""
"The intent is to ensure that the client library is idiomatic for Android "
"applications while remaining compatible with a minimum API level of Android "
"15 (Ice Cream Sandwich)."
msgstr ""

#: docs/android/design.md:block 22 (header)
msgid "Support for non-HTTP Protocols"
msgstr ""

#: docs/android/design.md:block 23 (paragraph)
msgid ""
"Currently, this document describes guidelines for client libraries exposing "
"HTTP services. If your service is not HTTP-based, please contact the [Azure "
"SDK Architecture Board][Architecture Board] for guidance."
msgstr ""

#: docs/android/design.md:block 24 (header)
msgid "Azure SDK API Design"
msgstr ""

#: docs/android/design.md:block 25 (paragraph)
msgid ""
"Azure services are exposed to Android developers as one or more *service "
"client* types and a set of *supporting types*."
msgstr ""

#: docs/android/design.md:block 26 (header)
msgid "Service Client"
msgstr ""

#: docs/android/design.md:block 27 (paragraph)
msgid ""
"Service clients are the main starting points for developers calling Azure "
"services with the Azure SDK. Each client library should have at least one "
"client in its main namespace, so itâ€™s easy to discover. The guidelines in "
"this section describe patterns for the design of a service client. Because "
"for Android both synchronous and asynchronous service clients are required, "
"the sections below are organized into general service client guidance, "
"followed by sync- and async-specific guidance."
msgstr ""

#: docs/android/design.md:block 28 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-service-client-name\" %} name "
"service client types with the *Client* suffix (for example, "
"`ConfigurationClient`)."
msgstr ""

#: docs/android/design.md:block 29 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-service-client-annotation\" %} "
"annotate all service clients with the `@ServiceClient` annotation."
msgstr ""

#: docs/android/design.md:block 30 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-service-client-namespace\" %} place"
" service client types that the consumer is most likely to interact with in "
"the root package of the client library (for example, "
"`com.azure.android.<group>.servicebus`). Specialized service clients should "
"be placed in sub-packages."
msgstr ""

#: docs/android/design.md:block 31 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-service-client-immutable\" %} "
"ensure that all service client classes are immutable and stateless upon "
"instantiation."
msgstr ""

#: docs/android/design.md:block 32 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-network-separate-packages\" %} have"
" separate service clients for sync and async APIs."
msgstr ""

#: docs/android/design.md:block 33 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"android-service-client-feature-support\" "
"%} support only those features provided by the Azure service that would make"
" sense to access from a mobile app. Mobile apps are inherently end-user "
"facing applications, and only a subset of Azure services and features are "
"intended for use by these type of applications. While completeness is "
"valuable and gaps in functionality can cause frustration, a smaller binary "
"size and an opinionated stance of only providing end user facing "
"functionality will make our libraries easier and more desirable for app "
"developers to use."
msgstr ""

#: docs/android/design.md:block 34 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-service-client-mobile-consistency\""
" %} provide a public API whose shape matches the public API shape provided "
"in the equivalent iOS library as closely as possible. Clients should have "
"the same names and provide the same functionality in their public APIs, and "
"while method naming should be idiomatic to each platform, consistency in "
"naming between the two platforms is the next most important consideration."
msgstr ""

#: docs/android/design.md:block 35 (header)
msgid "Sync Service Clients"
msgstr ""

#: docs/android/design.md:block 36 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-sync-client-name\" %} offer a sync "
"service client named `<ServiceName>Client` containing all non-streaming "
"service methods. More than one service client may be offered for a single "
"service. An example of a sync client is shown below:"
msgstr ""

#: docs/android/design.md:block 38 (paragraph)
msgid ""
"Refer to the [ChatClient class] for a fully built-out example of how a sync "
"client should be constructed."
msgstr ""

#: docs/android/design.md:block 39 (header)
msgid "Async Service Clients"
msgstr ""

#: docs/android/design.md:block 40 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-async-client-name\" %} offer an "
"async service client named `<ServiceName>AsyncClient` containing all service"
" methods. More than one service client may be offered for a single service. "
"An example of an async client is shown below:"
msgstr ""

#: docs/android/design.md:block 42 (paragraph)
msgid ""
"Refer to the [ChatAsyncClient class] for a fully built-out example of how a "
"sync client should be constructed."
msgstr ""

#: docs/android/design.md:block 43 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-async-framework\" %} use [Android "
"retro future's][RetroFuture] `CompletableFuture` to provide consumers with a"
" high-quality async API."
msgstr ""

#: docs/android/design.md:block 44 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-async-streaming\" %} write "
"custom APIs for streaming or async operations. Make use of the existing "
"functionality offered in the Azure core library. Discuss proposed changes to"
" the Azure core library with the [Architecture Board]. Refer to the [Azure "
"Core Types](#using-azure-core-types) section for more information."
msgstr ""

#: docs/android/design.md:block 45 (header)
msgid "Service Client Creation"
msgstr ""

#: docs/android/design.md:block 46 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-client-constructors\" %} provide"
" any `public` or `protected` constructors in the service client. Keep "
"visibility to a minimum by using package-private constructors that may only "
"be called by types in the same package, and then enable instantiation of the"
" service client through the use of service client builders, detailed below."
msgstr ""

#: docs/android/design.md:block 47 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-service-client-fluent-builder\" %} "
"offer a fluent builder API for constructing service clients named "
"`<service_name>ClientBuilder`, which must support building a sync service "
"client instance and an async service client instance (where appropriate). It"
" must offer `buildClient()` and `buildAsyncClient()` API to create a "
"synchronous and asynchronous service client instance, respectively. Shown in"
" the first code sample below is a generalized template, and following that "
"is a stripped-down example builder."
msgstr ""

#: docs/android/design.md:block 50 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-service-client-fluent-builder-"
"multiple-clients\" %} offer build method 'overloads' for when a builder can "
"build multiple client types. These methods must be named in the form "
"`build<client>Client()` and `build<client>AsyncClient()`. For example, "
"`buildBlobClient()` and `buildBlobAsyncClient()`."
msgstr ""

#: docs/android/design.md:block 51 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-service-client-builder-annotation\""
" %} annotate service client builders with the `@ServiceClientBuilder` "
"annotation, setting the annotation parameters appropriately for the service "
"client (e.g. `async` is true for async service clients)."
msgstr ""

#: docs/android/design.md:block 52 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-service-client-builder-"
"consistency\" %} ensure consistency across all HTTP-based client libraries, "
"by using the following names for client builder fluent API:"
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "Name"
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "Intent"
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "`addPolicy`"
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid ""
"Adds a policy to the set of existing policies (assumes no custom pipeline is"
" set)."
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "`buildAsyncClient`"
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "Creates a new **async** client on each call."
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "`buildClient`"
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "Creates a new **sync** client on each call."
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "`clientOptions`"
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid ""
"Allows the user to set a variety of client-related options, such as user-"
"agent string, headers, etc."
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "`configuration`"
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid ""
"Sets the configuration store that is used during construction of the service"
" client."
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "`connectionString`"
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid ""
"Sets the connection string to use for authenticating HTTP requests (only "
"applicable if the Azure portal offers it for the service)."
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "`credential`"
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "Sets the credential to use when authenticating HTTP requests."
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "`endpoint`"
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "URL to send HTTP requests to."
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "`httpClient`"
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "Sets the HTTP client to use."
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "`httpLogOptions`"
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "Configuration for HTTP logging level, header redaction, etc."
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "`pipeline`"
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "Sets the HTTP pipeline to use."
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "`retryPolicy`"
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "Sets the retry policy to use (using the `RetryPolicy` type)."
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid "`serviceVersion`"
msgstr ""

#: docs/android/design.md:block 53 (table)
msgid ""
"Sets the [service version](#versioning) to use. This must be a type "
"implementing `ServiceVersion`."
msgstr ""

#: docs/android/design.md:block 54 (paragraph)
msgid ""
"`endpoint` may be renamed if a more user-friendly name can be justified. For"
" example, a blob storage library developer may consider using `new "
"BlobClientBuilder.blobUrl(..)`. In this case, the `endpoint` API should be "
"removed."
msgstr ""

#: docs/android/design.md:block 55 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-client-constructor-minimal\" %} "
"allow the consumer to construct a service client with the minimal "
"information needed to connect and [authenticate](#authentication) to the "
"service."
msgstr ""

#: docs/android/design.md:block 56 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-service-client-builder-validity\" "
"%} ensure the builder will instantiate a service client into a valid state. "
"Throw an `IllegalStateException` when the user calls the `build*()` methods "
"with a configuration that is incomplete or invalid."
msgstr ""

#: docs/android/design.md:block 57 (header)
msgid "Service Versions"
msgstr ""

#: docs/android/design.md:block 58 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-versioning-latest-service-api\" %} "
"call the highest supported service API version by default, and ensure this "
"is clearly documented."
msgstr ""

#: docs/android/design.md:block 59 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-versioning-no-previews-in-"
"stable\" %} include preview API versions in a stable SDK release's API "
"version enum."
msgstr ""

#: docs/android/design.md:block 60 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-versioning-no-previews-in-stable\" "
"%} expose preview API versions only in beta SDKs."
msgstr ""

#: docs/android/design.md:block 61 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-versioning-select-service-api\" %} "
"provide an enum of supported service API versions that can be supplied via "
"the [options class](#option-parameters) when initializing the service "
"client, as shown below:"
msgstr ""

#: docs/android/design.md:block 63 (paragraph)
msgid "This can then be called by the developer as such:"
msgstr ""

#: docs/android/design.md:block 65 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-versioning-latest-service-"
"property\" %} include a `getLatest()` method on the client's API version "
"enum which returns the latest preview API version for beta SDKs and the "
"latest GA API version for stable SDKs."
msgstr ""

#: docs/android/design.md:block 66 (header)
msgid "Service Methods"
msgstr ""

#: docs/android/design.md:block 67 (paragraph)
msgid ""
"Service methods are the methods on the client that invoke operations on the "
"service."
msgstr ""

#: docs/android/design.md:block 68 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-service-client-method-naming\" %} "
"use standard JavaBean naming prefixes for all methods that are not service "
"methods."
msgstr ""

#: docs/android/design.md:block 69 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-async-suffix\" %} use the suffix"
" `Async` in methods that do operations asynchronously. Let the fact the user"
" has an instance of an 'async client' provide this context."
msgstr ""

#: docs/android/design.md:block 70 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-async-multiple-methods\" %} "
"provide multiple asynchronous methods for a single REST endpoint in the same"
" library, unless to provide overloaded methods to enable alternative or "
"optional method parameters."
msgstr ""

#: docs/android/design.md:block 71 (paragraph)
msgid ""
"One of the Azure Core types is `com.azure.core.android.util.Context`, which "
"acts as an append-only key-value map, and which by default is empty. The "
"`Context` allows end users of the API to modify the outgoing requests to "
"Azure on a per-method call basis, for example to enable distributed tracing."
msgstr ""

#: docs/android/design.md:block 72 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-service-client-context\" %} provide"
" an overload method that takes a `com.azure.android.core.util.Context` "
"argument for each service operation **in sync clients only**. The `Context` "
"argument must be the last argument into the service method (except where "
"`varargs` are used). If a service method has multiple overloads, only the "
"'maximal' overloads need to have the `Context` argument. A maximal overload "
"is one that has a full set of arguments. It may not be necessary to offer a "
"'Context overload' in all cases. We prefer a minimal API surface, but "
"`Context` must always be supported."
msgstr ""

#: docs/android/design.md:block 74 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-service-client-context-async\" "
"%} include overloads that take `Context` in async clients. Async clients use"
" the [subscriber context built into Reactor Flux and Mono APIs][reactor-"
"context]."
msgstr ""

#: docs/android/design.md:block 75 (header)
msgid "Naming"
msgstr ""

#: docs/android/design.md:block 76 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-client-verb-prefix\" %} name "
"service methods using a standardized set of verbs or verb prefixes within a "
"set of client libraries for a service. Prefer the use of the following terms"
" for CRUD operations:"
msgstr ""

#: docs/android/design.md:block 78 (paragraph)
msgid ""
"{% assign data = site.data.tables.android_standard_verbs.entries %} {% "
"include tables/standard_verbs_template.html %}"
msgstr ""

#: docs/android/design.md:block 79 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"android-service-client-flexibility\" %} "
"remain flexible and use names best suited for developer experience. Don't "
"let the naming rules result in non-idiomatic naming patterns. For example, "
"Java developers prefer `list` operations over `getAll` operations."
msgstr ""

#: docs/android/design.md:block 80 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-service-client-verb-prefix\" %} use"
" the verb as as prefix for the method name when object(s) the action will "
"apply to or return is unclear. For example, prefer "
"`storageBlobClient.listContainers()` rather than `storageBlobClient.list()`."
msgstr ""

#: docs/android/design.md:block 81 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-service-client-vend-prefix\" %} "
"prefix methods in sync clients that create or vend subclients with `get` and"
" suffix with `Client`. For example, `container.getBlobClient()`."
msgstr ""

#: docs/android/design.md:block 82 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-service-async-client-vend-prefix\" "
"%} prefix methods in async clients that create or vend subclients with `get`"
" and suffix with `AsyncClient`. For example, "
"`container.getBlobAsyncClient()`."
msgstr ""

#: docs/android/design.md:block 83 (header)
msgid "Cancellation"
msgstr ""

#: docs/android/design.md:block 84 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-async-cancellation\" %} support an "
"optional `CancellationToken` object. This object allows the developer to "
"call `cancel()` on the token or set a timeout, after which a best-effort "
"attempt is made to cancel the request."
msgstr ""

#: docs/android/design.md:block 85 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-async-cancellation-implementation\""
" %} cancel any in-flight requests when a developer calls `cancel()` on the "
"`CancellationToken`. If the body of the client method includes multiple, "
"sequential operations, you must check for cancellation before executing any "
"operations after the first. Since the underlying Android network APIs do not"
" permit cancellation of in-flight requests, you must also check for "
"cancellation immediately after receiving any response. If cancellation has "
"been requested, indicate that the call has been cancelled and do not return "
"or otherwise further process the response."
msgstr ""

#: docs/android/design.md:block 86 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-async-cancellation-triggers-error\""
" %} return an `AzureException` when cancellation is requested stating that "
"the request was canceled, even if the request was successful."
msgstr ""

#: docs/android/design.md:block 87 (header)
msgid "Return Types"
msgstr ""

#: docs/android/design.md:block 88 (paragraph)
msgid ""
"Requests to the service fall into two basic groups: methods that make a "
"single logical request, and methods that make a deterministic sequence of "
"requests. An example of a *single logical request* is a request that may be "
"retried inside the operation. An example of a *deterministic sequence of "
"requests* is a paged operation."
msgstr ""

#: docs/android/design.md:block 89 (paragraph)
msgid ""
"The *logical entity* is a protocol neutral representation of a response. The"
" logical entity may combine data from headers, body, and the status line. "
"For example, you may expose an `ETag` header as a property on the logical "
"entity. `Response<T>` is the â€˜complete responseâ€™. It contains HTTP headers, "
"status code, and the `T` object (a deserialized object created from the "
"response body). The `T` object would be the â€˜logical entityâ€™."
msgstr ""

#: docs/android/design.md:block 90 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-response-logical-entity\" %} return"
" the logical entity (i.e. the `T`) for all **synchronous** service methods."
msgstr ""

#: docs/android/design.md:block 91 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-response-return-logical-entity-"
"async\" %} return the logical entity (i.e. the `T`) wrapped inside an "
"[android-retrofuture's][RetroFuture] `CompletableFuture` for all non-"
"streaming asynchronous service methods that make network requests. Do not "
"use the JDK's `java.util.concurrent.CompletableFuture`, as this type is not "
"available on all Android devices."
msgstr ""

#: docs/android/design.md:block 92 (paragraph)
msgid ""
"Return `Response<T>` on the maximal overload for a service method with "
"`WithResponse` appended to the name. For example:"
msgstr ""

#: docs/android/design.md:block 94 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-response-access-response\" %} *make"
" it possible* for a developer to access the complete response, including the"
" status line, headers, and body. The type `Response<T>` encodes this "
"requirement and is the recommended return type for async client methods. The"
" `T` parameter is the type of the logical entity."
msgstr ""

#: docs/android/design.md:block 95 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-response-provide-examples\" %} "
"provide examples on how to access the raw and streamed response for a "
"request, where exposed by the client library. We don't expect all methods to"
" expose a streamed response."
msgstr ""

#: docs/android/design.md:block 96 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-response-pagination\" %} return an "
"instance of the `PagedIterable` or `PagedAsyncCollection` classes for all "
"paged operations. For more information on what to return for `list` "
"operations, refer to [Pagination](#methods-returning-collections-paging)."
msgstr ""

#: docs/android/design.md:block 97 (paragraph)
msgid "For methods that combine multiple requests into a single call:"
msgstr ""

#: docs/android/design.md:block 98 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-response-headers\" %} return "
"headers and other per-request metadata unless it's obvious as to which "
"specific HTTP request the methods return value corresponds to."
msgstr ""

#: docs/android/design.md:block 99 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-response-errors\" %} provide enough"
" information in failure cases for a developer to take appropriate corrective"
" action, including a message describing what went wrong and details on the "
"corrective actions to take."
msgstr ""

#: docs/android/design.md:block 100 (header)
msgid "Service Method Parameters"
msgstr ""

#: docs/android/design.md:block 101 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-required-and-optional-method-"
"parameters\" %} accept all arguments required to execute a method call as "
"individual parameters to the method. An argument is considered required if "
"it is flagged as such in the service's API spec or if the library author "
"deems it to be essential to the developer experience of the client API."
msgstr ""

#: docs/android/design.md:block 102 (header)
msgid "Option Parameters"
msgstr ""

#: docs/android/design.md:block 103 (paragraph)
msgid ""
"Service methods fall into two main groups when it comes to the number and "
"complexity of parameters they accept:"
msgstr ""

#: docs/android/design.md:block 104 (unordered list)
msgid "Service Methods with simple inputs, *simple methods* for short"
msgstr ""

#: docs/android/design.md:block 104 (unordered list)
msgid "Service Methods with complex inputs, *complex methods* for short"
msgstr ""

#: docs/android/design.md:block 105 (paragraph)
msgid ""
"*Simple methods* are methods that take up to six parameters, with most of "
"the parameters being simple primitive types. *Complex methods* are methods "
"that take a larger number of parameters and typically correspond to REST "
"APIs with complex request payloads."
msgstr ""

#: docs/android/design.md:block 106 (paragraph)
msgid ""
"*Simple methods* should follow standard Java best practices for parameter "
"list and overload design."
msgstr ""

#: docs/android/design.md:block 107 (paragraph)
msgid ""
"*Complex methods* should introduce an *option parameter* to represent the "
"request payload. Consideration can subsequently be made for providing "
"simpler convenience overloads for the most common scenarios. This is "
"referred to in this document as the 'options pattern', and is demonstrated "
"in the code below:"
msgstr ""

#: docs/android/design.md:block 109 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-params-complex-naming\" %} name the"
" *options* type after the name of the service method it is used for, such "
"that the type is named `<operation>Options`. For example, above the method "
"was `createBlob`, and so the *options* type was named `CreateBlobOptions`."
msgstr ""

#: docs/android/design.md:block 110 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-params-complex\" %} use the "
"*options* parameter pattern for complex service methods."
msgstr ""

#: docs/android/design.md:block 111 (paragraph)
msgid ""
"{% include requirement/MAY id=\"android-params-complex-growth\" %} use the "
"*options* parameter pattern for simple service methods that you expect to "
"`grow` in the future."
msgstr ""

#: docs/android/design.md:block 112 (paragraph)
msgid ""
"{% include requirement/MAY id=\"android-params-simple-overloads\" %} add "
"simple overloads of methods using the *options* parameter pattern."
msgstr ""

#: docs/android/design.md:block 113 (paragraph)
msgid ""
"If in common scenarios, users are likely to pass just a small subset of what"
" the *options* parameter represents, consider adding an overload with a "
"parameter list representing just this subset."
msgstr ""

#: docs/android/design.md:block 114 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-params-complex-overloads\" %} "
"introduce method overloads that take a subset of the parameters as well as "
"the *options* parameter, except for parameters that are for client-side use "
"only (e.g. `Context`)."
msgstr ""

#: docs/android/design.md:block 115 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-request-options-types\" %} use rich"
" types where possible for options. For example, use the `Date` type for "
"dates. When not possible, name the option with a suffix to express the "
"expected type. If the expected type is a unit, the suffix should follow the "
"format `In<Unit>`. Unit should be `ms` for milliseconds, and otherwise the "
"name of the unit. Examples include `timeoutInMs` and `delayInSeconds`."
msgstr ""

#: docs/android/design.md:block 116 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-params-complex-withResponse\" %} "
"use the *options* parameter type, if it exists, for all `*WithResponse` "
"methods. If no *options* parameter type exists, do not create one solely for"
" the `*WithResponse` method."
msgstr ""

#: docs/android/design.md:block 117 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-params-options-package\" %} store "
"options classes (and supporting enumerations / classes referenced by such "
"models) in a root-level `options` package, to make options types distinct "
"from service clients and model types."
msgstr ""

#: docs/android/design.md:block 118 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-params-options-design\" %} design "
"options types with the same design guidance as given below for model class "
"types, namely fluent setters for optional arguments, using the standard "
"JavaBean naming convention of `get*`, `set*`, and `is*`. Additionally, there"
" may be constructor overloads for each combination of required arguments."
msgstr ""

#: docs/android/design.md:block 119 (paragraph)
msgid ""
"{% include requirement/MAY id=\"android-params-options-ctor\" %} introduce "
"constructor overloads for each combination of required arguments (in a "
"similar manner to [required properties on model types](#model-types))."
msgstr ""

#: docs/android/design.md:block 120 (header)
msgid "Parameter Validation"
msgstr ""

#: docs/android/design.md:block 121 (paragraph)
msgid ""
"The service client will have several methods that perform requests on the "
"service. *Service parameters* are directly passed across the wire to an "
"Azure service. *Client parameters* are not passed directly to the service, "
"but used within the client library to fulfill the request. Examples of "
"client parameters include values that are used to construct a URI, or a file"
" that needs to be uploaded to storage."
msgstr ""

#: docs/android/design.md:block 122 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-params-client-validation\" %} "
"validate client parameters."
msgstr ""

#: docs/android/design.md:block 123 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-params-service-validation\" %} "
"validate service parameters. This includes null checks, empty strings, and "
"other common validating conditions. Let the service validate any request "
"parameters."
msgstr ""

#: docs/android/design.md:block 124 (paragraph)
msgid ""
"Common parameter validations include null checks, empty string checks, and "
"range checks. Let the service validate its parameters."
msgstr ""

#: docs/android/design.md:block 125 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-params-test-devex\" %} test the "
"developer experience when invalid service parameters are passed in. Ensure "
"clear error messages are generated by the client. If the developer "
"experience is inadequate, work with the service team to correct the problem."
msgstr ""

#: docs/android/design.md:block 126 (header)
msgid "Methods Returning Collections (Paging)"
msgstr ""

#: docs/android/design.md:block 127 (paragraph)
msgid ""
"Many Azure REST APIs return collections of data in batches or pages. A "
"client library will expose such APIs as special enumerable types "
"`PagedIterable<T>` or `PagedAsyncCollection<T>`, for synchronous and "
"asynchronous APIs, respectively. These types are located in the [Azure Core "
"library](#using-azure-core-types)."
msgstr ""

#: docs/android/design.md:block 128 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-pagination-pagediterable\" %} "
"return `PagedIterable<T>` from service methods in synchronous that return a "
"collection of items. For example, the configuration service **sync** client "
"should offer the following API:"
msgstr ""

#: docs/android/design.md:block 130 (paragraph)
msgid ""
"`PagedIterable` allows developers to write code that works using the "
"standard *for* loop syntax (as it is an `Iterable`), and also to work with a"
" Java `Stream` (as there is a `stream()` method). Consumers may also call "
"`streamByPage()` and `byPage()` methods to work on page boundaries. "
"Subclasses of these types are acceptable as return types too, so long as the"
" naming convention generally follows the pattern "
"`<serviceName>PagedIterable` or `<operation>PagedAsyncCollection`."
msgstr ""

#: docs/android/design.md:block 131 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-pagination-collections\" %} "
"return other collection types for sync APIs that return collections (for "
"example, do not return `List`, `Stream`, `Iterable`, or `Iterator`)."
msgstr ""

#: docs/android/design.md:block 132 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-pagination-pagedasynccollection\" "
"%} return `PagedAsyncCollection<T>` (or an appropriately-named subclass) for"
" asynchronous APIs that expose a collection of items. Even if the service "
"does not support pagination, always return `PagedAsyncCollection<T>`, as it "
"allows for consumers to retrieve response information in a consistent "
"manner."
msgstr ""

#: docs/android/design.md:block 134 (paragraph)
msgid ""
"Consumers of this API can consume individual items by treating the response "
"as a `CompletableFuture<T>`:"
msgstr ""

#: docs/android/design.md:block 136 (paragraph)
msgid "The consumer may process items page-by-page instead:"
msgstr ""

#: docs/android/design.md:block 138 (paragraph)
msgid ""
"The `PagedAsyncCollection.forEachPage()` offers an overload to accept a "
"`continuationToken` string, which will begin the returned "
"`CompletableFuture` at the page specified by this token."
msgstr ""

#: docs/android/design.md:block 139 (paragraph)
msgid ""
"{% include requirement/MAY id=\"android-pagination-subtypes\" %} subclass "
"the Azure Core paged and iterable APIs, where appropriate, to offer "
"additional, service specific API to users. If this is done, the subtype must"
" be named as it currently is, prefixed with the name of the service. For "
"example, `SearchPagedAsyncCollection` and `SearchPagedIterable`. Subtypes "
"are expected to be placed within a `util` package existing within the root "
"package."
msgstr ""

#: docs/android/design.md:block 140 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-pagination-distinct-types\" %} use "
"the same type for entities returned from a list operation vs. a get "
"operation if those operations return different views of the same result. For"
" example a list operation may provide only a minimal representation of each "
"result, with the expectation that a get operation must be performed for each"
" result to access the full representation. If the representations are "
"compatible, reuse the same type for both the list and the get operation. "
"Otherwise, it is permissible to use distinct types for each operation."
msgstr ""

#: docs/android/design.md:block 141 (paragraph)
msgid ""
"{% include important.html content=\"Services should refrain from having a "
"difference between the type of a particular entity as it exists in a list "
"versus the result of a GET request for that individual item as it makes the "
"client library's surface area simpler.\" %}"
msgstr ""

#: docs/android/design.md:block 142 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-pagination-large-get-iterator\" "
"%} expose an iterator over each individual item if getting each item "
"requires a corresponding GET request to the service. One GET per item is "
"often too expensive and so not an action we want to take on behalf of users."
msgstr ""

#: docs/android/design.md:block 143 (header)
msgid "Methods Invoking Long Running Operations"
msgstr ""

#: docs/android/design.md:block 144 (paragraph)
msgid ""
"Long-running operations are uncommon in a mobile context. If you feel like "
"you need long running operations, contact the [Azure SDK mobile "
"team](mailto:azuresdkmobileteam@microsoft.com) for advice."
msgstr ""

#: docs/android/design.md:block 145 (quote)
msgid "TODO: Expand upon why LROs are uncommon in a mobile context."
msgstr ""

#: docs/android/design.md:block 146 (header)
msgid "Conditional Request Methods"
msgstr ""

#: docs/android/design.md:block 147 (paragraph)
msgid ""
"[Conditional "
"requests](https://developer.mozilla.org/docs/Web/HTTP/Conditional_requests) "
"are normally performed using HTTP headers. The primary usage provides "
"headers that match the `ETag` to some known value. The `ETag` is an opaque "
"identifier that represents a single version of a resource. For example, "
"adding the following header will translate to \"if the record's version, "
"specified by the `ETag`, is not the same\"."
msgstr ""

#: docs/android/design.md:block 148 (paragraph)
msgid "{% highlight text %} If-Not-Match: \"etag-value\" {% endhighlight %}"
msgstr ""

#: docs/android/design.md:block 149 (paragraph)
msgid "With headers, tests are possible for the following:"
msgstr ""

#: docs/android/design.md:block 150 (unordered list)
msgid "Unconditionally (no additional headers)"
msgstr ""

#: docs/android/design.md:block 150 (unordered list)
msgid "If (not) modified since a version (`If-Match` and `If-Not-Match`)"
msgstr ""

#: docs/android/design.md:block 150 (unordered list)
msgid ""
"If (not) modified since a date (`If-Modified-Since` and `If-Unmodified-"
"Since`)"
msgstr ""

#: docs/android/design.md:block 150 (unordered list)
msgid "If (not) present (`If-Match` and `If-Not-Match` with a `ETag=*` value)"
msgstr ""

#: docs/android/design.md:block 151 (paragraph)
msgid ""
"Not all services support all of these semantics, and may not support any of "
"them. Developers have varying levels of understanding of the `ETag` and "
"conditional requests, so it is best to abstract this concept from the API "
"surface. There are two types of conditional requests we need to be concerned"
" with:"
msgstr ""

#: docs/android/design.md:block 152 (paragraph)
msgid "**Safe conditional requests** (e.g. GET)"
msgstr ""

#: docs/android/design.md:block 153 (paragraph)
msgid ""
"These are typically used to save bandwidth in an \"update cache\" scenario, "
"i.e. I have a cached value, only send me the data if what the service has is"
" newer than my copy. These return either a 200 or a 304 status code, "
"indicating the value was not modified, which tells the caller that their "
"cached value is up to date."
msgstr ""

#: docs/android/design.md:block 154 (paragraph)
msgid "**Unsafe conditional requests** (e.g. POST, PUT, or DELETE)"
msgstr ""

#: docs/android/design.md:block 155 (paragraph)
msgid ""
"These are typically used to prevent losing updates in an optimistic "
"concurrency scenario, i.e. I've modified the cached value I'm holding, but "
"don't update the service version unless it has the same copy I've got. These"
" return either a success or a 412 error status code, indicating the value "
"was modified, to indicate to the caller that they'll need to retry their "
"update if they want it to succeed."
msgstr ""

#: docs/android/design.md:block 156 (paragraph)
msgid ""
"These two cases are handled differently in client libraries. However, the "
"form of the call is the same in both cases. The signature of the method "
"should be:"
msgstr ""

#: docs/android/design.md:block 157 (paragraph)
msgid ""
"{% highlight text %} client.<method>(<item>, requestOptions) {% endhighlight"
" %}"
msgstr ""

#: docs/android/design.md:block 158 (paragraph)
msgid ""
"The `requestOptions` field provides preconditions to the HTTP request. The "
"`Etag` value will be retrieved from the item that is passed into the method "
"where possible, and method arguments where not possible. The form of the "
"method will be modified based on idiomatic usage patterns in the language of"
" choice. In cases where the `ETag` value is not known, the operation cannot "
"be conditional. If the library developer does not need to support advanced "
"usage of precondition headers, they can add a boolean parameter that is set "
"to true to establish the condition. For example, use one of the following "
"boolean names instead of the conditions operator:"
msgstr ""

#: docs/android/design.md:block 159 (unordered list)
msgid "`onlyIfChanged`"
msgstr ""

#: docs/android/design.md:block 159 (unordered list)
msgid "`onlyIfUnchanged`"
msgstr ""

#: docs/android/design.md:block 159 (unordered list)
msgid "`onlyIfMissing`"
msgstr ""

#: docs/android/design.md:block 159 (unordered list)
msgid "`onlyIfPresent`"
msgstr ""

#: docs/android/design.md:block 160 (paragraph)
msgid ""
"In all cases, the conditional expression is \"opt-in\", and the default is "
"to perform the operation unconditionally."
msgstr ""

#: docs/android/design.md:block 161 (paragraph)
msgid ""
"The return value from a conditional operation must be carefully considered. "
"For safe operators (e.g. GET), return a response that will throw if the "
"value is accessed (or follow the same convention used fro a `204 No Content`"
" response), since there is no value in the body to reference. For unsafe "
"operators (e.g. PUT, DELETE, or POST), throw a specific error when a "
"`Precondition Failed` or `Conflict` result is received. This allows the "
"consumer to do something different in the case of conflicting results."
msgstr ""

#: docs/android/design.md:block 162 (paragraph)
msgid ""
"{% include requirement/SHOULD %} accept a `conditions` parameter (which "
"takes an enumerated type) on service methods that allow a conditional check "
"on the service."
msgstr ""

#: docs/android/design.md:block 163 (paragraph)
msgid ""
"{% include requirement/SHOULD %} accept an additional boolean or enum "
"parameter on service methods as necessary to enable conditional checks using"
" `ETag`."
msgstr ""

#: docs/android/design.md:block 164 (paragraph)
msgid ""
"{% include requirement/SHOULD %} include the `ETag` field as part of the "
"object model when conditional operations are supported."
msgstr ""

#: docs/android/design.md:block 165 (paragraph)
msgid ""
"{% include requirement/SHOULDNOT %} throw an error when a `304 Not Modified`"
" response is received from the service, unless such errors are idiomatic to "
"the language."
msgstr ""

#: docs/android/design.md:block 166 (paragraph)
msgid ""
"{% include requirement/SHOULD %} throw a distinct error when a `412 "
"Precondition Failed` response or a `409 Conflict` response is received from "
"the service due to a conditional check."
msgstr ""

#: docs/android/design.md:block 167 (header)
msgid "Hierarchical Clients"
msgstr ""

#: docs/android/design.md:block 168 (quote)
msgid "TODO: Add discussion of hierarchical clients"
msgstr ""

#: docs/android/design.md:block 169 (header)
msgid "Supporting Types"
msgstr ""

#: docs/android/design.md:block 170 (header)
msgid "Model Types"
msgstr ""

#: docs/android/design.md:block 171 (paragraph)
msgid ""
"Model types are classes that developers of applications use to provide "
"required information into, or to receive information from, Azure services. "
"For example:"
msgstr ""

#: docs/android/design.md:block 173 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-models-builder\" %} offer a "
"separate builder class for model classes."
msgstr ""

#: docs/android/design.md:block 174 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-models-constructors\" %} provide "
"public constructors for all model classes that a user is allowed to "
"instantiate. Model classes that are not instantiable by the user, for "
"example if they are model types returned from the service, must not have any"
" publicly visible constructors."
msgstr ""

#: docs/android/design.md:block 175 (paragraph)
msgid ""
"Because model types can represent many different kinds of models, it is "
"important that they can correctly enforce required properties. Whilst many "
"models have no required properties, some do, and moreso, some models can "
"even support multiple mutually exclusive sets of required properties."
msgstr ""

#: docs/android/design.md:block 176 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-models-constructors-args\" %} "
"provide a no-args constructor if a model type has no required properties."
msgstr ""

#: docs/android/design.md:block 177 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-models-constructors-args-required\""
" %} provide one or more constructors with arguments, if a model type has "
"required properties. If there are multiple mutually exclusive sets of "
"supported required parameters, a constructor must be introduced for each of "
"these. For example:"
msgstr ""

#: docs/android/design.md:block 179 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-models-fluent\" %} provide a fluent"
" setter API to configure the model class, where each `set` method should "
"`return this`. This allows chaining of set operations."
msgstr ""

#: docs/android/design.md:block 180 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-models-fluent\" %} override all "
"`set` methods when extending a fluent type to return the extended type. This"
" allows chaining of `set` operations on the sub-class."
msgstr ""

#: docs/android/design.md:block 182 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-models-fluent-annotation\" %} apply"
" the `@Fluent` annotation to the class."
msgstr ""

#: docs/android/design.md:block 183 (paragraph)
msgid ""
"Fluent types must not be immutable. Don't return a new instance on each "
"setter call."
msgstr ""

#: docs/android/design.md:block 184 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-models-javabeans\" %} use the "
"JavaBean naming convention of `get*`, `set*`, and `is*`."
msgstr ""

#: docs/android/design.md:block 185 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-models-deserialize\" %} include "
"static methods if new model instances are required to be created from raw "
"data. The static method names should be `from<dataFormat>`. For example, to "
"create an instance of `BinaryData` from a string, include a static method "
"called `fromString` in `BinaryData` class."
msgstr ""

#: docs/android/design.md:block 186 (paragraph)
msgid ""
"Model types sometimes exist only as an Azure service return type, and "
"developers would never instantiate these. Often, these model types have API "
"that is not user-friendly (in particular, overly complex constructors). It "
"would be best for developers if they were never presented with this API in "
"the first place, and we refer to these as 'undesirable public API'."
msgstr ""

#: docs/android/design.md:block 187 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-models-interface\" %} put model "
"classes that are intended as service return types only, and which have "
"undesirable public API into the `.implementation.models` package. In its "
"place, an interface should be put into the public-facing `.models` package, "
"and it should be this type that is returned through the public API to end "
"users."
msgstr ""

#: docs/android/design.md:block 188 (paragraph)
msgid ""
"Examples of situations where this is applicable include when there are "
"constructors or setters on a type which receive implementation types, or "
"when a type should be immutable but needs to be mutable internally. The "
"interface should have the model type name, and the implementation (within "
"`.implementation.models`) should be named `<interfaceName>Impl`."
msgstr ""

#: docs/android/design.md:block 189 (header)
msgid "Enumerations"
msgstr ""

#: docs/android/design.md:block 190 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-enums\" %} use an `enum` for "
"parameters, properties, and return types when values are known."
msgstr ""

#: docs/android/design.md:block 191 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-naming-enum-uppercase\" %} use all "
"upper-case names for enum (and 'expandable' enum) values. `EnumType.FOO` and"
" `EnumType.TWO_WORDS` are valid, whereas `EnumType.Foo` and "
"`EnumType.twoWords` are not."
msgstr ""

#: docs/android/design.md:block 192 (paragraph)
msgid ""
"{% include requirement/MAY id=\"android-expandable-enums\" %} use the "
"`ExpandableStringEnum` type provided by Azure Core to define an enum-like "
"API that declares well-known fields but which can also contain unknown "
"values returned from the service, or user-defined values passed to the "
"service. An example expandable enum is shown below:"
msgstr ""

#: docs/android/design.md:block 194 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-enums-no-future-growth\" %} use an "
"`enum` only if the enum values are known to not change like days of a week, "
"months in a year etc."
msgstr ""

#: docs/android/design.md:block 195 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-enums-future-growth\" %} use "
"`ExpandableStringEnum` provided by Azure Core for enumerations if the values"
" are known to expand in future."
msgstr ""

#: docs/android/design.md:block 196 (header)
msgid "Using Azure Core Types"
msgstr ""

#: docs/android/design.md:block 197 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-core-types-must\" %} make use of "
"packages in Azure Core to provide behavior consistent across all Azure SDK "
"libraries. This includes, but is not limited to:"
msgstr ""

#: docs/android/design.md:block 198 (unordered list)
msgid ""
"`HttpClient`, `HttpPipeline`, `Response`, etc. for http client, pipeline and"
" related functionality."
msgstr ""

#: docs/android/design.md:block 198 (unordered list)
msgid "`ClientLogger` for logging."
msgstr ""

#: docs/android/design.md:block 198 (unordered list)
msgid ""
"`PagedIterable` and `PagedAsyncCollection` for returning paged results."
msgstr ""

#: docs/android/design.md:block 199 (paragraph)
msgid "See the [Azure Core README][Azure Core] for more details."
msgstr ""

#: docs/android/design.md:block 200 (header)
msgid "Using Primitive Types"
msgstr ""

#: docs/android/design.md:block 201 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-api-old-date-time\" %} create "
"API that exposes the old Java date library (e.g. `java.util.Date`, "
"`java.util.Calendar`, and `java.util.Timezone`), nor the newer date / time "
"APIs that shipped in JDK 8 in the `java.util.time` package. All APIs must "
"use the [ThreeTenABP Date][ThreeTenABP] APIs."
msgstr ""

#: docs/android/design.md:block 202 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-api-url\" %} create API that "
"exposes the `java.net.URL` API. This API is difficult to work with, and more"
" frequently gets in the users way rather than provide any real assistance. "
"Instead, use the String type to represent the URL. When it is necessary to "
"parse this String into a URL, and if it fails to be parsed (throwing a "
"checked `MalformedURLException`), catch this internally and throw an "
"unchecked `IllegalArgumentException` instead."
msgstr ""

#: docs/android/design.md:block 203 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-wrap-primitives\" %} wrap primitive"
" types where appropriate to represent a meaningful domain entity even if the"
" model type contains a single field. For example, a phone number is just a "
"string, but creating a new type to wrap primitive `String` type can be more "
"informative and represents a domain concept. It may also provide stronger "
"guarantees and validation than just the primitive type."
msgstr ""

#: docs/android/design.md:block 205 (header)
msgid "Using Android-compatible Java APIs"
msgstr ""

#: docs/android/design.md:block 206 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-library-java-lang\" %} write client"
" libraries in Java. This avoids forcing customers to depend on the Kotlin "
"runtime in their applications."
msgstr ""

#: docs/android/design.md:block 207 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-library-java-version\" %} write "
"client libraries using Java 8 syntax. Java 8 syntax constructs will be down-"
"leveled using [Java 8 language feature "
"desugaring](https://developer.android.com/studio/write/java8-support#supported_features)"
" provided by Android Gradle Plugin 3.0.0+. This includes use of the "
"following Java 8 language features:"
msgstr ""

#: docs/android/design.md:block 208 (unordered list)
msgid "Lambda expressions"
msgstr ""

#: docs/android/design.md:block 208 (unordered list)
msgid "Method references"
msgstr ""

#: docs/android/design.md:block 208 (unordered list)
msgid "Type annotations (except `TYPE_USE` and `TYPE_PARAMETER`)"
msgstr ""

#: docs/android/design.md:block 208 (unordered list)
msgid "Default and static interface methods"
msgstr ""

#: docs/android/design.md:block 208 (unordered list)
msgid "Repeating annotations"
msgstr ""

#: docs/android/design.md:block 209 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-library-java-api\" %} use Java "
"8+ APIs. Some such APIs are able to be down-leveled using [Java 8+ API "
"desugaring](https://developer.android.com/studio/write/java8-support#library-"
"desugaring) provided by Android Gradle Plugin 4.0.0+. However many "
"developers may not be using a sufficiently updated version of the plugin, "
"and library desugaring injects additional code into the customer's "
"application, potentially increasing the APK size or method count. This "
"includes use of the following Java 8+ APIs:"
msgstr ""

#: docs/android/design.md:block 210 (unordered list)
msgid "Sequential streams (`java.util.stream`)"
msgstr ""

#: docs/android/design.md:block 210 (unordered list)
msgid "`java.time`"
msgstr ""

#: docs/android/design.md:block 210 (unordered list)
msgid "`java.util.function`"
msgstr ""

#: docs/android/design.md:block 210 (unordered list)
msgid "Java 8+ additions to `java.util.{Map,Collection,Comparator}`"
msgstr ""

#: docs/android/design.md:block 210 (unordered list)
msgid ""
"Optionals (`java.util.Optional`, `java.util.OptionalInt` and "
"`java.util.OptionalDouble`)"
msgstr ""

#: docs/android/design.md:block 210 (unordered list)
msgid ""
"Java 8+ additions to `java.util.concurrent.atomic` (new methods on "
"`AtomicInteger`, `AtomicLong` and `AtomicReference`)"
msgstr ""

#: docs/android/design.md:block 210 (unordered list)
msgid "`ConcurrentHashMap`"
msgstr ""

#: docs/android/design.md:block 211 (header)
msgid "Exceptions"
msgstr ""

#: docs/android/design.md:block 212 (paragraph)
msgid ""
"Error handling is an important aspect of implementing a client library. It "
"is the primary method by which problems are communicated to the consumer. We"
" convey errors to developers by throwing appropriate exceptions from our "
"service methods."
msgstr ""

#: docs/android/design.md:block 213 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-errors-http-request-failed\" %} "
"throw an exception when any HTTP request fails with an HTTP status code that"
" is not defined by the service/Swagger as a successful status code."
msgstr ""

#: docs/android/design.md:block 214 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-errors-unchecked-exceptions\" %} "
"use unchecked exceptions. Java offers checked and unchecked exceptions, "
"where checked exceptions force the user to introduce verbose `try ... catch`"
" code blocks and handle each specified exception. Unchecked exceptions avoid"
" verbosity and improve scalability issues inherent with checked exceptions "
"in large apps."
msgstr ""

#: docs/android/design.md:block 215 (paragraph)
msgid ""
"In the case of a higher-level method that produces multiple HTTP requests, "
"either the last exception or an aggregate exception of all failures should "
"be produced."
msgstr ""

#: docs/android/design.md:block 216 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-errors-standard-types\" %} use the "
"following standard Java exceptions for pre-condition checking:"
msgstr ""

#: docs/android/design.md:block 217 (table)
msgid "Exception"
msgstr ""

#: docs/android/design.md:block 217 (table)
msgid "When to use"
msgstr ""

#: docs/android/design.md:block 217 (table)
msgid "`IllegalArgumentException`"
msgstr ""

#: docs/android/design.md:block 217 (table)
msgid "When a method argument is non-null, but inappropriate"
msgstr ""

#: docs/android/design.md:block 217 (table)
msgid "`IllegalStateException`"
msgstr ""

#: docs/android/design.md:block 217 (table)
msgid "When the object state means method invocation can't continue"
msgstr ""

#: docs/android/design.md:block 217 (table)
msgid "`NullPointerException`"
msgstr ""

#: docs/android/design.md:block 217 (table)
msgid "When a method argument is `null` and `null` is unexpected"
msgstr ""

#: docs/android/design.md:block 217 (table)
msgid "`UnsupportedOperationException`"
msgstr ""

#: docs/android/design.md:block 217 (table)
msgid "When an object doesn't support method invocation"
msgstr ""

#: docs/android/design.md:block 218 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-errors-no-new-errors\" %} create"
" a new error type when a language-specific error type will suffice."
msgstr ""

#: docs/android/design.md:block 219 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-errors-document-all\" %} specify "
"all checked and unchecked exceptions thrown in a method within the JavaDoc "
"documentation on the method as `@throws` statements."
msgstr ""

#: docs/android/design.md:block 220 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-errors-exception-tree\" %} use the "
"existing exception types present in the Azure Core library for service "
"request failures. Avoid creating new exception types. The following list "
"outlines all available exception types (with indentation indicating "
"exception type hierarchy):"
msgstr ""

#: docs/android/design.md:block 221 (unordered list)
msgid "`AzureException`: Never use directly. Throw a more specific subtype."
msgstr ""

#: docs/android/design.md:block 221 (unordered list)
msgid ""
"`HttpResponseException`: Thrown when an unsuccessful response is received "
"with http status code (e.g. 3XX, 4XX, 5XX) from the service request."
msgstr ""

#: docs/android/design.md:block 221 (unordered list)
msgid ""
"`ClientAuthenticationException`: Thrown when there's a failure to "
"authenticate against the service."
msgstr ""

#: docs/android/design.md:block 221 (unordered list)
msgid ""
"`DecodeException`: Thrown when there's an error during response "
"deserialization."
msgstr ""

#: docs/android/design.md:block 221 (unordered list)
msgid ""
"`ResourceExistsException`: Thrown when an HTTP request tried to create an "
"already existing resource."
msgstr ""

#: docs/android/design.md:block 221 (unordered list)
msgid ""
"`ResourceModifiedException`: Thrown for invalid resource modification with "
"status code of 4XX, typically 412 Conflict."
msgstr ""

#: docs/android/design.md:block 221 (unordered list)
msgid ""
"`ResourceNotFoundException`: Thrown when a resource is not found, typically "
"triggered by a 412 response (for PUT) or 404 (for GET/POST)."
msgstr ""

#: docs/android/design.md:block 221 (unordered list)
msgid ""
"`TooManyRedirectsException`: Thrown when an HTTP request has reached the "
"maximum number of redirect attempts."
msgstr ""

#: docs/android/design.md:block 221 (unordered list)
msgid ""
"`ServiceResponseException`: Thrown when the request was sent to the service,"
" but the client library wasn't able to understand the response."
msgstr ""

#: docs/android/design.md:block 221 (unordered list)
msgid ""
"`ServiceRequestException`: Thrown for an invalid response with custom error "
"information."
msgstr ""

#: docs/android/design.md:block 222 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-errors-new-exceptions\" %} extend "
"from one of the above exceptions defined in Azure Core when defining a new "
"service-specific exception. Do not extend from `RuntimeException` directly."
msgstr ""

#: docs/android/design.md:block 223 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-errors-exception-public\" %} define"
" exception type in a public package if the exception is thrown from a public"
" API. Do not throw an exception that is defined as package-private or is "
"defined in `implementation` package."
msgstr ""

#: docs/android/design.md:block 224 (header)
msgid "Authentication"
msgstr ""

#: docs/android/design.md:block 225 (paragraph)
msgid ""
"Azure services use a variety of different authentication schemes to allow "
"clients to access the service. Conceptually, there are two entities "
"responsible in this process: a credential and an authentication policy. "
"Credentials provide confidential authentication data. Authentication "
"policies use the data provided by a credential to authenticate requests to "
"the service."
msgstr ""

#: docs/android/design.md:block 226 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-auth-fluent-builder\" %} provide "
"service client fluent builder APIs that accept an instance of the "
"appropriate Azure Core credential abstraction, namely `TokenCredential`, "
"`BasicAuthenticationCredential`, or `AzureKeyCredential`."
msgstr ""

#: docs/android/design.md:block 227 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-auth-support\" %} support all "
"authentication techniques that the service supports and that make sense in a"
" mobile context. Service principal authentication generally does not make "
"sense, for example."
msgstr ""

#: docs/android/design.md:block 228 (quote)
msgid ""
"TODO: Determine what are the supported authentication scenarios, which "
"credential types will represent them and where will said types reside (Azure"
" Core, Azure Identity, etc.)"
msgstr ""

#: docs/android/design.md:block 229 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-auth-no-token-persistence\" %} "
"persist, cache, or reuse security credentials. Security credentials should "
"be considered short lived to cover both security concerns and credential "
"refresh situations."
msgstr ""

#: docs/android/design.md:block 230 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-auth-azure-core\" %} use "
"authentication policy implementations from the Azure Core library where "
"available."
msgstr ""

#: docs/android/design.md:block 231 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-auth-provide-credential-types\" %} "
"define a public custom credential type which enables clients to authenticate"
" requests using the custom scheme."
msgstr ""

#: docs/android/design.md:block 232 (paragraph)
msgid ""
"{% include requirement/SHOULDNOT id=\"android-auth-credential-type-base\" %}"
" define custom credential types extending or implementing abstractions from "
"Azure Core."
msgstr ""

#: docs/android/design.md:block 233 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-auth-credential\" %} provide "
"credential types that can be used to fetch all data needed to authenticate a"
" request to the service. If using a service-specific credential type, the "
"implementation must be non-blocking and atomic."
msgstr ""

#: docs/android/design.md:block 234 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-auth-credential-type-placement\" %}"
" define custom credential types in the same namespace and package as the "
"client, or in a service group namespace and shared package, not in Azure "
"Core or Azure Identity."
msgstr ""

#: docs/android/design.md:block 235 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-auth-credential-type-prefix\" %} "
"prepend custom credential type names with the service name or service group "
"name to provide clear context to its intended scope and usage."
msgstr ""

#: docs/android/design.md:block 236 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-auth-credential-type-suffix\" %} "
"append `Credential` to the end of the custom credential type name. Note this"
" must be singular, not plural."
msgstr ""

#: docs/android/design.md:block 237 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-auth-provide-credential-"
"constructor\" %} define a constructor or factory for the custom credential "
"type which takes in ALL data needed for the custom authentication protocol."
msgstr ""

#: docs/android/design.md:block 238 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-auth-provide-update-method\" %} "
"define an update method which accepts all mutable credential data, and "
"updates the credential in an atomic, thread safe manner."
msgstr ""

#: docs/android/design.md:block 239 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-auth-credential-set-properties\""
" %} define public settable properties or fields which allow users to update "
"the authentication data directly in a non-atomic manner."
msgstr ""

#: docs/android/design.md:block 240 (paragraph)
msgid ""
"{% include requirement/SHOULDNOT id=\"android-auth-credential-get-"
"properties\" %} define public properties or fields which allow users to "
"access the authentication data directly. They are most often not needed by "
"end users, and are difficult to use in a thread safe manner. In the case "
"that exposing the authentication data is necessary, all the data needed to "
"authenticate requests should be returned from a single API which guarantees "
"the data returned is in a consistent state."
msgstr ""

#: docs/android/design.md:block 241 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-auth-provide-client-constructor\" "
"%} provide service client constructors or factories that accept all "
"supported credential types."
msgstr ""

#: docs/android/design.md:block 242 (paragraph)
msgid ""
"Client libraries may support providing credential data via a connection "
"string **ONLY IF** the service provides a connection string to users via the"
" portal or other tooling. Connection strings are generally good for getting "
"started as they are easily integrated into an application by copy/paste from"
" the portal. However, connection strings are considered a lesser form of "
"authentication because the credentials cannot be rotated within a running "
"process."
msgstr ""

#: docs/android/design.md:block 243 (paragraph)
msgid ""
"{% include requirement/MAY id=\"android-auth-connection-strings\"%} provide "
"a service client initializer that accepts a connection string if "
"appropriate. The connection string must be provided as the first parameter "
"to the initializer and must be named `connectionString`. When supporting "
"connection strings, the documentation must include a warning that building "
"credentials such as connection strings into a consumer-facing application is"
" inherently insecure."
msgstr ""

#: docs/android/design.md:block 244 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-auth-connection-strings-only\" "
"%} support initializing a service client with a connection string unless "
"such connection string is available within tooling (for copy/paste "
"operations)."
msgstr ""

#: docs/android/design.md:block 245 (paragraph)
msgid ""
"{% include requirement/SHOULDNOT id=\"android-auth-no-connection-strings-"
"embedded\" %} support connection strings with embedded secrets. Android apps"
" are not cryptographically secure and may be distributed to millions of "
"devices. A developer should assume that any credential placed in an Android "
"app is compromised."
msgstr ""

#: docs/android/design.md:block 246 (paragraph)
msgid ""
"When implementing authentication, don't open up the consumer to security "
"holes like PII (personally identifiable information) leakage or credential "
"leakage. Credentials are generally issued with a time limit, and must be "
"refreshed periodically to ensure that the service connection continues to "
"function as expected. Ensure your client library follows all current "
"security recommendations and consider an independent security review of the "
"client library to ensure you're not introducing potential security problems "
"for the consumer."
msgstr ""

#: docs/android/design.md:block 247 (paragraph)
msgid ""
"If your service implements a non-standard credential system (that is, a "
"credential system that is not supported by Azure Core), then you need to "
"produce an authentication policy for the HTTP pipeline that can authenticate"
" requests given the alternative credential types provided by the client "
"library."
msgstr ""

#: docs/android/design.md:block 248 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-auth-policy\" %} provide a suitable"
" authentication policy that authenticates the HTTP request in the HTTP "
"pipeline when using non-standard credentials."
msgstr ""

#: docs/android/design.md:block 249 (header)
msgid "Namespaces"
msgstr ""

#: docs/android/design.md:block 250 (paragraph)
msgid ""
"Java uses packages to group related types. Grouping services within a cloud "
"infrastructure is common since it aids discoverability and provides "
"structure to the reference documentation."
msgstr ""

#: docs/android/design.md:block 251 (paragraph)
msgid ""
"In Java, the namespace should be named "
"`com.azure.android.<group>.<service>[.<feature>]`. All consumer-facing APIs "
"that are commonly used should exist within this package structure. Here:"
msgstr ""

#: docs/android/design.md:block 252 (unordered list)
msgid "`<group>` is the group for the service (see the list above)"
msgstr ""

#: docs/android/design.md:block 252 (unordered list)
msgid "`<service>` is the service name represented as a single word"
msgstr ""

#: docs/android/design.md:block 252 (unordered list)
msgid ""
"`<feature>` is an optional subpackage to break services into separate "
"components (for example, storage may have `.blob`, `.files`, and `.queues`)"
msgstr ""

#: docs/android/design.md:block 253 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-namespaces-prefix\" %} start the "
"package with `com.azure.android` to indicate an Azure client library for "
"Android."
msgstr ""

#: docs/android/design.md:block 254 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-namespaces-format\" %} construct "
"the package name with all lowercase letters (no camel case is allowed), "
"without spaces, hyphens, or underscores. For example, Azure Key Vault would "
"be in `com.azure.android.security.keyvault` - note that the two words 'Key' "
"and 'Vault' are brought together to `keyvault`, instead of `keyVault`, "
"`key_vault`, or `key-vault`. It may further be shortened if the shortened "
"version is well-known in the community. For example, \"Azure Media "
"Analytics\" would have a compressed service name of `mediaanalytics`, and "
"\"Azure Service Bus\" would become `servicebus`."
msgstr ""

#: docs/android/design.md:block 255 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-namespaces-package-name\" %} pick a"
" package name that allows the consumer to tie the package to the service "
"being used. The package does **NOT** change when the branding of the product"
" changes. Avoid the use of marketing names that may change."
msgstr ""

#: docs/android/design.md:block 256 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-namespaces-approved-list\" %} use "
"the following list as the group of services:"
msgstr ""

#: docs/android/design.md:block 257 (paragraph)
msgid "{% include tables/data_namespaces.md %}"
msgstr ""

#: docs/android/design.md:block 258 (paragraph)
msgid ""
"If the client library does not seem to fit into the group list, contact the "
"[Architecture Board] to discuss the namespace requirements."
msgstr ""

#: docs/android/design.md:block 259 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-namespaces-management\" %} place "
"the management (Azure Resource Manager) API in the `management` group. Use "
"the grouping `<AZURE>.resourcemanager.<group>.<service>` for the namespace. "
"We do not expect many management APIs for Android, so this should be "
"uncommon."
msgstr ""

#: docs/android/design.md:block 260 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-namespaces-ambiguity\" %} choose"
" similar names for clients that do different things."
msgstr ""

#: docs/android/design.md:block 261 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-namespaces-registration\" %} "
"register the chosen namespace with the [Architecture Board]. Open an issue "
"to request the namespace. See [the registered namespace "
"list](registered_namespaces.html) for a list of the currently registered "
"namespaces."
msgstr ""

#: docs/android/design.md:block 262 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-namespaces-implementation\" %} "
"allow implementation code (that is, code that doesn't form part of the "
"public API) to be mistaken as public API. There are two valid arrangements "
"for implementation code:"
msgstr ""

#: docs/android/design.md:block 263 (ordered list)
msgid ""
"Implementation classes can be placed within a subpackage named "
"`implementation`."
msgstr ""

#: docs/android/design.md:block 263 (ordered list)
msgid ""
"Implementation classes can be made package-private and placed within the "
"same package as the consuming class."
msgstr ""

#: docs/android/design.md:block 264 (paragraph)
msgid ""
"CheckStyle checks ensure that classes within an `implementation` package "
"aren't exposed through public API."
msgstr ""

#: docs/android/design.md:block 265 (header)
msgid "Example Namespaces"
msgstr ""

#: docs/android/design.md:block 266 (paragraph)
msgid "Here are some examples of namespaces that meet these guidelines:"
msgstr ""

#: docs/android/design.md:block 267 (unordered list)
msgid "`com.azure.android.data.cosmos`"
msgstr ""

#: docs/android/design.md:block 267 (unordered list)
msgid "`com.azure.android.communication.common`"
msgstr ""

#: docs/android/design.md:block 267 (unordered list)
msgid "`com.azure.android.storage.blob`"
msgstr ""

#: docs/android/design.md:block 268 (paragraph)
msgid "Here are some namespaces that do not meet the guidelines:"
msgstr ""

#: docs/android/design.md:block 269 (unordered list)
msgid ""
"`com.microsoft.azure.cosmosdb` (not in the `com.azure.android` namespace and"
" does not use grouping)"
msgstr ""

#: docs/android/design.md:block 269 (unordered list)
msgid ""
"`com.azure.identity.activedirectory` (not in the `com.azure.android` "
"namespace)"
msgstr ""

#: docs/android/design.md:block 269 (unordered list)
msgid ""
"`com.azure.mixedreality.kinect` (the grouping is not in the approved list)"
msgstr ""

#: docs/android/design.md:block 270 (header)
msgid "Support for Mocking"
msgstr ""

#: docs/android/design.md:block 271 (paragraph)
msgid ""
"All client libraries must support mocking to enable non-live testing of "
"service clients by customers. One of the key things we want to support is to"
" allow consumers of the library to easily write repeatable unit-tests for "
"their applications without activating a service. This allows them to "
"reliably and quickly test their code without worrying about the vagaries of "
"the underlying service implementation (including, for example, network "
"conditions or service outages). Mocking is also helpful to simulate "
"failures, edge cases, and hard to reproduce situations (for example: does "
"code work on February 29th)."
msgstr ""

#: docs/android/design.md:block 272 (paragraph)
msgid ""
"Below is an example of writing a mock unit test using the [Mockito "
"framework][Mockito]. For more details on using Mockito in the context of the"
" Azure SDK for Android, refer to the [unit testing][Unit testing wiki] wiki "
"documentation."
msgstr ""

#: docs/android/design.md:block 273 (quote)
msgid "TODO: Replace Java wiki entry for unit testing with one for Android."
msgstr ""

#: docs/android/design.md:block 275 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-testing-stub-os\" %} encapsulate "
"access to Android OS APIs by way of an intermediate interface. This allows "
"the runtime implementation to be swapped out for a test implementation in "
"unit tests."
msgstr ""

#: docs/android/design.md:block 276 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-mocking\" %} support mocking to "
"enable non-live testing of service clients (and by extension also model "
"types, option types, etc) by customers."
msgstr ""

#: docs/android/design.md:block 277 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-mocking-io\" %} support mocking of "
"all IO operations (including network and file operations)."
msgstr ""

#: docs/android/design.md:block 278 (header)
msgid "Azure SDK Library Design"
msgstr ""

#: docs/android/design.md:block 279 (header)
msgid "Supported Platforms"
msgstr ""

#: docs/android/design.md:block 280 (paragraph)
msgid ""
"Android developers need to concern themselves with the runtime environment "
"they are running in. The Android ecosystem is very fragmented, meaning that "
"multiple versions and form factors are prevalent."
msgstr ""

#: docs/android/design.md:block 281 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"android-library-support\" %} support all "
"versions of Android starting with API level 15 (Ice Cream Sandwich)."
msgstr ""

#: docs/android/design.md:block 283 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-java8-support\" %} support Java 8 "
"language features that do not require "
"[desugaring](https://developer.android.com/studio/write/java8-support#library-"
"desugaring) to work on older Android versions. For more information on the "
"list of supported language features, please refer [Use Java 8 language "
"features and "
"APIs](https://developer.android.com/studio/write/java8-support#supported_features)."
msgstr ""

#: docs/android/design.md:block 284 (header)
msgid "Packaging"
msgstr ""

#: docs/android/design.md:block 285 (header)
msgid "Gradle and Android Studio"
msgstr ""

#: docs/android/design.md:block 286 (paragraph)
msgid ""
"All client libraries for Android standardize on the Gradle build tooling for"
" build and dependency management. This section details the standard "
"configuration that must be used in all client libraries."
msgstr ""

#: docs/android/design.md:block 287 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-build-gradle\" %} ship a "
"`build.gradle` file for each client library, or for each module within that "
"client library (e.g. Storage might have one each for blob, queue, and file)."
msgstr ""

#: docs/android/design.md:block 288 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-manifest-package-suffix\" %} "
"specify the `package` in the package's `AndroidManifest.xml` to use the "
"prefix `com.azure.android`."
msgstr ""

#: docs/android/design.md:block 289 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-manifest-package-name\" %} name "
"Android library modules to be of the form `azure-<group>-<service>`, for "
"example, `azure-storage-blob`. In cases where the client library has "
"multiple children modules, set the root module name to be of the form "
"`azure-<group>-<service>-parent`."
msgstr ""

#: docs/android/design.md:block 290 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-gradle-name\" %} specify the "
"`ext.publishName` element to take the form `Microsoft Azure Android client "
"library for <service name>`."
msgstr ""

#: docs/android/design.md:block 291 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-gradle-description\" %} specify the"
" `description` element to be a slightly longer statement along the lines of "
"`This package contains the Microsoft Azure <service> client library`."
msgstr ""

#: docs/android/design.md:block 292 (header)
msgid "Service-Specific Common Libraries"
msgstr ""

#: docs/android/design.md:block 293 (paragraph)
msgid ""
"There are occasions when common code needs to be shared between several "
"client libraries. For example, a set of cooperating client libraries may "
"wish to share a set of exceptions or models."
msgstr ""

#: docs/android/design.md:block 294 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-commonlib-approval\" %} gain "
"[Architecture Board] approval prior to implementing a common library."
msgstr ""

#: docs/android/design.md:block 295 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-commonlib-minimize-code\" %} "
"minimize the code within a common library. Code within the common library is"
" available to the consumer of the client library and shared by multiple "
"client libraries within the same namespace."
msgstr ""

#: docs/android/design.md:block 296 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-commonlib-namespace\" %} store the "
"common library in the same namespace as the associated client libraries."
msgstr ""

#: docs/android/design.md:block 297 (paragraph)
msgid ""
"The common library should use the `common` suffix. For example, if Azure "
"Storage has a common library, it would be called `azure-storage-common`."
msgstr ""

#: docs/android/design.md:block 298 (paragraph)
msgid "A common library will only be approved if:"
msgstr ""

#: docs/android/design.md:block 299 (unordered list)
msgid ""
"The consumer of the non-shared library will consume the objects within the "
"common library directly, AND"
msgstr ""

#: docs/android/design.md:block 299 (unordered list)
msgid "The information will be shared between multiple client libraries."
msgstr ""

#: docs/android/design.md:block 300 (paragraph)
msgid "Let's take two examples:"
msgstr ""

#: docs/android/design.md:block 301 (ordered list)
msgid ""
"Implementing two Cognitive Services client libraries, we find a model is "
"required that is produced by one Cognitive Services client library and "
"consumed by another Cognitive Services client library, or the same model is "
"produced by two client libraries. The consumer is required to do the passing"
" of the model in their code, or may need to compare the model produced by "
"one client library vs. that produced by another client library. This is a "
"good candidate for choosing a common library."
msgstr ""

#: docs/android/design.md:block 301 (ordered list)
msgid ""
"Two Cognitive Services client libraries throw an `ObjectNotFound` exception "
"to indicate that an object was not detected in an image. The user might trap"
" the exception, but otherwise will not operate on the exception. There is no"
" linkage between the `ObjectNotFound` exception in each client library. This"
" is not a good candidate for creation of a common library (although you may "
"wish to place this exception in a common library if one exists for the "
"namespace already). Instead, produce two different exceptions - one in each "
"client library."
msgstr ""

#: docs/android/design.md:block 302 (header)
msgid "Versioning"
msgstr ""

#: docs/android/design.md:block 303 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-versioning-backwards-"
"compatibility\" %} be 100% backwards compatible with older versions of the "
"same package."
msgstr ""

#: docs/android/design.md:block 304 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-versioning-highest-api\" %} call "
"the highest supported service API version by default."
msgstr ""

#: docs/android/design.md:block 305 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-versioning-select-api-version\" %} "
"allow the consumer to explicitly select a supported service API version when"
" instantiating the service client, by using the service client builder with "
"a property called `serviceVersion`. This method must take a type "
"implementing the `ServiceVersion` interface, named specifically for the "
"service, but as generally as possible. For example, `IdentityServiceVersion`"
" for Identity. For a service with multiple sub-services, such as Storage, if"
" the services all share a common versioning system, `StorageServiceVersion` "
"would suffice. If they did not, it would be necessary to have separate "
"`BlobServiceVersion`, `QueueServiceVersion`, and `FileServiceVersion` enums."
msgstr ""

#: docs/android/design.md:block 306 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-versioning-enum-latest\" %} offer a"
" `getLatest()` method on the enum that returns the latest service version. "
"If a consumer doesn't specify a service version, the builder will call "
"`getLatest()` to obtain the appropriate service version."
msgstr ""

#: docs/android/design.md:block 307 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-versioning-enum-value-naming\" %} "
"use the version naming used by the service itself in naming the version "
"values in the enum. The standard approach takes the form "
"`V<year>_<month>_<day>`, such as `V2019_05_09`. Being consistent with the "
"service naming enables easier cross-referencing between service versions and"
" the availability of features in the client library."
msgstr ""

#: docs/android/design.md:block 308 (paragraph)
msgid ""
"{% include note.html content=\"Third-party reusable libraries shouldn't "
"change behavior without an explicit decision by the developer. When "
"developing libraries that are based on the Azure SDK, lock the library to a "
"specific service version to avoid changes in behavior.\" %}"
msgstr ""

#: docs/android/design.md:block 309 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-versioning-new-package\" %} "
"introduce a new library (with new library names, new package names, and new "
"type names) if you must do an API breaking change."
msgstr ""

#: docs/android/design.md:block 310 (paragraph)
msgid ""
"Breaking changes should happen rarely, if ever. Register your intent to do a"
" breaking change with the [Architecture Board]. You'll need to have a "
"discussion with the language architect before approval."
msgstr ""

#: docs/android/design.md:block 311 (header)
msgid "Client Version Numbers"
msgstr ""

#: docs/android/design.md:block 312 (paragraph)
msgid ""
"A consistent version number scheme allows consumers to determine what to "
"expect from a new version of the library."
msgstr ""

#: docs/android/design.md:block 313 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-version-semver\" %} use "
"*MAJOR*.*MINOR*.*PATCH* format for the library version."
msgstr ""

#: docs/android/design.md:block 314 (paragraph)
msgid ""
"Use `-beta.N` suffix for beta package versions. For example, `1.0.0-beta.2`."
msgstr ""

#: docs/android/design.md:block 315 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-version-change-on-release\" %} "
"change the version number of the client library when **ANYTHING** changes in"
" the client library."
msgstr ""

#: docs/android/design.md:block 316 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-version-patching\" %} increment the"
" patch version when fixing a bug."
msgstr ""

#: docs/android/design.md:block 317 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-version-features-in-patch\" %} "
"include new APIs in a patch release."
msgstr ""

#: docs/android/design.md:block 318 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-version-add-feature\" %} increment "
"the major or minor version when adding support for a service API version."
msgstr ""

#: docs/android/design.md:block 319 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-version-add-api\" %} increment the "
"major or minor version when adding a new method to the public API."
msgstr ""

#: docs/android/design.md:block 320 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"android-version-major-changes\" %} "
"increment the major version when making large feature changes."
msgstr ""

#: docs/android/design.md:block 321 (header)
msgid "Dependencies"
msgstr ""

#: docs/android/design.md:block 322 (paragraph)
msgid ""
"Dependencies bring in many considerations that are often easily avoided by "
"avoiding the dependency."
msgstr ""

#: docs/android/design.md:block 323 (unordered list)
msgid ""
"**Versioning** - Many programming languages do not allow a consumer to load "
"multiple versions of the same package. So, if we have an client library that"
" requires `v3` of package `Foo` and the consumer wants to use `v5` of "
"package `Foo`, then the consumer cannot build their application. This means "
"that client libraries should not have dependencies by default."
msgstr ""

#: docs/android/design.md:block 323 (unordered list)
msgid ""
"**Size** - Consumer applications for mobile devices must be lightweight. "
"Removing additional code (like dependencies) reduces the size."
msgstr ""

#: docs/android/design.md:block 323 (unordered list)
msgid ""
"**Licensing** - You must be conscious of the licensing restrictions of a "
"dependency and often provide proper attribution and notices when using them."
msgstr ""

#: docs/android/design.md:block 323 (unordered list)
msgid ""
"**Compatibility** - Often times you do not control a dependency and it may "
"choose to evolve in a direction that is incompatible with your original use."
msgstr ""

#: docs/android/design.md:block 323 (unordered list)
msgid ""
"**Security** - If a security vulnerability is discovered in a dependency, it"
" may be difficult or time consuming to get the vulnerability corrected if "
"Microsoft does not control the dependency's code base."
msgstr ""

#: docs/android/design.md:block 324 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-dependencies-azure-core\" %} depend"
" on the Android Azure Core (`com.azure.android.core`) library for "
"functionality that is common across all client libraries. This library "
"includes APIs for HTTP connectivity, global configuration, logging, and "
"credential handling."
msgstr ""

#: docs/android/design.md:block 325 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-dependencies-approved\" %} be "
"dependent on any other packages within the client library distribution "
"package, with the exception of the following:"
msgstr ""

#: docs/android/design.md:block 326 (paragraph)
msgid "{% include_relative approved_dependencies.md %}"
msgstr ""

#: docs/android/design.md:block 327 (paragraph)
msgid ""
"Dependency versions are purposefully not specified in this table. The "
"definitive source for the dependency versions being used in all client "
"libraries will be [published in a separate document that is generated from "
"the azure-sdk-for-android code repository][Approved dependencies]. "
"Transitive dependencies of these libraries, or dependencies that are part of"
" a family of dependencies, are allowed."
msgstr ""

#: docs/android/design.md:block 328 (quote)
msgid ""
"TODO: Generate a definitive list of dependencies from the Android "
"repository."
msgstr ""

#: docs/android/design.md:block 329 (quote)
msgid ""
"TODO: We should have a guideline around use of AndroidX libraries. Or if "
"they're treated the same as other external dependencies we should add them "
"to the approved dependencies list."
msgstr ""

#: docs/android/design.md:block 330 (quote)
msgid ""
"TODO: Add a link to dependency whitelist. Also mention about transitive "
"dependencies of those dependencies."
msgstr ""

#: docs/android/design.md:block 331 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-dependencies-archboard\" %} "
"introduce new dependencies on third-party libraries that are already "
"referenced from the top level `build.gradle` file, without first discussing "
"with the [Architecture Board]."
msgstr ""

#: docs/android/design.md:block 332 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-dependencies-versions\" %} "
"specify or change dependency versions in your client library Gradle file. "
"All dependency versioning must be centralized through the common parent "
"`build.gradle` file."
msgstr ""

#: docs/android/design.md:block 333 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-dependencies-snapshot\" %} "
"include dependencies on pre-released or beta versions of external libraries."
" All dependencies must be approved for general use."
msgstr ""

#: docs/android/design.md:block 334 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"android-dependencies-vendoring\" %} "
"consider copying or linking required code into the client library in order "
"to avoid taking a dependency on another package that could conflict with the"
" ecosystem. Make sure that you are not violating any licensing agreements "
"and consider the maintenance that will be required of the duplicated code. "
"[\"A little copying is better than a little dependency\"][1] (YouTube)."
msgstr ""

#: docs/android/design.md:block 335 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-dependencies-concrete\" %} "
"depend on concrete logging, dependency injection, or configuration "
"technologies (except as implemented in the Azure Core library). The client "
"library will be used in applications that might be using the logging, DI, "
"and configuration technologies of their choice."
msgstr ""

#: docs/android/design.md:block 336 (header)
msgid "Native code"
msgstr ""

#: docs/android/design.md:block 337 (paragraph)
msgid ""
"Native code plugins cause compatibility issues and require additional "
"scrutiny. Certain languages compile to a machine-native format (for example,"
" C or C++), whereas most modern languages opt to compile to an intermediary "
"format to aid in cross-platform support."
msgstr ""

#: docs/android/design.md:block 338 (paragraph)
msgid ""
"{% include requirement/SHOULDNOT id=\"android-no-native-code\" %} write "
"platform-specific / native code. If you feel like you need to include native"
" binaries in your library, contact the [Azure SDK mobile "
"team](mailto:azuresdkmobileteam@microsoft.com) for advice."
msgstr ""

#: docs/android/design.md:block 339 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-native-code-arch\" %} include "
"binaries for all common Android architectures if your library includes "
"platform-specific / native code. You should only include such native code in"
" the Android library if:"
msgstr ""

#: docs/android/design.md:block 340 (unordered list)
msgid ""
"You distribute full source and it is compiled in the context of the customer"
" code."
msgstr ""

#: docs/android/design.md:block 340 (unordered list)
msgid "You hide the implementation code behind a Java-based facade."
msgstr ""

#: docs/android/design.md:block 340 (unordered list)
msgid ""
"You are doing so for performance reasons. No other reason is acceptable."
msgstr ""

#: docs/android/design.md:block 341 (quote)
msgid ""
"TODO: Develop and significantly expand upon our guidance for libraries with "
"native (C/C++) code"
msgstr ""

#: docs/android/design.md:block 342 (header)
msgid "Documentation"
msgstr ""

#: docs/android/design.md:block 343 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-javadoc-build\" %} ensure that "
"anybody can clone the repo containing the client library and generate the "
"full and complete JavaDoc output for the code, without any need for "
"additional processing steps."
msgstr ""

#: docs/android/design.md:block 344 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-javadoc-full-docs\" %} include "
"descriptive text of the method, as well as all parameters, the returned "
"value (if any), all checked exceptions, as well as all unchecked exceptions."
" Failing to document unchecked exceptions means that users do not have any "
"indication of how they can handle exceptional circumstances."
msgstr ""

#: docs/android/design.md:block 345 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-javadoc-samples\" %} include code "
"samples in all class-level JavaDoc, and in relevant method-level JavaDoc."
msgstr ""

#: docs/android/design.md:block 346 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-javadoc-hard-coding\" %} hard-"
"code the sample within the JavaDoc (where it may become stale). Put code "
"samples in `/src/samples/java` and use the available tooling to reference "
"them."
msgstr ""

#: docs/android/design.md:block 347 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-javadoc-naming-samples\" %} follow "
"the naming convention outlined below for naming samples tags:"
msgstr ""

#: docs/android/design.md:block 348 (unordered list)
msgid ""
"If a new instance of the class is created through build() method of a "
"builder or through constructor: `<packagename>.<classname>.instantiation`"
msgstr ""

#: docs/android/design.md:block 348 (unordered list)
msgid ""
"For other methods in the class: `<packagename>.<classname>.<methodName>`"
msgstr ""

#: docs/android/design.md:block 348 (unordered list)
msgid ""
"For overloaded methods, or methods with arguments: "
"`<packagename>.<classname>.<methodName>#<argType1>-<argType2>`"
msgstr ""

#: docs/android/design.md:block 348 (unordered list)
msgid ""
"Camel casing for the method name and argument types is valid, but not "
"required."
msgstr ""

#: docs/android/design.md:block 349 (header)
msgid "Repository Guidelines"
msgstr ""

#: docs/android/design.md:block 351 (header)
msgid "General guidelines"
msgstr ""

#: docs/android/design.md:block 352 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-docs-content-dev\" %} include your "
"service's content developer in the architectural review for your library. To"
" find the content developer you should work with, check with your team's "
"Program Manager."
msgstr ""

#: docs/android/design.md:block 353 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-docs-contributors-guide\" %} follow"
" the [Azure SDK Contributors Guide] (MICROSOFT INTERNAL)"
msgstr ""

#: docs/android/design.md:block 354 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-docs-style-guide\" %} adhere to the"
" Microsoft style guides when you write public-facing documentation. "
"(MICROSOFT INTERNAL)"
msgstr ""

#: docs/android/design.md:block 355 (unordered list)
msgid "[Microsoft Writing Style Guide]"
msgstr ""

#: docs/android/design.md:block 355 (unordered list)
msgid "[Microsoft Cloud Style Guide]"
msgstr ""

#: docs/android/design.md:block 356 (paragraph)
msgid ""
"Use the style guides for both long-form documentation like a README and the "
"`docstrings` in your code."
msgstr ""

#: docs/android/design.md:block 357 (paragraph)
msgid ""
"{% include requirement/SHOULD id=\"android-docs-into-silence\" %} attempt to"
" document your library into silence. Preempt developers' usage questions and"
" minimize GitHub issues by clearly explaining your API in the `docstrings`. "
"Include information on service limits and errors they might hit, and how to "
"avoid and recover from those errors."
msgstr ""

#: docs/android/design.md:block 358 (paragraph)
msgid ""
"As you write your code, doc it so you never hear about it again. The fewer "
"questions you have to answer about your client library, the more time you "
"have to build new features for your service."
msgstr ""

#: docs/android/design.md:block 359 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-docs-gradle-versions\" %} "
"include version details when specifying Gradle dependency statements."
msgstr ""

#: docs/android/design.md:block 360 (header)
msgid "Samples"
msgstr ""

#: docs/android/design.md:block 361 (paragraph)
msgid ""
"Code samples are small applications that demonstrate a certain feature that "
"is relevant to the client library. Samples allow developers to quickly "
"understand the full usage requirements of your client library. Code samples "
"shouldn't be any more complex than they needed to demonstrate the feature. "
"Don't write full applications. Samples should have a high signal to noise "
"ratio between useful code and boilerplate code for non-related reasons."
msgstr ""

#: docs/android/design.md:block 362 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-samples-include-them\" %} include "
"code samples alongside your library's code within the repository. The "
"samples should clearly and succinctly demonstrate the code most developers "
"need to write with your library. Include samples for all common operations. "
"Pay attention to operations that are complex or might be difficult for new "
"users of your library. Include samples for the champion scenarios you've "
"identified for the library."
msgstr ""

#: docs/android/design.md:block 363 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-samples-location\" %} place code "
"samples within the `/src/samples/java` directory within the client library "
"root directory. The samples will be compiled, but not packaged into the "
"resulting jar."
msgstr ""

#: docs/android/design.md:block 364 (quote)
msgid ""
"TODO: Add section about making code runnable through means similar to a Java"
" class' main method."
msgstr ""

#: docs/android/design.md:block 365 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-samples-coding-style\" %} use the "
"latest coding conventions when creating samples. Make liberal use of Java 8 "
"syntax and APIs (for example, diamond operators) as they remove boilerplate "
"from your samples and highlight you library, as long as they are included in"
" [Android's Java 8 supported features list for the Gradle 3.0.0+ "
"plugin][Java 8 supported features]."
msgstr ""

#: docs/android/design.md:block 366 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-samples-use-latest-library\" %} "
"compile sample code using the latest major release of the library. Review "
"sample code for freshness. At least one commit must be made (to update "
"dependencies) to each sample per semester."
msgstr ""

#: docs/android/design.md:block 367 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-samples-grafting\" %} ensure that "
"code samples can be easily grafted from the documentation into a users own "
"application. For example, don't rely on variable declarations in other "
"samples."
msgstr ""

#: docs/android/design.md:block 368 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-samples-readability\" %} write code"
" samples for ease of reading and comprehension over code compactness and "
"efficiency."
msgstr ""

#: docs/android/design.md:block 369 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-samples-platform-support\" %} "
"ensure that samples can run in Android Studio for Windows, macOS and Linux. "
"Don't use a non-standard developer toolchain."
msgstr ""

#: docs/android/design.md:block 370 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-samples-build-code\" %} build and "
"test your code samples using the repository's continuous integration (CI) to"
" ensure they remain functional."
msgstr ""

#: docs/android/design.md:block 371 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-snippets-no-combinations\" %} "
"combine multiple operations in a code sample unless it's required for "
"demonstrating the type or member. For example, a Cosmos DB code sample "
"doesn't include both account and container creation operations. Create a "
"sample for account creation, and another sample for container creation."
msgstr ""

#: docs/android/design.md:block 372 (paragraph)
msgid ""
"Combined operations require knowledge of additional operations that might be"
" outside their current focus. The developer must first understand the code "
"surrounding the operation they're working on, and can't copy and paste the "
"code sample into their project."
msgstr ""

#: docs/android/design.md:block 373 (header)
msgid "Java Best Practices for Android"
msgstr ""

#: docs/android/design.md:block 374 (paragraph)
msgid ""
"This section introduces guidelines for fundamental Java development design "
"decisions that are used throughout the Azure SDK for Android."
msgstr ""

#: docs/android/design.md:block 375 (header)
msgid "Naming Patterns"
msgstr ""

#: docs/android/design.md:block 376 (paragraph)
msgid ""
"Using a consistent set of naming patterns across all client libraries will "
"ensure a consistent and more intuitive developer experience. This section "
"outlines good practices for naming that must be followed by all client "
"libraries."
msgstr ""

#: docs/android/design.md:block 377 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-naming-succinct\" %} prefer "
"succinctness over verbosity in method and class names, except when "
"readability is impacted. A few examples include:"
msgstr ""

#: docs/android/design.md:block 378 (unordered list)
msgid ""
"A class may want to return an identifier to a user. There is no additional "
"value in the fully-qualified `getIdentifier()` compared with the shorter and"
" equally-descriptive `getId()`."
msgstr ""

#: docs/android/design.md:block 378 (unordered list)
msgid ""
"A method called `getName()` is short, but may leave some doubt in the users "
"mind about which name is being represented. Instead, naming this method "
"`getLinkName()` will remove all doubt from the users mind, and without "
"substantial additional verbosity. Similarly, in the case of `getId()` above,"
" always choose to specify the identifier name if there is any likelihood of "
"confusion about which identifier is being referenced. For example, use "
"`getTenantId()` rather than `getId()`, unless it is completely unambiguous "
"as to which identifier is being referenced."
msgstr ""

#: docs/android/design.md:block 379 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-naming-uppercase-acronyms\" %} "
"fully uppercase acronyms. APIs must take the form of `getHttpConnection()` "
"or `getUrlName()` rather than `getHTTPConnection()` or `getURLName()`."
msgstr ""

#: docs/android/design.md:block 380 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-naming-service-acronyms\" %} use "
"service-specific acronyms sparingly in API. Whereas most users will accept a"
" method including `Http` or `Url` in the name, most users will not know what"
" `Sas` or `Cpk` mean. Where possible (without breaking the succinctness over"
" verbosity requirement above), expansion of acronyms, or at the very least "
"sufficient documentation at class and method levels to describe the acronym,"
" must be considered."
msgstr ""

#: docs/android/design.md:block 381 (paragraph)
msgid ""
"{% include requirement/MUST id=\"android-naming-host-vs-hostname\" %} use "
"the correct naming for 'host' vs 'hostname'. 'hostname' is the host name "
"without any port number, whereas 'host' is the hostname with the port "
"number."
msgstr ""

#: docs/android/design.md:block 382 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-naming-camel-case\" %} use camel"
" case on words that are commonly accepted in their combined form. For "
"example, 'hostname' should be spelt as `hostname` rather than `hostName`, "
"and 'username' should be spelt as `username` rather than `userName`."
msgstr ""

#: docs/android/design.md:block 383 (paragraph)
msgid ""
"{% include requirement/MUSTNOT id=\"android-interface-i-prefix\" %} name "
"interface types with an 'I' prefix, e.g. `ISearchClient`. Instead, do not "
"have any prefix for an interface, preferring `SearchClient` as the name for "
"the interface type in this case."
msgstr ""

#: docs/android/design.md:block 384 (paragraph)
msgid "{% include refs.md %} {% include_relative refs.md %}"
msgstr ""
